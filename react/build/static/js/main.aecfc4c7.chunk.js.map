{"version":3,"sources":["services/serviceHelper.js","services/usersService.js","components/navigation/SiteNav.jsx","Home.jsx","components/user/Login.jsx","components/user/Register.jsx","services/techCompaniesService.js","components/companies/Company.jsx","components/companies/Companies.jsx","services/jobsService.js","components/jobs/Job.jsx","components/jobs/Jobs.jsx","services/friendsService.js","components/person/Person.jsx","components/friends/Friends.jsx","services/eventsService.js","components/events/Event.jsx","components/events/Events.jsx","components/friends/NewEditFriends.jsx","components/jobs/NewEditJobs.jsx","components/companies/NewEditCompanies.jsx","components/files/FileUpload.jsx","services/filesService.js","components/codeChallenge/PoliticalCandidateCard.jsx","components/codeChallenge/services/politicalCandidateService.js","components/codeChallenge/PoliticalCandidates.jsx","components/codeChallenge/services/carService.js","components/codeChallenge/SingleCar.jsx","components/codeChallenge/Cars.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["axios","defaults","withCredentials","interceptors","request","use","config","onGlobalSuccess","response","data","process","REACT_APP_API_HOST_PREFIX","REACT_APP_API_NODE_HOST_PREFIX","entity","getCurrentUser","console","log","method","url","crossdomain","headers","getUserById","id","SiteNav","props","navigate","useNavigate","useState","user","state","setState","startLogout","e","preventDefault","usersService","then","logoutSuccess","catch","logoutFail","prevState","tempState","isLoggedIn","type","err","useEffect","sendAppLogoutState","Fragment","className","aria-label","to","href","src","width","height","alt","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","firstName","lastName","onClick","Home","Login","email","password","tenantId","setUser","onFormFieldChange","target","value","name","prevUser","newUserObject","loginSuccess","getSuccess","getFail","item","getByIdSuccess","getByIdFail","userState","sendAppLoginState","loginError","Toastr","warning","onChange","placeholder","style","maxwidth","autoFocus","payload","Register","passwordConfirm","avatarUrl","addSuccess","success","addError","errorString","i","errors","length","endpoint","getPage","index","size","helper","Company","thisCompany","aCompany","modal","setModal","toggle","onLocalCompanyEdit","editThisCompany","images","imageUrl","headline","summary","alignContent","padding","data-page","deleteThisCompany","color","isOpen","title","profile","slug","contactInformation","rel","urls","statusId","Companies","companies","companiesComponents","showContent","editIndex","editUrl","searchString","pageIndex","pageSize","totalCount","totalPages","pageData","setPage","populateCompaniesState","companiesArray","pageDataComp","companyHolder","pagedItems","idxOf","findIndex","company","result","Number","tags","friends","map","createCompanyCard","editCompany","targetPage","currentTarget","dataset","page","buttonId","newState","deleteCompany","useCallback","handler","getDeleteSuccessHandler","status","techCompaniesService","deleteError","prevCompanies","newCompaniesObject","splice","pageType","stateObj","companyUrl","searchForCompanies","getCompanies","getError","searchFor","searchSuccess","searchError","companiesSearch","stopPropagation","onKeyUp","keyCode","current","total","locale","Job","thisJob","aJob","onLocalJobEdit","editThisJob","techCompany","pay","deleteThisJob","description","dangerouslySetInnerHTML","__html","anArray","aString","commaSepSkills","skills","Jobs","jobs","jobsComponents","populateJobsState","jobsArray","createJobCard","editJob","job","deleteJob","jobsService","prevJobs","newJobsObject","jobUrl","searchForJobs","getJobs","Errors","jobsSearch","primaryImage","Person","thisPerson","aPerson","editThisFriend","deleteThisFriend","Friends","peopleComponents","populateFriendsState","friendsArray","createFriendCard","editFriend","person","deleteFriend","isNaN","friendsService","prevFriends","newFriendsObject","aFriend","friendUrl","searchForFriends","getFriends","Event","JSON","parse","stringify","anEvent","event","setEvent","holder","setHolder","modify","setModify","cancelEdit","updateSuccess","addEditEvent","eventIndex","updateError","error","localFormFieldChange","prevEvent","newEvent","metaData","dateStart","dateEnd","location","address","zipCode","autocomplete","setAutocomplete","data-index","changePrimaryView","onLoad","onPlaceChanged","onBlur","eventsService","latitude","containerStyle","Events","Geocode","setApiKey","setLanguage","lat","lng","eventMapMarkers","showAllMapMarkers","locs","loc","setLoc","setNewEvent","emptyTheNewPayload","events","eventComponents","currentTab","selectedIndex","toggleModal","createSuccess","loadEvents","createError","tempObj","buildEventList","prevPage","newObj","tabToggle","fromAddress","results","geometry","setNewMarker","anObj","editHolder","formFieldChange","prevLoc","push","updatedEvent","newMetaLoc","newTime","prevNewEvent","newUserEvents","tab","startMapping","goToLocation","tabs","classnames","active","activeTab","tabId","sm","objectFit","substring","googleMapsApiKey","libraries","mapContainerStyle","center","zoom","position","maxHeight","NewEditFriends","useLocation","friendId","useParams","friend","setFriend","populateFriendState","friendObject","prevFriend","getFriend","thisFriend","passedState","saveSuccess","saveError","submitSuccess","submitError","bio","defaultValue","readOnly","NewEditJobs","jobId","setJob","populateJobState","jobObject","prevJob","skillString","getCompsSuccess","companiesString","companyList","getCompsFail","getJob","getSkillsArray","skillsString","replace","split","class","NewEditCompanies","companyId","setCompany","populateCompanieState","companyObject","prevCompany","getCompany","imageTypeId","FileUpload","selectedFile","setSelectedFile","isFilePicked","setIsFilePicked","files","fileData","fileCollection","setFileList","buildAnchors","link","uploadSuccess","newFile","items","prevFileCollection","uploadError","lastModifiedDate","toLocaleDateString","formData","FormData","append","filesService","PoliticalCandidateCard","politicalCandidate","winner","border","party","currentVotes","politicalCandidateService","PoliticalCandidates","form1","setForm1","form2","setForm2","buildSubmitPayload","candidate","Party","form","getCardForCandidate","onForm1FieldChange","prevForm1","newObject","onForm2FieldChange","prevForm2","onReset","resetForm1","resetForm2","onSubmit","add","submit1Success","submit1Error","submit2Success","submit2Error","candidate1Totals","candidate2Totals","carService","SingleCar","car","make","year","model","onCarClicked","showButton","Cars","mappedCars","filteredCars","filterString","showCars","selectedCar","cars","setCars","mapCars","setFilter","filterYear","setSelectedCar","filterCars","getAll","filter","disabled","App","setUserLoginState","someState","userSuccess","userByIdSuccess","userByIdFail","userFail","receiveUserState","loginState","copyOfState","role","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","_logger","debug","extend","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNACAA,IAAMC,SAASC,iBAAkB,EAEjCF,IAAMG,aAAaC,QAAQC,KAAI,SAAUC,GAEvC,OADAA,EAAOJ,iBAAkB,EAClBI,KAQT,IAAMC,EAAkB,SAACC,GAEvB,OAAOA,EAASC,M,GAOMC,mIAAYC,0BACPD,mIAAYE,+B,mDCrBnCC,EAAS,2CAkBTC,EAAiB,WAEnBC,QAAQC,IAAI,iCACZ,IAAMV,EAAS,CACXW,OAAQ,MACRC,IAAKL,EAAS,WACdX,iBAAiB,EACjBiB,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,IAIXe,EAAc,SAACC,GAEjBP,QAAQC,IAAI,+BACZ,IAAMV,EAAS,CACXW,OAAQ,MACRC,IAAKL,EAAS,IAAMS,EACpBpB,iBAAiB,EACjBiB,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,I,eCsJFiB,MA7Lf,SAAiBC,GAEb,IAAMC,EAAWC,cAEjB,EAA0BC,mBAASH,EAAMI,MAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACAf,QAAQC,IAAI,QAASa,GACrBd,QAAQC,IAAI,aAAcQ,EAAMI,MAEhC,IAAMG,EAAc,SAACC,GACjBA,EAAEC,iBDkCK,WAEXlB,QAAQC,IAAI,uBACZ,IAAMV,EAAS,CACXW,OAAQ,MACRC,IAAKL,EAAS,UACdX,iBAAiB,EACjBiB,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GC3CT4B,GAEKC,KAAKC,GACLC,MAAMC,IAeTF,EAAgB,SAAC5B,GACnBO,QAAQC,IAAI,WAAYR,GAExBsB,GAAS,SAACS,GAIN,IAAMC,EAAS,eAAQD,GAUvB,OANAC,EAAUC,YAAa,EACvBD,EAAUE,KAAO,kBAKVF,MAQTF,EAAa,SAACK,GAChB5B,QAAQC,IAAI,eAAgB2B,GAC5BlB,EAAS,WAuBb,OAlBAmB,qBAAU,WACN7B,QAAQC,IAAI,gBACNa,EAAMY,YAA+B,oBAAfZ,EAAMa,MAC9BlB,EAAMqB,mBAAmBhB,GAET,iBAAfA,EAAMa,MAAiD,mBAApBlB,EAAMI,KAAKc,MAC/CZ,GAAS,WAKL,OAAON,EAAMI,UAGtB,CAACC,EAAMY,WAAYZ,EAAMa,OAKxB,cAAC,IAAMI,SAAP,UACI,qBACIC,UAAU,8CACVC,aAAW,wBAFf,SAII,sBAAKD,UAAU,YAAf,UACI,cAAC,IAAD,CAAME,GAAKzB,EAAMI,KAAKa,WAAc,IAAM,SAAUM,UAAU,eAAeG,KAAK,IAAlF,SACI,qBAEIC,IAAI,uCACJC,MAAM,KACNC,OAAO,KACPN,UAAU,2BACVO,IAAI,YAGZ,wBACIP,UAAU,iBACVL,KAAK,SACLa,iBAAe,WACfC,iBAAe,oBACfC,gBAAc,mBACdC,gBAAc,QACdV,aAAW,oBAPf,SASI,sBAAMD,UAAU,0BAGpB,sBAAKA,UAAU,2BAA2BzB,GAAG,mBAA7C,UACI,qBAAIyB,UAAU,kCAAd,UACI,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAME,GAAKzB,EAAMI,KAAKa,WAAc,IAAM,SAAUM,UAAU,uCAA9D,oBAIJ,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CAAME,GAAKzB,EAAMI,KAAKa,WAAc,WAAa,SAAUM,UAAU,uCAArE,uBAIJ,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CACIE,GAAKzB,EAAMI,KAAKa,WAAc,QAAU,SAExCM,UAAU,uCAHd,oBAQJ,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CACIE,GAAKzB,EAAMI,KAAKa,WAAc,aAAe,SAE7CM,UAAU,uCAHd,8BAQJ,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CACIE,GAAKzB,EAAMI,KAAKa,WAAc,UAAY,SAE1CM,UAAU,uCAHd,sBAQJ,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CACIE,GAAKzB,EAAMI,KAAKa,WAAc,SAAW,SAEzCM,UAAU,uCAHd,4BAiBJ,oBAAIA,UAAU,WAAd,SACI,cAAC,IAAD,CACIE,GAAKzB,EAAMI,KAAKa,WAAc,QAAU,SAExCM,UAAU,uCAHd,oBAzDR,8BAiEA,qBAAKA,UAAU,WAAf,SACI,sBAAKA,UAAU,uEAAf,UACI,gCAASvB,EAAMI,KAAKa,WAAZ,UAA6BjB,EAAMI,KAAK+B,UAAxC,YAAqDnC,EAAMI,KAAKgC,UAAa,qBACnFpC,EAAMI,KAAKa,WAvJ7B,cAAC,IAAD,CAAMQ,GAAG,GAAGP,KAAK,SAASmB,QAAS9B,EAAagB,UAAU,kBAA1D,oBARA,cAAC,IAAD,CAAME,GAAG,SAASP,KAAK,SAASK,UAAU,6BAA1C,mBA6JY,IAEuEvB,EAAMI,KAAKa,WAAc,GA3J5G,cAAC,IAAD,CAAMQ,GAAG,YAAYP,KAAK,SAASK,UAAU,kBAA7C,sCCGDe,MA3Bf,SAActC,GAaZ,OAPAoB,qBAAU,WACR7B,QAAQC,IAAI,eAAgBQ,KAE3B,IAKD,cAAC,IAAMsB,SAAP,UACE,qBAAKC,UAAU,YAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,+C,gBCwMGgB,MAlNf,SAAevC,GAWb,MAAwBG,mBAAS,CAC/BgC,UAAW,GACXC,SAAU,GACVI,MAAO,GACPC,SAAU,GACVC,SAAU,GACVzB,YAAY,IANd,mBAAOb,EAAP,KAAauC,EAAb,KAiBMC,EAAoB,SAACpC,GAIzB,IAAMqC,EAASrC,EAAEqC,OAIXC,EAAQD,EAAOC,MAKfC,EAAOF,EAAOE,KAOpBJ,GAAQ,SAAAK,GAIN,IAAMC,EAAa,eACdD,GAUL,OALAC,EAAcF,GAAQD,EAKfG,MAiCLC,EAAe,SAAClE,GAIpBO,QAAQC,IAAI,gBAAkBR,GAO9B0B,IAEGC,KAAKwC,GACLtC,MAAMuC,IAQLD,EAAa,SAACnE,GAClBO,QAAQC,IAAI,4BAA8BR,GAM1C0B,EACe1B,EAASC,KAAKoE,KAAKvD,IAC/Ba,KAAK2C,GACLzC,MAAM0C,IAQLD,EAAiB,SAACtE,GACtBO,QAAQC,IAAI,4BAA8BR,GAK1C,IAAIwE,EAAY,CACdrB,UAAWnD,EAASC,KAAKoE,KAAKlB,UAC9BC,SAAUpD,EAASC,KAAKoE,KAAKjB,SAC7BnB,YAAY,EACZC,KAAM,kBAORlB,EAAMyD,kBAAkBD,IAQpBD,EAAc,SAACpC,GACnB5B,QAAQC,IAAI,+BAAiC2B,IAQzCiC,EAAU,SAACjC,GACf5B,QAAQC,IAAI,yBAA2B2B,IAQnCuC,EAAa,SAACvC,GAIlB5B,QAAQC,IAAI,cAAgB2B,GAC5BwC,IAAOC,QAAQzC,IAGjB,OACE,cAAC,IAAMG,SAAP,UAKE,uBAAMyB,KAAK,YAAYxB,UAAU,uEAAjC,UACE,oBAAIA,UAAU,wBAAd,2BACA,uBAAOL,KAAK,QAAQ4B,MAAO1C,EAAKoC,MAAO1C,GAAG,QAAQiD,KAAK,QAAQc,SAAUjB,EAAmBrB,UAAU,mBAAmBuC,YAAY,gBAAgBC,MAAO,CAAEC,SAAU,QAAUC,WAAS,IAC3L,uBAAO/C,KAAK,WAAW4B,MAAO1C,EAAKqC,SAAU3C,GAAG,WAAWiD,KAAK,WAAWc,SAAUjB,EAAmBrB,UAAU,mBAAmBuC,YAAY,aACjJ,uBAAO5C,KAAK,OAAO4B,MAAO1C,EAAKsC,SAAU5C,GAAG,WAAWiD,KAAK,WAAWc,SAAUjB,EAAmBrB,UAAU,mBAAmBuC,YAAY,2CAC7I,8BAAG,gCAAO,mBAAGpC,KAAK,iCAAR,oCAAV,OACA,wBAAQW,QA7HE,SAAC7B,GAIfA,EAAEC,iBH1BQ,SAACyD,GAEX3E,QAAQC,IAAI,sBACZ,IAAMV,EAAS,CACXW,OAAQ,OACRC,IAAKL,EAAS,SACdJ,KAAMiF,EACNxF,iBAAiB,EACjBiB,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GGqBb4B,CACSN,GACNO,KAAKuC,GACLrC,MAAM6C,IAgHqBnC,UAAU,sBAAsBzB,GAAG,QAA7D,kCC1COqE,MA7Jf,WAImBjE,cAAjB,IAOA,EAAwBC,mBAAS,CAC/BgC,UAAW,GACXC,SAAU,GACVI,MAAO,GACPC,SAAU,GACV2B,gBAAiB,GACjBC,UAAW,GACX3B,SAAU,KAPZ,mBAAOtC,EAAP,KAAauC,EAAb,KAkBMC,EAAoB,SAACpC,GAIzB,IAAMqC,EAASrC,EAAEqC,OAIXC,EAAQD,EAAOC,MAKfC,EAAOF,EAAOE,KAQpBJ,GAAQ,SAAAK,GAIN,IAAMC,EAAa,eACdD,GAUL,OALAC,EAAcF,GAAQD,EAKfG,MAiCLqB,EAAa,SAACtF,GAIlBO,QAAQC,IAAI,cAAgBR,GAK5B2E,IAAOY,QAAQ,gCAAkCvF,EAASC,KAAKoE,OAS3DmB,EAAW,SAACrD,GAChB5B,QAAQC,IAAI,YAAc2B,GAE1B,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBACfd,IAAOC,QAAQa,IAIjB,OACE,cAAC,IAAMnD,SAAP,UAEE,uBAAMyB,KAAK,mBAAmBxB,UAAU,uEAAxC,UACE,oBAAIA,UAAU,6BAAd,6BACA,gDAAmBnB,EAAK+B,aACxB,uBAAOjB,KAAK,OAAOK,UAAU,0BAA0BuB,MAAO1C,EAAK+B,UAAWY,KAAK,YAAYjD,GAAG,YAAY+D,SAAUjB,EAAmBkB,YAAY,qBACvJ,8CACA,uBAAO5C,KAAK,OAAOK,UAAU,0BAA0BwB,KAAK,WAAWjD,GAAG,WAAW+D,SAAUjB,EAAmBkB,YAAY,oBAC9H,kDACA,uBAAO5C,KAAK,QAAQK,UAAU,0BAA0BwB,KAAK,QAAQjD,GAAG,QAAQ+D,SAAUjB,EAAmBkB,YAAY,qBACzH,6CACA,uBAAO5C,KAAK,WAAWK,UAAU,0BAA0BwB,KAAK,WAAWjD,GAAG,WAAW+D,SAAUjB,EAAmBkB,YAAY,aAClI,qDACA,uBAAO5C,KAAK,WAAWK,UAAU,0BAA0BwB,KAAK,kBAAkBjD,GAAG,kBAAkB+D,SAAUjB,EAAmBkB,YAAY,0BAChJ,+CACA,uBAAO5C,KAAK,OAAOK,UAAU,0BAA0BwB,KAAK,YAAYjD,GAAG,YAAY+D,SAAUjB,EAAmBkB,YAAY,4CAChI,8CACA,uBAAO5C,KAAK,OAAOK,UAAU,0BAA0BwB,KAAK,WAAWjD,GAAG,WAAW+D,SAAUjB,EAAmBkB,YAAY,+BAC9H,oDAAsB,mBAAGpC,KAAK,iCAAR,qCACtB,uBAAOR,KAAK,WAAW4B,MAAM,OAAOC,KAAK,YAAYjD,GAAG,YAAYyB,UAAU,gCAC9E,4BAAG,wBAAQL,KAAK,SAASmB,QAxED,SAAC7B,GAI7BA,EAAEC,iBJrFM,SAACyD,GAET3E,QAAQC,IAAI,6BACZ,IAAMV,EAAS,CACXW,OAAQ,OACRC,IAAKL,EAAS,YACdJ,KAAMiF,EACNxF,iBAAiB,EACjBiB,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GIgFb4B,CACON,GACJO,KAAK2D,GACLzD,MAAM2D,IA2DoDjD,UAAU,sBAAsBzB,GAAG,SAAzF,2C,QC3JL+E,EAAW,mDAkCXC,EAAU,SAACC,EAAOC,GAEpBzF,QAAQC,IAAI,kCACZ,IAAMV,EAAS,CACXW,OAAQ,MACRC,IAAKmF,EAAQ,qBAAiBE,EAAjB,qBAAmCC,GAChDrF,aAAa,EACbjB,iBAAiB,EACjBkB,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GAAQ6B,KAAKsE,I,OCwFfC,MAvHf,SAAiBlF,GAGb,IAAMmF,EAAcnF,EAAMoF,SAI1B,EAA0BjF,oBAAS,GAAnC,mBAAOkF,EAAP,KAAcC,EAAd,KAIMC,EAAS,kBAAMD,GAAUD,IAIzBG,EAAqB,SAAChF,GACxBA,EAAEC,iBACFT,EAAMyF,gBAAgBN,EAAa3E,IAWvC,OAEI,eAAC,IAAMc,SAAP,WACI,sBAAKC,UAAU,OAAOwC,MAAO,CAAEnC,MAAO,SAAtC,UACI,qBAAKL,UAAU,eAAeI,IAAKwD,EAAYO,OAASP,EAAYO,OAAO,GAAGC,SAAW,eAAgB7D,IAAKqD,EAAYO,OAASP,EAAYO,OAAO,GAAGC,SAAW,aACpK,sBAAKpE,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,SAA4B4D,EAAYpC,OACxC,mBAAGxB,UAAU,YAAb,SAA0B4D,EAAYS,WACtC,mBAAGrE,UAAU,YAAb,SAA0B4D,EAAYU,aAE1C,sBAAK9B,MAAO,CAAE+B,aAAc,WAAYC,QAAS,QAAjD,UAEI,wBAAQ7E,KAAK,SAAS8E,YAAW,cAAgBb,EAAYrF,GAAIuC,QAASmD,EAAoBjE,UAAU,oCAAxG,kBACA,wBAAQL,KAAK,SAASmB,QAnBT,SAAC7B,GAC1BA,EAAEC,iBACFT,EAAMiG,kBAAkBzF,IAiByCV,GAAIqF,EAAYrF,GAAIyB,UAAU,mCAAnF,oBACA,wBAAQ2E,MAAM,SAAS3E,UAAU,oCAAoCc,QAASkD,EAA9E,6BAIR,eAAC,IAAD,CAAOY,OAAQd,EAAOE,OAAQA,EAA9B,UACI,eAAC,IAAD,CAAaA,OAAQA,EAArB,qCAAqD,4BAAG,4BAAIJ,EAAYiB,UAAxE,gBACA,cAAC,IAAD,UACI,qBAAK7E,UAAU,MAAf,SACI,wBAAOA,UAAU,QAAjB,UACI,+BAAI,6BACA,qBAAKI,IAAKwD,EAAYO,OAASP,EAAYO,OAAO,GAAGC,SAAW,eAAgB7D,IAAI,GAAGiC,MAAO,CAAEnC,MAAO,QAASC,OAAQ,aACvH,0BAEL,+BAAI,oBAAIN,UAAU,KAAd,kBAEC,6BACI4D,EAAYpC,UAErB,+BAAI,oBAAIxB,UAAU,KAAd,sBAEC,6BACI4D,EAAYS,cAErB,+BAAI,oBAAIrE,UAAU,KAAd,qBAEC,6BACI4D,EAAYU,aAErB,+BAAI,oBAAItE,UAAU,KAAd,qBAEC,6BACI4D,EAAYkB,aAErB,+BAAI,oBAAI9E,UAAU,KAAd,kBAEC,6BACI4D,EAAYmB,UAErB,+BAAI,oBAAI/E,UAAU,KAAd,0BAEC,6BACI4D,EAAYoB,mBAAqBpB,EAAYoB,mBAAmBtH,KAAO,6BAEhF,+BAAI,oBAAIsC,UAAU,KAAd,sBAEC,6BACG,mBAAGsB,OAAO,SAAS2D,IAAI,aAAa9E,KAAMyD,EAAYsB,KAAOtB,EAAYsB,KAAK,GAAG/G,IAAM,mBAAvF,SAA4GyF,EAAYsB,KAAOtB,EAAYsB,KAAK,GAAG/G,IAAM,0BAEjK,+BAAI,oBAAI6B,UAAU,KAAd,oBAEC,6BACI4D,EAAYuB,qBAQjC,eAAC,IAAD,WAEI,cAAC,IAAD,CAAQR,MAAM,UAAUF,YAAW,cAAgBb,EAAYrF,GAAIuC,QAASmD,EAA5E,kBAEU,IACV,cAAC,IAAD,CAAQU,MAAM,YAAY7D,QAASkD,EAAnC,8B,iCCypBLoB,MAlwBf,WAIE,IAAM1G,EAAWC,cAmBjB,EAA4BC,mBAAS,CACnCyG,UAAW,GACXC,oBAAqB,GACrBC,aAAa,EACb5F,KAAM,iBACN6F,WAAY,EACZC,QAAS,iBACTC,aAAc,GACdC,UAAW,EACXC,SAAU,GACVC,WAAY,EACZC,WAAY,IAXd,mBAAOC,EAAP,KAAiBC,EAAjB,KA6FMC,EAAyB,SAACC,GAO9BF,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAI1B,GAAuB,uBAAlBuG,EAASpG,MAAqD,uBAAlBoG,EAASpG,KAAgC,CAKxF,IAAIyG,EAAgBD,EAAad,UACjCc,EAAad,UAAYa,EAAeG,WAExC,IARwF,eAQ/E7C,GAGP,IAAIjF,EAAK6H,EAAc5C,GAAOjF,GAExB+H,EAAQH,EAAad,UAAUkB,WAAU,SAACC,GAC9C,IAAIC,GAAS,EAIb,OAHIC,OAAOF,EAAQjI,MAAQmI,OAAOnI,KAChCkI,GAAS,GAEJA,KAGLH,GAAS,IACXH,EAAad,UAAUiB,GAAOpB,KAAOkB,EAAc5C,GAAO0B,KAC1DiB,EAAad,UAAUiB,GAAOnC,OAASiC,EAAc5C,GAAOW,OAC5DgC,EAAad,UAAUiB,GAAOtB,mBAAqBoB,EAAc5C,GAAOwB,mBACxEmB,EAAad,UAAUiB,GAAOK,KAAOP,EAAc5C,GAAOmD,KAC1DR,EAAad,UAAUiB,GAAOM,QAAUR,EAAc5C,GAAOoD,UAlBxDpD,EAAQ,EAAGA,EAAQ4C,EAAc/C,OAAQG,IAAU,EAAnDA,QAwBT2C,EAAad,UAAYa,EAAeG,WAoB1C,OAdAF,EAAab,oBAAsBY,EAAeG,WAAWQ,IAAIC,GAIjEX,EAAaR,UAAYO,EAAeP,UACxCQ,EAAaP,SAAWM,EAAeN,SACvCO,EAAaN,WAAaK,EAAeL,WACzCM,EAAaL,WAAaI,EAAeJ,WAOlCK,MAgELY,EAAc,SAACnD,EAAa3E,GAKhC,IAAM+H,EAAa/H,EAAEgI,cAAcC,QAAQC,KACvCC,EAAWxD,EAAYrF,GAa3ByH,GAAQ,SAAAxG,GAIN,IAAM8G,EAAQ9G,EAAU6F,UAAUkB,WAAU,SAACC,GAC3C,IAAIC,GAAS,EAIb,OAHIC,OAAOF,EAAQjI,MAAQmI,OAAOU,KAChCX,GAAS,GAEJA,KAGT,KAAMH,GAAS,GAAI,OAAO,EAI1B,IAAMe,EAAQ,eAAQ7H,GAWtB,OAPA6H,EAAS1H,KAAO,eAChB0H,EAAS7B,UAAYc,EACrBe,EAAS5B,QAAUuB,EAKZK,MAaLC,EAAgBC,uBAAY,SAACtI,GAEjC,IAAImI,EAAWnI,EAAEqC,OAAO/C,GACxBP,QAAQC,IAAI,aAAcmJ,GAM1B,IAAMI,EAAUC,EAAwBL,IFpP1B,SAAC7I,EAAImJ,GAInB,GAFA1J,QAAQC,IAAI,4BAA8BqF,EAAW,IAAM/E,GAEtDA,EAAL,CAEA,IAAMhB,EAAS,CACXW,OAAQ,MACRC,IAAKmF,EAAW,IAAM/E,EAAK,IAAMmJ,EACjCtJ,aAAa,EACbjB,iBAAiB,EACjBkB,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,KE8OboK,CACaP,EAAU,KACpBhI,KAAKoI,GACLlI,MAAMsI,KACR,IAaGH,EAA0B,SAAClJ,GAM/B,OAAO,WAIL6D,IAAOY,QAAQ,gCAOfgD,GAAQ,SAAA6B,GAIN,IAAMC,EAAkB,eACnBD,GAMLC,EAAmBzC,UAAnB,YAAmCyC,EAAmBzC,WAItD,IAAMiB,EAAQwB,EAAmBzC,UAAUkB,WAAU,SAACC,GACpD,IAAIC,GAAS,EAIb,OAHIC,OAAOF,EAAQjI,MAAQmI,OAAOnI,KAChCkI,GAAS,GAEJA,KAaT,OAPIH,GAAS,IACXwB,EAAmBzC,UAAU0C,OAAOzB,EAAO,GAC3CwB,EAAmBxC,oBAAsBwC,EAAmBzC,UAAUwB,IAAIC,IAKrEgB,OAaPF,EAAc,SAAChI,GAKnB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAIfd,IAAOC,QAAQa,IAeX4D,EAAoB,SAACjD,EAAUL,GACnC,OAAO,cAAC,EAAD,CAELK,SAAUA,EACVK,gBAAiB6C,EACjBrC,kBAAmB4C,EACnB9D,MAAOA,EACPwE,SAAUjC,EAASpG,MALdkE,EAAStF,KAiBlBsB,qBAAU,WAMR,GAJA7B,QAAQC,IAAI,aAIU,iBAAlB8H,EAASpG,KAAyB,CAIpC,IAAMsI,EAAQ,2BAAQlC,EAASV,UAAUU,EAASP,YAApC,IAAgD7F,KAAM,eAAgBuI,WAAY,KAChGxJ,EAASqH,EAASN,QAAS,CAAE3G,MAAOmJ,QAER,uBAAlBlC,EAASpG,MAAqD,uBAAlBoG,EAASpG,KAG/DwI,EAAmBpC,EAASJ,UAAWI,EAASH,SAAUG,EAASL,cAOnE0C,EAAarC,EAASJ,UAAWI,EAASH,YAE3C,CAACG,EAASpG,KAAMoG,EAASJ,UAAWI,EAASH,WAahD,IAAMwC,EAAe,SAAC5E,EAAOC,GAC3BkE,EACWnE,EAAOC,GACfrE,KAAKwC,GACLtC,MAAM+I,IAQLzG,EAAa,SAAClE,GAKlBuI,EAAuBvI,EAAKoE,OAWxBuG,EAAW,SAACzI,GAYhBwC,IAAOC,QAAQzC,IAsBXuI,EAAqB,SAAC3E,EAAOC,EAAMiC,IF3c5B,SAAClC,EAAOC,EAAM6E,GAEzBtK,QAAQC,IAAI,kCACZ,IAAMV,EAAS,CACXW,OAAQ,MACRC,IAAKmF,EAAQ,4BAAwBE,EAAxB,qBAA0CC,EAA1C,cAAoD6E,GACjElK,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GAAQ6B,KAAKsE,IEmc1BiE,CACUnE,EAAOC,EAAMiC,GACpBtG,KAAKmJ,GACLjJ,MAAMkJ,IAQLD,EAAgB,SAAC7K,GAMrBuI,EAAuBvI,EAAKoE,OAexB0G,EAAc,SAAC5I,GAYnBwC,IAAOC,QAAQzC,IAQX6I,EAAkB,SAACxJ,GAEvBjB,QAAQC,IAAI,kBAAmBgB,GAC1B8G,EAASL,aAYdM,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAW1B,OANA2G,EAAaxG,KAA8B,uBAAtBwG,EAAaxG,KAAiC,qBAAuB,qBAC1FwG,EAAaR,UAAY,EAKlBQ,KA1BP/D,IAAOC,QAAQ,kCA0HnB,OACE,cAAC,IAAMtC,SAAP,UACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,+CAGJ,sBAAKA,UAAU,gBAAf,UACE,8BAAG,wBAAQc,QAnhBA,SAAC7B,GAClBA,EAAEC,iBACFD,EAAEyJ,kBASF1C,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAS1B,OALA2G,EAAaZ,aAAgB/F,EAAU+F,YAKhCY,MA2f6BxG,KAAK,SAASK,UAAU,6BAArD,oCACD,wBAAQc,QAzMF,SAAC7B,GACfA,EAAEC,iBACFR,EAAS,mBAuMyBiB,KAAK,SAASK,UAAU,6BAAlD,6BACA,wBAAQzB,GAAG,cAAcuC,QAlGf,SAAC7B,GAEnBjB,QAAQC,IAAI,cAAegB,GAS3B+G,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAU1B,OANA2G,EAAaxG,KAAO,iBACpBwG,EAAaT,aAAe,GAKrBS,MAyE8CnG,UAAU,6BAA6BwB,KAAK,cAA3F,0BACA,wBAAQjD,GAAG,SAASuC,QAAS2H,EAAiBzI,UAA+B,uBAAlB+F,EAASpG,MAAqD,uBAAlBoG,EAASpG,KAAkC,SAAW,6BAA8B6B,KAAK,SAAhM,oBACA,uBAAO7B,KAAK,OAAOpB,GAAG,eAAeoK,QAxrB3B,SAAC1J,GAEnB,GAAuB,uBAAlB8G,EAASpG,MAAqD,uBAAlBoG,EAASpG,KAA1D,CAGiB,KACbV,EAAE2J,SAAsBH,EAAgBxJ,KAkrBuBqD,SAxqB3C,SAACrD,GAIzB,IAAMqC,EAASrC,EAAEqC,OAIXC,EAAQD,EAAOC,MAKfC,EAAOF,EAAOE,KAOpBwE,GAAQ,SAAAxG,GAIN,IAAMkC,EAAa,eACdlC,GAqBL,OANAkC,EAAcF,GAAQD,EAMfG,MA0nBuFH,MAAOwE,EAASL,aAAclE,KAAK,eAAegB,MAAO,CAAEnC,MAAO,cAI5J,uBAAOL,UAAU,QAAjB,SAAyB,6BAAI,qBAAIK,MAAM,MAAV,UAC3B,cAAC,IAAD,CACEiC,SAnES,SAAA6E,GACnBnJ,QAAQC,IAAI,WAAYkJ,GACxBnB,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAS1B,OALA2G,EAAaR,UAAYwB,EAAO,EAKzBhB,MAqDC0C,QAAS9C,EAASJ,UAAY,EAC9BmD,MAAO/C,EAASF,WAChBkD,OAAQA,IACRnD,SAAUG,EAASH,WANM,aAU3B,yBAAQtD,SA/CO,SAACrD,GACxBjB,QAAQC,IAAI,mBAAoBgB,GAChC+G,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAU1B,OANA2G,EAAaP,SAAW3G,EAAEqC,OAAOC,MACjC4E,EAAaR,UAAY,EAKlBQ,MA+BmC5E,MAAOwE,EAASH,SAApD,UACE,wBAAQrE,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,0BAIHwE,EAASR,aAAeQ,EAAST,6BCpwBtChC,EAAW,0CCmKF0F,MA1Jf,SAAavK,GAGT,IAAMwK,EAAUxK,EAAMyK,KAItB,EAA0BtK,oBAAS,GAAnC,mBAAOkF,EAAP,KAAcC,EAAd,KAIMC,EAAS,kBAAMD,GAAUD,IAIzBqF,EAAiB,SAAClK,GACpBA,EAAEC,iBACFT,EAAM2K,YAAYH,EAAShK,IA4B/B,OAEI,eAAC,IAAMc,SAAP,WACI,sBAAKC,UAAU,OAAOwC,MAAO,CAAEnC,MAAO,SAAtC,UACI,qBAAKL,UAAU,eAAeI,IAAK6I,EAAQI,YAAYlF,OAAO,GAAGC,SAAU7D,IAAK0I,EAAQI,YAAYlF,OAAO,GAAGC,WAC9G,sBAAKpE,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,SAA4BiJ,EAAQpE,QACpC,mBAAG7E,UAAU,YAAb,SAA0BiJ,EAAQK,MAClC,mBAAGtJ,UAAU,YAAb,SAA0BiJ,EAAQ3E,aAEtC,sBAAK9B,MAAO,CAAE+B,aAAc,WAAYC,QAAS,QAAjD,UACI,wBAAQ7E,KAAK,SAAS8E,YAAW,SAAWwE,EAAQ1K,GAAIuC,QAASqI,EAAgBnJ,UAAU,oCAA3F,kBACA,wBAAQL,KAAK,SAASmB,QAnCb,SAAC7B,GACtBA,EAAEC,iBACFT,EAAM8K,cAActK,IAiCyCV,GAAI0K,EAAQ1K,GAAIyB,UAAU,mCAA3E,oBACA,wBAAQ2E,MAAM,SAAS3E,UAAU,oCAAoCc,QAASkD,EAA9E,6BAIR,eAAC,IAAD,CAAOY,OAAQd,EAAOE,OAAQA,EAA9B,UACI,eAAC,IAAD,CAAaA,OAAQA,EAArB,qCAAqD,4BAAG,4BAAIiF,EAAQpE,UAApE,gBACA,cAAC,IAAD,UACI,qBAAK7E,UAAU,MAAf,SACI,wBAAOA,UAAU,QAAjB,UACI,+BAAI,6BACA,qBAAKI,IAAK6I,EAAQI,YAAYlF,OAAO,GAAGC,SAAU7D,IAAI,GAAGiC,MAAO,CAAEnC,MAAO,QAASC,OAAQ,aACzF,0BAEL,+BAAI,oBAAIN,UAAU,KAAd,mBAEC,6BACIiJ,EAAQpE,WAEjB,+BAAI,oBAAI7E,UAAU,KAAd,yBAEC,6BACIiJ,EAAQO,iBAEjB,+BAAI,oBAAIxJ,UAAU,KAAd,qBAEC,6BACIiJ,EAAQ3E,aAEjB,+BAAI,oBAAItE,UAAU,KAAd,iBAEC,mCACKiJ,EAAQK,UAElB,+BAAI,oBAAItJ,UAAU,KAAd,kBAEC,6BACIiJ,EAAQlE,UAEjB,+BAAI,oBAAI/E,UAAU,KAAd,oBAEC,6BACIiJ,EAAQ9D,cAEjB,+BAAI,oBAAInF,UAAU,KAAd,oBAEC,oBAAIyJ,wBAAyB,CAAEC,OAtErC,SAACC,GAEpB,IADA,IAAIC,EAAU,OACLpG,EAAQ,EAAGA,EAAQmG,EAAQtG,OAAQG,IACpCA,IAAUmG,EAAQtG,OAAS,EAC3BuG,GAAWD,EAAQnG,GAAOhC,KAAO,QAEjCoI,GAAW,OAASD,EAAQnG,GAAOhC,KAAO,QAGlD,OAAOoI,EA6DyDC,CAAeZ,EAAQa,cAGnE,+BAAI,oBAAI9J,UAAU,KAAd,0BAEC,6BACIiJ,EAAQI,YAAY7H,UAE7B,+BAAI,oBAAIxB,UAAU,KAAd,sBAEC,6BACIiJ,EAAQI,YAAYhF,cAE7B,+BAAI,oBAAIrE,UAAU,KAAd,qBAEC,6BACIiJ,EAAQI,YAAYvE,aAE7B,+BAAI,oBAAI9E,UAAU,KAAd,qBAEC,6BACIiJ,EAAQI,YAAY/E,aAE7B,+BAAI,oBAAItE,UAAU,KAAd,qBAEC,6BACIiJ,EAAQI,YAAYrE,mBAAmBtH,iBAQ5D,eAAC,IAAD,WACI,cAAC,IAAD,CAAQiH,MAAM,UAAUF,YAAW,SAAWwE,EAAQ1K,GAAIuC,QAASqI,EAAnE,kBAEU,IACV,cAAC,IAAD,CAAQxE,MAAM,YAAY7D,QAASkD,EAAnC,8BCkkBL+F,MA9sBf,WAIE,IAAMrL,EAAWC,cAmBjB,EAA4BC,mBAAS,CACnCoL,KAAM,GACNC,eAAgB,GAChB1E,aAAa,EACb5F,KAAM,YACN6F,WAAY,EACZC,QAAS,YACTC,aAAc,GACdC,UAAW,EACXC,SAAU,GACVC,WAAY,EACZC,WAAY,EACZhC,OAAO,IAZT,mBAAOiC,EAAP,KAAiBC,EAAjB,KAwFMkE,EAAoB,SAACC,GAOzBnE,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAsB1B,OAlBA2G,EAAa6D,KAAOG,EAAU9D,WAK9BF,EAAa8D,eAAiBE,EAAU9D,WAAWQ,IAAIuD,GAIvDjE,EAAaR,UAAYwE,EAAUxE,UACnCQ,EAAaP,SAAWuE,EAAUvE,SAClCO,EAAaN,WAAasE,EAAUtE,WACpCM,EAAaL,WAAaqE,EAAUrE,WAM7BK,MAoDLkE,EAAU,SAACpB,EAAShK,GAKxB,IAAM+H,EAAa/H,EAAEgI,cAAcC,QAAQC,KACvCC,EAAW6B,EAAQ1K,GAavByH,GAAQ,SAAAxG,GAIN,IAAM8G,EAAQ9G,EAAUwK,KAAKzD,WAAU,SAAC+D,GACtC,IAAI7D,GAAS,EAIb,OAHIC,OAAO4D,EAAI/L,MAAQmI,OAAOU,KAC5BX,GAAS,GAEJA,KAGT,KAAMH,GAAS,GAAI,OAAO,EAI1B,IAAMe,EAAQ,eAAQ7H,GAWtB,OAPA6H,EAAS1H,KAAO,WAChB0H,EAAS7B,UAAYc,EACrBe,EAAS5B,QAAUuB,EAKZK,MAaLkD,EAAYhD,uBAAY,SAACtI,GAE7B,IAAImI,EAAWnI,EAAEqC,OAAO/C,GACxBP,QAAQC,IAAI,aAAcmJ,GAM1B,IAAMI,EAAUC,EAAwBL,IF7L1B,SAAC7I,EAAImJ,GAInB,GAAKnJ,EAAL,CAEA,IAAMhB,EAAS,CACXW,OAAQ,MACRC,IAAKmF,EAAW,IAAM/E,EAAK,IAAMmJ,EACjCtJ,aAAa,EACbjB,iBAAiB,EACjBkB,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,KEuLbiN,CACapD,EAAU,KACpBhI,KAAKoI,GACLlI,MAAMsI,KACR,IAaGH,EAA0B,SAAClJ,GAM/B,OAAO,WAIL6D,IAAOY,QAAQ,gCAOfgD,GAAQ,SAAAyE,GAIN,IAAMC,EAAa,eACdD,GAMLC,EAAcV,KAAd,YAAyBU,EAAcV,MAIvC,IAAM1D,EAAQoE,EAAcV,KAAKzD,WAAU,SAAC+D,GAC1C,IAAI7D,GAAS,EAIb,OAHIC,OAAO4D,EAAI/L,MAAQmI,OAAOnI,KAC5BkI,GAAS,GAEJA,KAaT,OAPIH,GAAS,IACXoE,EAAcV,KAAKjC,OAAOzB,EAAO,GACjCoE,EAAcT,eAAiBS,EAAcV,KAAKnD,IAAIuD,IAKjDM,OAaP9C,EAAc,SAAChI,GAKnB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAIfd,IAAOC,QAAQa,IAeXkH,EAAgB,SAAClB,EAAM1F,GAC3B,OAAO,cAAC,EAAD,CAEL0F,KAAMA,EACNE,YAAaiB,EACbd,cAAegB,EACf/G,MAAOA,GAJF0F,EAAK3K,KAgBdsB,qBAAU,WAMR,GAJA7B,QAAQC,IAAI,aAIU,aAAlB8H,EAASpG,KAAqB,CAIhC,IAAMsI,EAAQ,2BAAQlC,EAASiE,KAAKjE,EAASP,YAA/B,IAA2C7F,KAAM,WAAYgL,OAAQ,KACnFjM,EAASqH,EAASN,QAAS,CAAE3G,MAAOmJ,QAER,kBAAlBlC,EAASpG,MAAgD,kBAAlBoG,EAASpG,KAG1DiL,EAAc7E,EAASJ,UAAWI,EAASH,SAAUG,EAASL,cAO9DmF,EAAQ9E,EAASJ,UAAWI,EAASH,YAEtC,CAACG,EAASpG,KAAMoG,EAASJ,UAAWI,EAASH,WAahD,IAAMiF,EAAU,SAACrH,EAAOC,IFtZV,SAACD,EAAOC,GAEpBzF,QAAQC,IAAI,kCACZ,IAAMV,EAAS,CACXW,OAAQ,MACRC,IAAKmF,EAAQ,qBAAiBE,EAAjB,qBAAmCC,GAChDrF,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GAAQ6B,KAAKsE,IE8Y1B8G,CACWhH,EAAOC,GACfrE,KAAKwC,GACLtC,MAAM+I,IAQLzG,EAAa,SAAClE,GAKlBwM,EAAkBxM,EAAKoE,OAWnBuG,EAAW,SAACzI,GAKhB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAKoN,OAAOzH,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAKoN,OAAO3H,GAAK,YAE/CD,GAAe,uBAIfd,IAAOC,QAAQa,IAsBX0H,EAAgB,SAACpH,EAAOC,EAAMiC,IFnZvB,SAAClC,EAAOC,EAAM6E,GAEzBtK,QAAQC,IAAI,kCACZ,IAAMV,EAAS,CACXW,OAAQ,MACRC,IAAKmF,EAAQ,4BAAwBE,EAAxB,qBAA0CC,EAA1C,uBAA6D6E,GAC1ElK,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GAAQ6B,KAAKsE,IE2Y1B8G,CACUhH,EAAOC,EAAMiC,GACpBtG,KAAKmJ,GACLjJ,MAAMkJ,IAQLD,EAAgB,SAAC7K,GAMrBwM,EAAkBxM,EAAKoE,OAenB0G,EAAc,SAAC5I,GAYnBwC,IAAOC,QAAQzC,IAQXmL,EAAa,SAAC9L,GAElBjB,QAAQC,IAAI,aAAcgB,GACrB8G,EAASL,aAYdM,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAW1B,OANA2G,EAAaxG,KAA8B,kBAAtBwG,EAAaxG,KAA4B,gBAAkB,gBAChFwG,EAAaR,UAAY,EAKlBQ,KA1BP/D,IAAOC,QAAQ,kCA0HnB,OACE,cAAC,IAAMtC,SAAP,UACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,0CAGJ,sBAAKA,UAAU,WAAf,UACE,8BAAG,wBAAQc,QAlhBA,SAAC7B,GAClBA,EAAEC,iBACFD,EAAEyJ,kBASF1C,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAS1B,OALA2G,EAAaZ,aAAgB/F,EAAU+F,YAKhCY,MA0f6BxG,KAAK,SAASK,UAAU,6BAArD,oCACD,wBAAQc,QAzMF,SAAC7B,GACfA,EAAEC,iBACFR,EAAS,cAuMyBiB,KAAK,SAASK,UAAU,6BAAlD,yBACA,wBAAQzB,GAAG,cAAcuC,QAlGf,SAAC7B,GAEnBjB,QAAQC,IAAI,cAAegB,GAS3B+G,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAU1B,OANA2G,EAAaxG,KAAO,YACpBwG,EAAaT,aAAe,GAKrBS,MAyE8CnG,UAAU,6BAA6BwB,KAAK,cAA3F,0BACA,wBAAQjD,GAAG,SAASuC,QAASiK,EAAY/K,UAAU,6BAA6BwB,KAAK,SAArF,oBACA,uBAAO7B,KAAK,OAAOpB,GAAG,eAAeoK,QAnoB3B,SAAC1J,GAIF,KACbA,EAAE2J,SAAsBmC,EAAW9L,IA8nB4BqD,SApnB3C,SAACrD,GAIzB,IAAMqC,EAASrC,EAAEqC,OAIXC,EAAQD,EAAOC,MAKfC,EAAOF,EAAOE,KAOpBwE,GAAQ,SAAAxG,GAIN,IAAMkC,EAAa,eACdlC,GAgBL,MATa,aAATgC,EACFE,EAAcsJ,aAAa5G,SAAW7C,EAEtCG,EAAcF,GAAQD,EAMjBG,MA2kBuFH,MAAOwE,EAASL,aAAclE,KAAK,eAAegB,MAAO,CAAEnC,MAAO,cAI5J,uBAAOL,UAAU,QAAjB,SAAyB,6BAAI,qBAAIK,MAAM,MAAV,UAC3B,cAAC,IAAD,CACEiC,SAnES,SAAA6E,GACnBnJ,QAAQC,IAAI,WAAYkJ,GACxBnB,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAS1B,OALA2G,EAAaR,UAAYwB,EAAO,EAKzBhB,MAqDC0C,QAAS9C,EAASJ,UAAY,EAC9BmD,MAAO/C,EAASF,WAChBkD,OAAQA,IACRnD,SAAUG,EAASH,WANM,aAU3B,yBAAQtD,SA/CO,SAACrD,GACxBjB,QAAQC,IAAI,mBAAoBgB,GAChC+G,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAU1B,OANA2G,EAAaP,SAAW3G,EAAEqC,OAAOC,MACjC4E,EAAaR,UAAY,EAKlBQ,MA+BmC5E,MAAOwE,EAASH,SAApD,UACE,wBAAQrE,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,0BAIHwE,EAASR,aAAeQ,EAASkE,wBChtBtCnM,EAAS,6CCwCAmN,MAnCf,SAAgBxM,GAGZ,IAAMyM,EAAazM,EAAM0M,QAezB,OACI,sBAAKnL,UAAU,OAAOwC,MAAO,CAAEnC,MAAO,SAAtC,UACI,qBAAKL,UAAU,eAAeI,IAAK8K,EAAWF,aAAa5G,SAAU7D,IAAK2K,EAAWF,aAAa5G,WAClG,sBAAKpE,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,SAA4BkL,EAAWrG,QACvC,mBAAG7E,UAAU,YAAb,SAA0BkL,EAAW7G,WACrC,mBAAGrE,UAAU,YAAb,SAA0BkL,EAAW5G,aAEzC,sBAAK9B,MAAO,CAAE+B,aAAc,WAAYC,QAAS,QAAjD,UACI,wBAAQ7E,KAAK,SAAS8E,YAAW,YAAcyG,EAAW3M,GAAIuC,QAdhD,SAAC7B,GACvBR,EAAM2M,eAAeF,EAAYjM,IAaiEe,UAAU,oCAApG,kBACA,wBAAQL,KAAK,SAASmB,QArBN,SAAC7B,GACzBR,EAAM4M,iBAAiBH,EAAYjM,IAoByBV,GAAI2M,EAAW3M,GAAIyB,UAAU,mCAAjF,2BC0rBDsL,MA3sBf,WAIE,IAAM5M,EAAWC,cAmBjB,EAA4BC,mBAAS,CACnCgI,QAAS,GACT2E,iBAAkB,GAClBhG,aAAa,EACb5F,KAAM,eACN6F,WAAY,EACZC,QAAS,eACTC,aAAc,GACdC,UAAW,EACXC,SAAU,GACVC,WAAY,EACZC,WAAY,IAXd,mBAAOC,EAAP,KAAiBC,EAAjB,KAyEMwF,EAAuB,SAACC,GAO5BzF,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAsB1B,OAlBA2G,EAAaS,QAAU6E,EAAapF,WAKpCF,EAAaoF,iBAAmBE,EAAapF,WAAWQ,IAAI6E,GAI5DvF,EAAaR,UAAY8F,EAAa9F,UACtCQ,EAAaP,SAAW6F,EAAa7F,SACrCO,EAAaN,WAAa4F,EAAa5F,WACvCM,EAAaL,WAAa2F,EAAa3F,WAMhCK,MAoDLwF,EAAa,SAACT,EAAYjM,GAK9B,IAAM+H,EAAa/H,EAAEgI,cAAcC,QAAQC,KAa3CnB,GAAQ,SAAAxG,GAIN,IAAM8G,EAAQ9G,EAAUoH,QAAQL,WAAU,SAACqF,GACzC,IAAInF,GAAS,EAIb,OAHIC,OAAOkF,EAAOrN,MAAQmI,OAAOwE,EAAW3M,MAC1CkI,GAAS,GAEJA,KAGT,KAAMH,GAAS,GAAI,OAAO,EAI1B,IAAMe,EAAQ,eAAQ7H,GAWtB,OAPA6H,EAAS1H,KAAO,cAChB0H,EAAS7B,UAAYc,EACrBe,EAAS5B,QAAUuB,EAKZK,MAkBLwE,EAAetE,uBAAY,SAACqE,EAAQ3M,GAExC,IAAImI,EAAWnI,EAAEqC,OAAO/C,GAOlBiJ,EAAUC,EAAwBL,IFzNzB,SAAC7I,GAEhB,GAAKA,IACDuN,MAAMvN,GAAV,CAEA,IAAMhB,EAAS,CACXW,OAAQ,SACRC,IAAKL,EAAS,IAAMS,EACpBH,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GAAQ6B,MAAK,SAAC3B,GAAe,MAAO,CAAEc,GAAIA,EAAId,SAAUA,QEqNrEsO,CACc3E,GACXhI,KAAKoI,GACLlI,MAAMsI,KACR,IAaGH,EAA0B,SAAClJ,GAM/B,OAAO,WAIL6D,IAAOY,QAAQ,gCAOfgD,GAAQ,SAAAgG,GAIN,IAAMC,EAAgB,eACjBD,GAMLC,EAAiBrF,QAAjB,YAA+BqF,EAAiBrF,SAIhD,IAAMN,EAAQ2F,EAAiBrF,QAAQL,WAAU,SAACqF,GAChD,IAAInF,GAAS,EAIb,OAHIC,OAAOkF,EAAOrN,MAAQmI,OAAOnI,KAC/BkI,GAAS,GAEJA,KAaT,OAPIH,GAAS,IACX2F,EAAiBrF,QAAQmB,OAAOzB,EAAO,GACvC2F,EAAiBV,iBAAmBU,EAAiBrF,QAAQC,IAAI6E,IAK5DO,OAaPrE,EAAc,SAAChI,GAKnB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAIfd,IAAOC,QAAQa,IAgBXwI,EAAmB,SAACQ,GACxB,OAAO,cAAC,EAAD,CAELf,QAASe,EACTd,eAAgBO,EAChBN,iBAAkBQ,GAHbK,EAAQ3N,KAcjBsB,qBAAU,WAQR,GANA7B,QAAQC,IAAI,aAMU,gBAAlB8H,EAASpG,KAAwB,CAInC,IAAMsI,EAAQ,2BAAQlC,EAASa,QAAQb,EAASP,YAAlC,IAA8C7F,KAAM,cAAewM,UAAW,KAC5FzN,EAASqH,EAASN,QAAS,CAAE3G,MAAOmJ,QAER,qBAAlBlC,EAASpG,MAAmD,qBAAlBoG,EAASpG,KAG7DyM,EAAiBrG,EAASJ,UAAWI,EAASH,SAAUG,EAASL,cAOjE2G,EAAWtG,EAASJ,UAAWI,EAASH,YAEzC,CAACG,EAASpG,KAAMoG,EAASJ,UAAWI,EAASH,WAUhD,IAAMyG,EAAa,SAAC7I,EAAOC,IFjZb,SAACD,EAAOC,GAEpB,IAAMlG,EAAS,CACXW,OAAQ,MACRC,IAAI,GAAD,OAAKL,EAAL,sBAAyB0F,EAAzB,qBAA2CC,GAC9CrF,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GAAQ6B,KAAKsE,IE0Y1BqI,CACWvI,EAAOC,GACfrE,KAAKwC,GACLtC,MAAM+I,IAQLzG,EAAa,SAAClE,GAKlB8N,EAAqB9N,EAAKoE,OAetBuG,EAAW,SAACzI,GAKhB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAKoN,OAAOzH,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAKoN,OAAO3H,GAAK,YAE/CD,GAAe,uBAIfd,IAAOC,QAAQa,IAsBXkJ,EAAmB,SAAC5I,EAAOC,EAAMiC,IF3X1B,SAAClC,EAAOC,EAAM6E,GAEzB,IAAM/K,EAAS,CACXW,OAAQ,MACRC,IAAI,GAAD,OAAKL,EAAL,6BAAgC0F,EAAhC,qBAAkDC,EAAlD,cAA4D6E,GAC/DlK,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GAAQ6B,KAAKsE,IEoX1BqI,CACUvI,EAAOC,EAAMiC,GACpBtG,KAAKmJ,GACLjJ,MAAMkJ,IAQLD,EAAgB,SAAC7K,GAMrB8N,EAAqB9N,EAAKoE,MAI1BM,IAAOY,QAAQ,sCAWXwF,EAAc,SAAC5I,GAKnB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAIfd,IAAOC,QAAQa,IA2IjB,OACE,cAAC,IAAMnD,SAAP,UACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,6CAGJ,sBAAKA,UAAU,cAAf,UACE,8BAAG,wBAAQc,QA7hBA,SAAC7B,GAClBA,EAAEC,iBACFD,EAAEyJ,kBASF1C,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAS1B,OALA2G,EAAaZ,aAAgB/F,EAAU+F,YAKhCY,MAqgB6BxG,KAAK,SAASK,UAAU,6BAArD,oCACD,wBAAQc,QA9MF,SAAC7B,GACfA,EAAEC,iBACFR,EAAS,iBA4MyBiB,KAAK,SAASK,UAAU,6BAAlD,4BAEA,wBAAQzB,GAAG,cAAcuC,QArGf,SAAC7B,GAEnBjB,QAAQC,IAAI,cAAegB,GAS3B+G,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAU1B,OANA2G,EAAaxG,KAAO,eACpBwG,EAAaT,aAAe,GAKrBS,MA4E8CnG,UAAU,6BAA6BwB,KAAK,cAA3F,0BACA,wBAAQjD,GAAG,SAASuC,QAhJR,SAAC7B,GAErBjB,QAAQC,IAAI,gBAAiBgB,GACxB8G,EAASL,aAYdM,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAW1B,OANA2G,EAAaxG,KAA8B,qBAAtBwG,EAAaxG,KAA+B,mBAAqB,mBACtFwG,EAAaR,UAAY,EAKlBQ,KA1BP/D,IAAOC,QAAQ,kCA4ImCrC,UAAU,6BAA6BwB,KAAK,SAAxF,oBACA,uBAAO7B,KAAK,OAAOpB,GAAG,eAAe+D,SAhoBrB,SAACrD,GAIzB,IAAMqC,EAASrC,EAAEqC,OAIXC,EAAQD,EAAOC,MAKfC,EAAOF,EAAOE,KAOpBwE,GAAQ,SAAAxG,GAIN,IAAMkC,EAAa,eACdlC,GAgBL,MATa,aAATgC,EACFE,EAAcsJ,aAAa5G,SAAW7C,EAEtCG,EAAcF,GAAQD,EAMjBG,MAulBiEH,MAAOwE,EAASL,aAAclE,KAAK,eAAegB,MAAO,CAAEnC,MAAO,cAItI,uBAAOL,UAAU,QAAjB,SAAyB,6BAAI,qBAAIK,MAAM,MAAV,UAC3B,cAAC,IAAD,CACEiC,SAtES,SAAA6E,GACnBnJ,QAAQC,IAAI,WAAYkJ,GACxBnB,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAS1B,OALA2G,EAAaR,UAAYwB,EAAO,EAKzBhB,MAwDC0C,QAAS9C,EAASJ,UAAY,EAC9BmD,MAAO/C,EAASF,WAChBkD,OAAQA,IACRnD,SAAUG,EAASH,WANM,aAU3B,yBAAQtD,SAlDO,SAACrD,GACxBjB,QAAQC,IAAI,mBAAoBgB,GAChC+G,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAY1B,OARA2G,EAAaP,SAAW3G,EAAEqC,OAAOC,MACjC4E,EAAaR,UAAY,EAOlBQ,MAgCmC5E,MAAOwE,EAASH,SAApD,UACE,wBAAQrE,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,0BAIHwE,EAASR,aAAeQ,EAASwF,0BCttBtCjI,EAAW,4C,yBCiSFgJ,MArRf,SAAe7N,GAIX,MAA0BG,oBAAS,GAAnC,mBAAOkF,EAAP,KAAcC,EAAd,KACA,EAA0BnF,mBAAS2N,KAAKC,MAAMD,KAAKE,UAAUhO,EAAMiO,WAAnE,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BhO,mBAAS2N,KAAKC,MAAMD,KAAKE,UAAUhO,EAAMiO,WAArE,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4BlO,mBAAS2N,KAAKC,MAAMD,KAAKE,UAAUhO,EAAMiO,WAArE,mBAAOK,EAAP,KAAeC,EAAf,KA6BMhJ,EAAS,SAAC/E,GACZgO,EAAWhO,GACX8E,GAAUD,IA0BRoJ,EAAgB,SAACzP,GACnBO,QAAQC,IAAIR,GACZ2E,IAAOY,QAAQ,iBACf4J,GAAS,WAAQ,OAAQL,KAAKC,MAAMD,KAAKE,UAAUM,OACnDD,GAAU,WAAQ,OAAQP,KAAKC,MAAMD,KAAKE,UAAUM,OACpDtO,EAAM0O,aAAcZ,KAAKC,MAAMD,KAAKE,UAAUM,IAAWtO,EAAM2O,YAC/DrJ,GAAUD,IAERuJ,EAAc,SAACzN,GACjB5B,QAAQC,IAAI2B,GACZwC,IAAOkL,MAAM,yCAA2C1N,IAOtDqN,EAAa,SAAChO,GAChBA,EAAEC,iBACF0N,GAAS,WAAQ,OAAQL,KAAKC,MAAMD,KAAKE,UAAUI,OACnDG,GAAU,WAAQ,OAAQT,KAAKC,MAAMD,KAAKE,UAAUI,QAelDU,EAAuB,SAACtO,GAC1BA,EAAEC,iBAIF,IAAMoC,EAASrC,EAAEqC,OAIXC,EAAQD,EAAOC,MAKfC,EAAOF,EAAOE,KAOpBwL,GAAU,SAACQ,GAIP,IAAIC,EAAQ,eAAQD,GAkBpB,MAba,cAAThM,EACAiM,EAASC,SAASC,UAAYpM,EACd,YAATC,EACPiM,EAASC,SAASE,QAAUrM,EACZ,YAATC,EACPiM,EAASC,SAASG,SAASC,QAAUvM,EACrB,YAATC,EACPiM,EAASC,SAASG,SAASE,QAAUxM,EAGrCkM,EAASjM,GAAQD,EAGdkM,MAOf,EAAwC7O,mBAAS,MAAjD,mBAAOoP,EAAP,KAAqBC,EAArB,KAqBA,OApBAjQ,QAAQC,IAAI,eAAgB+P,GAsBxB,eAAC,IAAMjO,SAAP,WACI,6BAAI,6BACA,sBAAKC,UAAU,OAAf,UACI,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,SAA4B2M,EAAMnL,OAClC,mBAAGxB,UAAU,YAAb,SAA0B2M,EAAMnD,cAChC,mBAAGxJ,UAAU,YAAb,SAA0B2M,EAAMrI,aAEpC,gCACI,wBAAQ3E,KAAK,SAASuO,aAAYzP,EAAM2O,WAAYtM,QAASkD,EAAQhE,UAAU,oCAA/E,kBACA,wBAAQ2E,MAAM,SAASuJ,aAAYzP,EAAM2O,WAAYtM,QA3FtD,SAAC7B,GAChBA,EAAEC,iBACFT,EAAM0P,kBAAkBlP,EAAEgI,cAAcC,QAAQ1D,QAyF0CxD,UAAU,iCAApF,iCAIZ,eAAC,IAAD,CAAO4E,OAAQd,EAAOE,OAAQA,EAA9B,UACI,cAAC,IAAD,CAAaA,OAAQA,EAArB,SAA6B,4BAAG,4BAAI+I,EAAOvL,WAC3C,cAAC,IAAD,UACI,qBAAKxB,UAAU,MAAf,SACI,wBAAOA,UAAU,QAAjB,UACI,6BAAI,+BACA,kDACA,uBAAOzB,GAAG,YAAY2P,aAAYzP,EAAM2O,WAAY5L,KAAK,YAAYxB,UAAU,oBAAoBuB,MAAOwL,EAAOW,SAASC,UAAWhO,KAAK,iBAAiB2C,SAAUiL,IACrK,uBAAOhP,GAAG,UAAU2P,aAAYzP,EAAM2O,WAAY5L,KAAK,UAAUxB,UAAU,oBAAoBuB,MAAOwL,EAAOW,SAASE,QAASjO,KAAK,iBAAiB2C,SAAUiL,SAGnK,6BAAI,qBAAIvN,UAAU,KAAd,kBAGA,uBAAOL,KAAK,OAAOpB,GAAIwO,EAAOxO,GAAK,OAAQiD,KAAK,OAAO0M,aAAYzP,EAAM2O,WAAY7L,MAAOwL,EAAOvL,KAAMxB,UAAU,eAAesC,SAAUiL,SAEhJ,6BAAI,qBAAIvN,UAAU,KAAd,kBAGA,uBAAOL,KAAK,OAAOpB,GAAIwO,EAAOxO,GAAK,WAAYiD,KAAK,WAAW0M,aAAYzP,EAAM2O,WAAY7L,MAAOwL,EAAO1I,SAAUrE,UAAU,eAAesC,SAAUiL,SAG5J,6BAAI,qBAAIvN,UAAU,KAAd,wBAGA,uBAAOL,KAAK,OAAOpB,GAAIwO,EAAOxO,GAAK,cAAeiD,KAAK,cAAc0M,aAAYzP,EAAM2O,WAAY7L,MAAOwL,EAAOvD,YAAaxJ,UAAU,eAAesC,SAAUiL,SAErK,6BAAI,qBAAIvN,UAAU,KAAd,oBAGA,uBAAOL,KAAK,OAAOpB,GAAIwO,EAAOxO,GAAK,UAAWiD,KAAK,UAAU0M,aAAYzP,EAAM2O,WAAY7L,MAAOwL,EAAOzI,QAAStE,UAAU,eAAesC,SAAUiL,SAEzJ,6BAAI,qBAAIvN,UAAU,KAAd,iBAIA,uBAAOL,KAAK,OAAOpB,GAAIwO,EAAOxO,GAAK,OAAQiD,KAAK,OAAO0M,aAAYzP,EAAM2O,WAAY7L,MAAOwL,EAAOhI,KAAM/E,UAAU,eAAesC,SAAUiL,SAEhJ,6BAAI,qBAAIvN,UAAU,KAAd,mBAGA,yBAAQzB,GAAIwO,EAAOxO,GAAK,WAAYiD,KAAK,WAAWD,MAAOwL,EAAO5H,SAAU+I,aAAYzP,EAAM2O,WAAY9K,SAAUiL,EAAsBvN,UAAU,cAApJ,UACI,wBAAQuB,MAAM,GAAd,6BACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,SAAd,uBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,UAAd,6BAKR,6BAAI,qBAAIvB,UAAU,KAAd,oBAIA,cAAC,IAAD,CACIoO,OA1FjB,SAACJ,GACZhQ,QAAQC,IAAI,iBAAkB+P,GAE9BC,EAAgBD,IAwFYK,eArFT,WAMnBrQ,QAAQC,IAAI,kBA6EY,SAII,uBAAO0B,KAAK,OAAOpB,GAAIwO,EAAOxO,GAAK,UAAWiD,KAAK,UAAU0M,aAAYzP,EAAM2O,WAAY7L,MAAOwL,EAAOW,SAASG,SAASC,QAAS9N,UAAU,eAAesO,OAAQf,EAAsBjL,SAAUiL,WAI7M,6BAAI,qBAAIvN,UAAU,KAAd,qBAEA,uBAAOL,KAAK,OAAOpB,GAAIwO,EAAOxO,GAAK,UAAWiD,KAAK,UAAU0M,aAAYzP,EAAM2O,WAAY7L,MAAOwL,EAAOW,SAASG,SAASE,QAAS/N,UAAU,eAAesC,SAAUiL,gBASvL,eAAC,IAAD,WACI,cAAC,IAAD,CAAQ5I,MAAM,OAAOpG,GAAG,SAASiD,KAAK,SAASxB,UAAU,cAAckO,aAAYzP,EAAM2O,WAAYtM,QAxN1F,SAAC7B,GAGxB,OAFAA,EAAEC,iBAEG6N,EAAOvL,KAAK6B,OAAS,GAAO0J,EAAOvL,KAAK6B,OAAS,IAClDjB,IAAOC,QAAQ,4DACR,GAGN0K,EAAO1I,SAAShB,OAAS,GAAO0J,EAAO1I,SAAShB,OAAS,IAC1DjB,IAAOC,QAAQ,iEACR,QDDJ,SAAC9D,EAAIoE,GAIhB,GAFA3E,QAAQC,IAAI,4BAA8BqF,EAAW,IAAM/E,GAEtDA,EAAL,CAEA,IAAMhB,EAAS,CACXW,OAAQ,MACRC,IAAKmF,EAAW,IAAM/E,EACtBb,KAAMiF,EACNvE,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,ICTTgR,CACYxB,EAAOxO,IAhDQmO,EAgDkBK,EA/CtC,CACH,GAAML,EAAQnO,GACd,SAAY,CACR,UAAamO,EAAQgB,SAASC,UAC9B,QAAWjB,EAAQgB,SAASE,QAC5B,SAAY,CACR,SAAYlB,EAAQgB,SAASG,SAASW,SACtC,UAAa9B,EAAQgB,SAASG,SAASW,SACvC,QAAW9B,EAAQgB,SAASG,SAASE,QACrC,QAAWrB,EAAQgB,SAASG,SAASC,UAG7C,KAAQpB,EAAQlL,KAChB,SAAYkL,EAAQrI,SACpB,YAAeqI,EAAQlD,YACvB,QAAWkD,EAAQpI,QACnB,KAAQoI,EAAQ3H,KAChB,SAAY2H,EAAQvH,YA+BnB/F,KAAK8N,GACL5N,MAAM+N,GAlDe,IAACX,GA0Pf,kBAEU,IACV,cAAC,IAAD,CAAQ/H,MAAM,YAAY3E,UAAU,WAAWc,QAASkD,EAAxD,8B,gBC7PdyK,EAAiB,CACrBpO,MAAO,OACPC,OAAQ,SA+vBKoO,MA3vBf,WAMEC,IAAQC,UAAU,2CAIlBD,IAAQE,YAAY,MAKpB,MAAsBjQ,mBAAS,CAC7BkQ,KAAM,MACNC,KAAM,OACNC,gBAAiB,GACjBC,mBAAmB,EACnBC,KAAM,KALR,mBAAOC,EAAP,KAAYC,EAAZ,KAOApR,QAAQC,IAAIkR,GAKZ,IAsBA,EAA0BvQ,oBAAS,GAAnC,mBAAOkF,EAAP,KAAcC,EAAd,KAIA,EAAgCnF,mBAAS,CACvC,SAAY,CACV,UAAa,GACb,QAAW,GACX,SAAY,CACV,SAAY,EACZ,UAAa,EACb,QAAW,GACX,QAAW,KAGf,KAAQ,GACR,SAAY,GACZ,YAAe,GACf,QAAW,GACX,KAAQ,GACR,SAAY,WAhBd,mBAAO6O,EAAP,KAAiB4B,EAAjB,KAkBArR,QAAQC,IAAI,WAAYwP,GAQxB,IAUM6B,EAAqB,WACzBD,GAAY,WACV,MAAO,CACL,SAAY,CACV,UAAa,GACb,QAAW,GACX,SAAY,CACV,SAAY,EACZ,UAAa,EACb,QAAW,GACX,QAAW,KAGf,KAAQ,GACR,SAAY,GACZ,YAAe,GACf,QAAW,GACX,KAAQ,GACR,SAAY,cAYlB,EAA4BzQ,mBAAS,CACnC2Q,OAAQ,GACRC,gBAAiB,GACjBC,WAAY,IACZ9P,KAAM,cACN+P,cAAe,EACf/J,UAAW,EACXC,SAAU,EACVC,WAAY,EACZC,WAAY,IATd,mBAAOC,EAAP,KAAiBC,EAAjB,KAWAhI,QAAQC,IAAI8H,GAIZ,IAAM4J,EAAc,SAAC1Q,GACnBA,EAAEC,iBACF6E,GAAUD,IA4CN8L,EAAgB,SAACnS,GACrBO,QAAQC,IAAI,gBAAiBR,GAC7B2E,IAAOY,QAAQ,gCACf6M,IACAP,IACAvL,GAAUD,IAGNgM,EAAc,SAAClQ,GACnB5B,QAAQC,IAAI,WAAY2B,GACxB0P,IACAlN,IAAOkL,MAAM,wBAOTuC,EAAa,YFhML,SAACrM,EAAOC,GAEpBzF,QAAQC,IAAI,mCACZ,IAAMV,EAAS,CACXW,OAAQ,MACRC,IAAKmF,EAAQ,0BAAsBE,EAAtB,qBAAwCC,GACrDrF,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,IEwLbgR,CACWxI,EAASJ,UAAWI,EAASH,UACrCxG,KAAKwC,GACLtC,MAAM+I,IAGLzG,EAAa,SAACnE,GAClBO,QAAQC,IAAI,aAAcR,GAE1BuI,GAAQ,SAACxG,GAEP,IAAIuQ,EAAO,eAAQvQ,GAQnB,OANAuQ,EAAQR,OAAS9R,EAASC,KAAKoE,KAAKuE,WACpC0J,EAAQP,gBAAkBO,EAAQR,OAAO1I,IAAImJ,GAC7CD,EAAQpK,UAAYlI,EAASC,KAAKoE,KAAK6D,UACvCoK,EAAQnK,SAAWnI,EAASC,KAAKoE,KAAK8D,SACtCmK,EAAQlK,WAAapI,EAASC,KAAKoE,KAAK+D,WACxCkK,EAAQjK,WAAarI,EAASC,KAAKoE,KAAKgE,WACjCiK,MAIL1H,EAAW,SAACzI,GAChB5B,QAAQC,IAAI,WAAY2B,GACxBwC,IAAOkL,MAAM1N,IAOTuO,EAAoB,SAAC3K,GACzBwC,GAAQ,SAACiK,GACP,IAAIC,EAAM,eAAQD,GAGlB,OAFAC,EAAOR,cAAgBlM,EACvB0M,EAAOjB,mBAAoB,EACpBiB,KAETC,EAAU,MAONH,EAAiB,SAACrD,EAAOnJ,GAG7BmL,IAAQyB,YAAYzD,EAAMe,SAASG,SAASC,QAAU,KAAOnB,EAAMe,SAASG,SAASE,SAClF3O,MACC,SAAC3B,GACC,MAAqBA,EAAS4S,QAAQ,GAAGC,SAASzC,SAA1CiB,EAAR,EAAQA,IAAKC,EAAb,EAAaA,IACb/Q,QAAQC,IAAI6Q,EAAKC,GACjBwB,EAAazB,EAAKC,MAEpB,SAACzB,GACCtP,QAAQsP,MAAMA,MAEhBhO,OAAM,SAAAM,GACN5B,QAAQC,IAAI2B,MAGhB,IAAI4Q,EAAK,eAAQ7D,GACjB,OAAO,cAAC,EAAD,CAAOwB,kBAAmBA,EAC/Bf,WAAY5J,EAEZkJ,QAAS8D,EACTrD,aAAcsD,EACdC,gBAAiBrP,GAHZmP,EAAMjS,KAOTgS,EAAe,SAACzB,EAAKC,GACzBK,GAAO,SAACuB,GACN,IAAIT,EAAS3D,KAAKC,MAAMD,KAAKE,UAAUkE,IAGvC,OAFAT,EAAOlB,gBAAgB4B,KAAvB,mCAAwD9B,EAAxD,kBAAqEC,EAArE,WACAmB,EAAOhB,KAAK0B,KAAK,CAAE9B,IAAKA,EAAKC,IAAKA,IAC3BmB,MA2BLO,EAAa,SAACI,EAAcrN,GAChCxF,QAAQC,IAAI,aAAcuF,EAAOqN,GAEjC7K,GAAQ,SAACiK,GAEP,IAAIC,EAAM,eAAQD,GACdxC,EAAQ,eAAQwC,EAASV,OAAO/L,IAChCsN,EAAU,eAAQb,EAASV,OAAO/L,GAAOkK,SAASG,UAClDkD,EAAO,eAAQd,EAASV,OAAO/L,GAAOkK,UAU1C,OARAD,EAAWoD,EACXC,EAAaD,EAAanD,SAASG,SACnCkD,EAAUF,EAAanD,SAEvBwC,EAAOX,OAAO/L,GAASiK,EACvByC,EAAOX,OAAO/L,GAAOkK,SAAWqD,EAChCb,EAAOX,OAAO/L,GAAOkK,SAASG,SAAWiD,EAElCZ,MASL7O,EAAoB,SAACpC,GAMzB,IAAMqC,EAASrC,EAAEqC,OAIXC,EAAQD,EAAOC,MAKfC,EAAOF,EAAOE,KAOpB6N,GAAY,SAAC2B,GAIX,IAAIC,EACF1E,KAAKC,MAAMD,KAAKE,UAAUuE,IAkB5B,MAZa,cAATxP,EACFyP,EAAcvD,SAASC,UAAYpM,EACjB,YAATC,EACTyP,EAAcvD,SAASE,QAAUrM,EACf,YAATC,EACTyP,EAAcvD,SAASG,SAASC,QAAUvM,EACxB,YAATC,EACTyP,EAAcvD,SAASG,SAASE,QAAUxM,EAG1C0P,EAAczP,GAAQD,EAEjB0P,MAOLd,EAAY,SAAAe,GAEI,IAAhBxK,OAAOwK,IAAYC,IACnBpL,EAAS0J,aAAeyB,GAAKlL,GAAQ,SAACxG,GACxC,IAAI0Q,EAAM,eAAQ1Q,GAElB,OADA0Q,EAAOT,WAAayB,EACbhB,MA+BLiB,EAAe,WAGfpL,EAASwJ,OAAOlM,OAAS,GAG3BsL,IAAQyB,YAAYrK,EAASwJ,OAAOxJ,EAAS2J,eAAehC,SAASG,SAASC,QAAU,KAAO/H,EAASwJ,OAAOxJ,EAAS2J,eAAehC,SAASG,SAASE,SAAS3O,MAChK,SAAC3B,GACC,MAAqBA,EAAS4S,QAAQ,GAAGC,SAASzC,SAA1CiB,EAAR,EAAQA,IAAKC,EAAb,EAAaA,IACb/Q,QAAQC,IAAI6Q,EAAKC,GAlZJ,SAACD,EAAKC,GACzBK,GAAO,WACL,MAAO,CAAE,IAAON,EAAK,IAAOC,EAAKC,gBAAiBG,EAAIH,gBAAiBC,kBAAmBE,EAAIF,kBAAmBC,KAAMC,EAAID,SAiZvHkC,CAAatC,EAAKC,MAEpB,SAACzB,GACCtP,QAAQsP,MAAMA,OAQtBzN,qBAAU,WAERgQ,MASC,CAAC9J,EAASJ,UAAWI,EAAS2J,cAAe3J,EAAS0J,aAKzD,MAAwC7Q,mBAAS,MAAjD,mBAAOoP,EAAP,KAAqBC,EAArB,KA6BA,OA5BAjQ,QAAQC,IAAI,eAAgB+P,GA6B1B,eAAC,IAAMjO,SAAP,WAEE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UAIE,eAAC,IAAD,CAAKqR,MAAI,EAAT,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACErR,UAAWsR,IAAW,CACpBC,OAC0B,MAAxBxL,EAAS0J,aAEb3O,QAAS,WAAQqP,EAAU,MAL7B,qBAUF,cAAC,IAAD,UACE,cAAC,IAAD,CACEnQ,UAAWsR,IAAW,CACpBC,OAC0B,MAAxBxL,EAAS0J,aAEb3O,QAAS,WAAQqP,EAAU,MAL7B,iCAWJ,eAAC,IAAD,CAAYqB,UAAWzL,EAAS0J,WAAYzP,UAAU,QAAtD,UACE,cAAC,IAAD,CAASyR,MAAM,IAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKC,GAAG,KAAR,SACE,qBAAK1R,UAAU,GAAf,SACE,sBAAKA,UAAU,OAAf,UACE,oBAAIA,UAAU,kBAAkBzB,GAAG,cAAnC,SAAmDwH,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAelO,KAAO,KAChI,qBAAKgB,MAAO,CAAElC,OAAQ,QAASqR,UAAW,WAAapT,GAAG,eAAeyB,UAAU,WAAWI,IAAM2F,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAerL,SAAW,GAAI9D,IAAI,KAC7L,4BACE,qBAAKP,UAAU,MAAf,SACE,sBAAKA,UAAU,SAAf,UACE,oBAAIA,UAAU,uBAAd,sBACA,kCAAO,+BAAI,oBAAIA,UAAU,UAAd,SACT,mBAAGA,UAAU,oBAAoBzB,GAAG,iBAApC,SAAuDwH,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAehC,SAASG,SAASC,QAAU,OACtJ,6BACD,mBAAG9N,UAAU,iBAAiBzB,GAAG,mBAAjC,SAAoD,gCAAO,+BAAI,oBAAIyB,UAAU,KAAKwC,MAAO,CAAEnC,MAAO,QAAnC,mBAAuD,mCAAO0F,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAehC,SAASC,UAAUiE,UAAU,EAAG,GAAK,kBAE1O,+BAAI,oBAAI5R,UAAU,UAAd,SACF,mBAAGA,UAAU,oBAAoBzB,GAAG,iBAApC,SAAuDwH,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAehC,SAASG,SAASE,QAAU,OAEzJ,6BACE,mBAAG/N,UAAU,iBAAiBzB,GAAG,kBAAjC,SAAmD,gCAAO,+BAAI,oBAAIyB,UAAU,KAAKwC,MAAO,CAAEnC,MAAO,QAAnC,iBAAqD,mCAAO0F,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAehC,SAASE,QAAQgE,UAAU,EAAG,GAAK,4BAM/O,oBAAG5R,UAAU,gBAAgBzB,GAAG,GAAhC,UAAmC,mBAAGyB,UAAU,KAAb,qBAAnC,IAAmE+F,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAepL,QAAU,MACnJ,oBAAGtE,UAAU,gBAAgBzB,GAAG,qBAAhC,UAAqD,mBAAGyB,UAAU,KAAb,yBACjD+F,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAelG,YAAc,iBAWlG,cAAC,IAAD,CAASiI,MAAM,IAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKC,GAAG,KAAR,SACE,qBAAK1R,UAAU,GAAf,SACE,sBAAKA,UAAU,OAAf,UAEE,oBAAIA,UAAU,kBAAkBzB,GAAG,cAAnC,SAAmDwH,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAelO,KAAO,KAChI,cAAC,IAAD,CACEqQ,iBAAiB,0CACjBC,UAAW,CAAC,UAFd,SAGE,eAAC,IAAD,CACEtP,MAAO,CAAEnC,MAAO,QAChB0R,kBAAmBtD,EACnBuD,OAAQ7C,EACR8C,KAAM9C,EAAIF,kBAAoB,EAAI,GAJpC,UAUE,6BAGA,cAAC,IAAD,CACEiD,SAAU/C,IAEZ,cAAC,IAAD,CACE+C,SAAU/C,EAAIF,mBAAqBE,EAAID,KAAK7L,OAAS,EAAI8L,EAAID,KAAK,GAAa,OAEjF,cAAC,IAAD,CACEgD,SAAU/C,EAAIF,mBAAqBE,EAAID,KAAK7L,OAAS,EAAI8L,EAAID,KAAK,GAAa,OAEjF,cAAC,IAAD,CACEgD,SAAU/C,EAAIF,mBAAqBE,EAAID,KAAK7L,OAAS,EAAI8L,EAAID,KAAK,GAAa,OAEjF,cAAC,IAAD,CACEgD,SAAU/C,EAAIF,mBAAqBE,EAAID,KAAK7L,OAAS,EAAI8L,EAAID,KAAK,GAAa,OAEjF,cAAC,IAAD,CACEgD,SAAU/C,EAAIF,mBAAqBE,EAAID,KAAK7L,OAAS,EAAI8L,EAAID,KAAK,GAAa,OAEjF,cAAC,IAAD,CACEgD,SAAU/C,EAAIF,mBAAqBE,EAAID,KAAK7L,OAAS,EAAI8L,EAAID,KAAK,GAAa,OAEjF,cAAC,IAAD,CACEgD,SAAU/C,EAAIF,mBAAqBE,EAAID,KAAK7L,OAAS,EAAI8L,EAAID,KAAK,GAAa,OAEjF,cAAC,IAAD,CACEgD,SAAU/C,EAAIF,mBAAqBE,EAAID,KAAK7L,OAAS,EAAI8L,EAAID,KAAK,GAAa,OAEjF,cAAC,IAAD,CACEgD,SAAU/C,EAAIF,mBAAqBE,EAAID,KAAK7L,OAAS,EAAI8L,EAAID,KAAK,GAAa,YAKrF,4BACE,qBAAKlP,UAAU,MAAf,SACE,sBAAKA,UAAU,SAAf,UACE,oBAAIA,UAAU,uBAAd,sBACA,kCAAO,+BAAI,oBAAIA,UAAU,UAAd,SACT,mBAAGA,UAAU,oBAAoBzB,GAAG,iBAApC,SAAuDwH,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAehC,SAASG,SAASC,QAAU,OACtJ,6BACD,mBAAG9N,UAAU,iBAAiBzB,GAAG,mBAAjC,SAAoD,gCAAO,+BAAI,oBAAIyB,UAAU,KAAKwC,MAAO,CAAEnC,MAAO,QAAnC,mBAAuD,mCAAO0F,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAehC,SAASC,UAAUiE,UAAU,EAAG,GAAK,kBAE1O,+BAAI,oBAAI5R,UAAU,UAAd,SACF,mBAAGA,UAAU,oBAAoBzB,GAAG,iBAApC,SAAuDwH,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAehC,SAASG,SAASE,QAAU,OAEzJ,6BACE,mBAAG/N,UAAU,iBAAiBzB,GAAG,kBAAjC,SAAmD,gCAAO,+BAAI,oBAAIyB,UAAU,KAAKwC,MAAO,CAAEnC,MAAO,QAAnC,iBAAqD,mCAAO0F,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAehC,SAASE,QAAQgE,UAAU,EAAG,GAAK,4BAM/O,oBAAG5R,UAAU,gBAAgBzB,GAAG,GAAhC,UAAmC,mBAAGyB,UAAU,KAAb,qBAAnC,IAAmE+F,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAepL,QAAU,MACnJ,oBAAGtE,UAAU,gBAAgBzB,GAAG,qBAAhC,UAAqD,mBAAGyB,UAAU,KAAb,yBACjD+F,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASwJ,OAAOxJ,EAAS2J,eAAelG,YAAc,oBAWpG,qBAAKxJ,UAAU,QAAf,SACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,0BAA0BwC,MAAO,CAAE2P,UAAW,SAA7D,UACE,gCACE,qBAAKlS,aAAW,0BAAhB,SACE,cAAC,IAAD,CACEqC,SAhQC,SAAA6E,GACnBnJ,QAAQC,IAAI,WAAYkJ,GAExBgJ,EAAU,KAEVnK,GAAQ,SAACxG,GAIP,IAAM2G,EAAY,eAAQ3G,GAS1B,OALA2G,EAAaR,UAAYwB,EAAO,EAChChB,EAAauJ,cAAgB,EAItBvJ,MA+OS0C,QAAS9C,EAASJ,UAAY,EAC9BmD,MAAO/C,EAASF,WAChBkD,OAAQA,IACRnD,SAAUG,EAASH,eAKzB,cAAC,IAAD,CAAQjB,MAAM,UAAU7D,QAAS6O,EAAa3P,UAAU,MAAxD,uBACA,cAAC,IAAD,CAAQ2E,MAAM,YAAY7D,QA3gBZ,SAAC7B,GAC3BA,EAAEC,iBACkC,IAAhCwH,OAAOX,EAAS0J,aAAmBU,EAAU,KACjDf,GAAO,SAACuB,GACN,IAAIT,EAAS3D,KAAKC,MAAMD,KAAKE,UAAUkE,IAQvC,OAPAT,EAAOjB,mBAAsBiB,EAAOjB,kBAO7BiB,MA+f2DlQ,UAA4C,IAAhC0G,OAAOX,EAAS0J,YAAqB,MAAQ,SAAjH,SAA4HN,EAAIF,kBAAoB,wBAA0B,oBAC9K,uBAAOjP,UAAU,sBAAsBzB,GAAG,cAA1C,SAEIwH,EAASwJ,OAAOlM,OAAS,EAAK0C,EAASyJ,gBAAkB,iCAgBvE,eAAC,IAAD,CAAO5K,OAAQd,EAAOE,OAAQ2L,EAA9B,UACE,cAAC,IAAD,CAAa3L,OAAQ2L,EAArB,SAAkC,4BAAG,gDACrC,cAAC,IAAD,UACE,qBAAK3P,UAAU,MAAf,SACE,wBAAOA,UAAU,QAAjB,UACE,6BAAI,+BACF,kDACA,uBAAOzB,GAAG,gBAAgBiD,KAAK,YAAYxB,UAAU,oBAAoBL,KAAK,iBAAiB2C,SAAUjB,IACzG,uBAAO9C,GAAG,cAAciD,KAAK,UAAUxB,UAAU,oBAAoBL,KAAK,iBAAiB2C,SAAUjB,SAGvG,6BAAI,qBAAIrB,UAAU,KAAd,kBAGF,uBAAOL,KAAK,OAAOpB,GAAG,WAAWiD,KAAK,OAAOxB,UAAU,eAAesC,SAAUjB,SAElF,6BAAI,qBAAIrB,UAAU,KAAd,kBAGF,uBAAOL,KAAK,OAAOpB,GAAG,WAAWiD,KAAK,WAAWxB,UAAU,eAAesC,SAAUjB,SAEtF,6BAAI,qBAAIrB,UAAU,KAAd,wBAGF,uBAAOL,KAAK,OAAOpB,GAAG,kBAAkBiD,KAAK,cAAcxB,UAAU,eAAesC,SAAUjB,SAEhG,6BAAI,qBAAIrB,UAAU,KAAd,oBAGF,uBAAOL,KAAK,OAAOpB,GAAG,cAAciD,KAAK,UAAUxB,UAAU,eAAesC,SAAUjB,SAExF,6BAAI,qBAAIrB,UAAU,KAAd,iBAGF,uBAAOL,KAAK,OAAOpB,GAAG,WAAWiD,KAAK,OAAOxB,UAAU,eAAesC,SAAUjB,SAElF,6BAAI,qBAAIrB,UAAU,KAAd,mBAGF,yBAAQzB,GAAG,eAAeiD,KAAK,WAAWc,SAAUjB,EAAmBrB,UAAU,cAAjF,UACE,wBAAQuB,MAAM,GAAd,6BACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,SAAd,uBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,UAAd,6BAGJ,6BAAI,qBAAIvB,UAAU,KAAd,oBAGF,cAAC,IAAD,CACEoO,OAhRD,SAACJ,GACdhQ,QAAQC,IAAI,iBAAkB+P,GAE9BC,EAAgBD,IA8QFK,eA3QO,WAMrBrQ,QAAQC,IAAI,kBAmQA,SAIE,uBAAO0B,KAAK,OAAOpB,GAAG,cAAciD,KAAK,UAAUxB,UAAU,eAAesO,OAAQjN,EAAmBiB,SAAUjB,WAIrH,6BAAI,qBAAIrB,UAAU,KAAd,qBAEF,uBAAOL,KAAK,OAAOpB,GAAG,cAAciD,KAAK,UAAUxB,UAAU,eAAesC,SAAUjB,gBAM9F,eAAC,IAAD,WACE,cAAC,IAAD,CAAQsD,MAAM,OAAOpG,GAAG,SAASiD,KAAK,SAASxB,UAAU,cAAcc,QA5kB3D,SAAC7B,GAInB,OAHAA,EAAEC,iBACFlB,QAAQC,IAAI,cAAegB,GAEtBwO,EAASjM,KAAK6B,OAAS,GAAOoK,EAASjM,KAAK6B,OAAS,IACxDjB,IAAOC,QAAQ,4DACR,GAGJoL,EAASpJ,SAAShB,OAAS,GAAOoK,EAASpJ,SAAShB,OAAS,IAChEjB,IAAOC,QAAQ,iEACR,QFvJD,SAACM,GAET3E,QAAQC,IAAI,iCACZ,IAAMV,EAAS,CACXW,OAAQ,OACRC,IAAKmF,EACL5F,KAAMiF,EACNvE,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GEgJbgR,CACOd,GACJrO,KAAKwQ,GACLtQ,MAAMwQ,IA2jBH,oBAEU,IACV,cAAC,IAAD,CAAQnL,MAAM,YAAY3E,UAAU,WAAWc,QAhqBjC,SAAC7B,GACrB0Q,EAAY1Q,GACZqQ,KA8pBM,8BCvQK8C,MA3ff,WAIE,IAAM1T,EAAWC,cAMTG,EAAUuT,cAAVvT,MAKAwT,EAAaC,cAAbD,SASR,EAA4B1T,mBAAS,CACnC,IAAO,GACP,QAAW,GACX,SAAY,GACZ,OAAU,CACR,CACE,GAAM,EACN,KAAQ,KAGZ,aAAgB,CACd,GAAM,EACN,SAAY,EACZ,YAAe,EACf,SAAY,IAEd,GAAM8H,OAAQ4L,GAAuB,GACrC,WAAc,GACd,MAAS,GACT,iBAAoB,GACpB,QAAW,GACX,UAAa,EACb,WAAc,EACd,KAAQ,GACR,aAAgB,EAChB,SAAY,GACZ,YAAe,GACf,aAAgB,GAChB,aAAgB,GAChB,KAAQ,EACR,KAAQ,GACR,UAAa,KA/Bf,mBAAOE,EAAP,KAAeC,EAAf,KAyCMC,EAAsB,SAACC,GAO3BF,GAAU,SAACG,GAIO,eAAQA,GAUxB,OALeD,MAiBbtR,EAAoB,SAACpC,GAIzB,IAAMqC,EAASrC,EAAEqC,OAIXC,EAAQD,EAAOC,MAOfC,EAAOF,EAAOE,KACpBxD,QAAQC,IAAIuD,EAAMD,GAMlBkR,GAAU,SAAAG,GAIR,IAAMlR,EAAa,eACdkR,GAgBL,MATa,aAATpR,EACFE,EAAcsJ,aAAa5G,SAAW7C,EAEtCG,EAAcF,GAAQD,EAMjBG,MAaLmR,EAAY,SAACC,EAAYC,GAKzBA,EACFL,EAAoBK,GNjKV,SAACxU,GAEb,IAAMhB,EAAS,CACXW,OAAQ,MACRC,IAAKL,EAAS,IAAMS,EACpBH,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GAAQ6B,KAAKsE,GM+JxBqI,CACW+G,EAAWvU,IACnBa,KAAKwC,GACLtC,MAAM+I,IAUPzG,EAAa,SAACnE,GAMlB,IAAIkV,EAAY,2BAAQlV,EAASqE,MAAjB,IAAuBnC,KAAM,cAAewM,UAAW,KAIvEuG,EAAoBC,GAKpBvQ,IAAOY,QAAQ,2BASXqF,EAAW,SAACzI,GAKhB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAKfd,IAAOC,QAAQa,IAyEX8P,EAAc,SAACvV,GAKnBO,QAAQC,IAAI,cAAeR,GAK3B2E,IAAOY,QAAQ,kCASXiQ,EAAY,SAACrT,GAKjB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAKfd,IAAOC,QAAQa,IA+BXgQ,EAAgB,SAACzV,GAOrB2E,IAAOY,QAAQ,2EAOfyP,GAAU,SAAAG,GAIR,IAAMlR,EAAa,eACdkR,GAYL,OANAlR,EAAcnD,GAAKd,EAASC,KAAKoE,KACjCJ,EAAc/B,KAAO,aACrB+B,EAAcyK,UAAY,YAAc1O,EAASC,KAAKoE,KAI/CJ,MAULyR,EAAc,SAACvT,GAKnB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAKfd,IAAOC,QAAQa,IA2DjB,OAnDArD,qBAAU,WAOR,GAAoB,eAAhB2S,EAAO7S,KAAuB,CAKhC,IAAMsI,EAAQ,2BAAQuK,GAAR,IAAgB7S,KAAM,cAAewM,UAAW,KAM9DzN,EAAS8T,EAAOrG,UAAW,CAAErN,MAAOmJ,SAQhCuK,EAAOjU,IAAIsU,EAAUL,EAAQ1T,KAGlC,CAAC0T,EAAO7S,OAuBT,cAAC,IAAMI,SAAP,UAEE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,6BAAKwS,EAAOjU,GAAK,cAAgB,mBAIrC,uBAAMiD,KAAK,mBAAmBxB,UAAU,uEAAxC,UACE,8BAAG,wBAAQc,QA1BC,SAAC7B,GAKnBA,EAAEC,iBAIFR,EAAS,aAiB8BiB,KAAK,SAASK,UAAU,6BAAtD,qBACD,wBAAQc,QAAS0R,EAAOjU,GAxNnB,SAACU,GAKdjB,QAAQC,IAAI,SAAUgB,GAEjBuT,EAAO3N,MN5LD,SAACtG,EAAIoE,GAEhB,GAAKpE,EAAL,CAEA,IAAMhB,EAAS,CACXW,OAAQ,MACRC,IAAKL,EAAS,IAAMS,EACpBb,KAAMiF,EACNvE,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GAAQ6B,KAAKsE,IM0L1BqI,CACUyG,EAAOjU,GArDV,CACL,GAAMiU,EAAOjU,GACb,MAASiU,EAAO3N,MAChB,IAAO2N,EAAOY,IACd,QAAWZ,EAAOlO,QAClB,SAAYkO,EAAOnO,SACnB,KAAQmO,EAAOzN,KACf,SAAYyN,EAAOrN,SACnB,aAAgBqN,EAAOxH,aAAa5G,WA8CnChF,KAAK4T,GACL1T,MAAM2T,GAVP7Q,IAAOC,QAAQ,qBA6DF,SAACpD,GAKhBjB,QAAQC,IAAI,WAAYgB,GNjRhB,SAAC0D,GAET,IAAMpF,EAAS,CACXW,OAAQ,OACRC,IAAKL,EACLJ,KAAMiF,EACNvE,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GM4QbwO,CAjGO,CACL,MAASyG,EAAO3N,MAChB,IAAO2N,EAAOY,IACd,QAAWZ,EAAOlO,QAClB,SAAYkO,EAAOnO,SACnB,KAAQmO,EAAOzN,KACf,SAAYyN,EAAOrN,SACnB,aAAgBqN,EAAOxH,aAAa5G,WA4FnChF,KAAK8T,GACL5T,MAAM6T,IAsI+CxT,KAAK,SAASK,UAAU,6BAAxE,SAAsGwS,EAAOjU,GAAK,OAAS,cAC7H,uBAAOoB,KAAK,OAAO0T,aAAcb,EAAOjU,GAAIA,GAAG,KAAKiD,KAAK,KAAKxB,UAAU,sBAAsBsT,UAAQ,IACtG,0CACA,uBAAO3T,KAAK,OAAOpB,GAAG,QAAQgD,MAAOiR,EAAO3N,MAAOrD,KAAK,QAAQxB,UAAU,eAAesC,SAAUjB,IACnG,6CACA,uBAAO1B,KAAK,OAAOpB,GAAG,WAAWgD,MAAOiR,EAAOnO,SAAU7C,KAAK,WAAWxB,UAAU,eAAesC,SAAUjB,IAC5G,4CACA,uBAAO1B,KAAK,OAAOpB,GAAG,UAAUgD,MAAOiR,EAAOlO,QAAS9C,KAAK,UAAUxB,UAAU,eAAesC,SAAUjB,IACzG,wCACA,uBAAO1B,KAAK,WAAWpB,GAAG,MAAMgD,MAAOiR,EAAOY,IAAK5R,KAAK,MAAMxB,UAAU,eAAesC,SAAUjB,IACjG,yCACA,uBAAO1B,KAAK,OAAOpB,GAAG,OAAOgD,MAAOiR,EAAOzN,KAAMvD,KAAK,OAAOxB,UAAU,eAAesC,SAAUjB,IAChG,+CACA,uBAAO1B,KAAK,OAAOpB,GAAG,WAAWgD,MAAOiR,EAAOxH,aAAa5G,SAAU5C,KAAK,WAAWxB,UAAU,eAAesC,SAAUjB,IACzH,2CACA,yBAAQ9C,GAAG,WAAWiD,KAAK,WAAWD,MAAOiR,EAAOrN,SAAUnF,UAAU,cAAcsC,SAAUjB,EAAhG,UACE,wBAAQE,MAAM,GAAd,6BACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,SAAd,uBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,UAAd,iCCkHGgS,MAlmBf,WAIE,IAAM7U,EAAWC,cAMTG,EAAUuT,cAAVvT,MAKA0U,EAAUjB,cAAViB,MASR,EAAsB5U,mBAAS,CAC7B,GAAM4U,EACN,MAAS,GACT,YAAe,GACf,QAAW,GACX,IAAO,GACP,aAAgB,EAChB,KAAQ,GACR,SAAY,GACZ,OAAU,GACV,YAAe,CACb,GAAM,EACN,KAAQ,GACR,SAAY,GACZ,KAAQ,GACR,SAAY,GACZ,QAAW,GACX,QAAW,GACX,aAAgB,EAChB,mBAAsB,CACpB,GAAM,EACN,SAAY,EACZ,KAAQ,GACR,YAAe,GACf,aAAgB,IAElB,OAAU,CACR,CACE,GAAM,EACN,SAAY,EACZ,YAAe,GACf,SAAY,KAGhB,KAAQ,CACN,CACE,GAAM,EACN,SAAY,EACZ,IAAO,KAGX,QAAW,KACX,KAAQ,GACR,YAAe,GACf,aAAgB,IAElB,YAAe,GACf,aAAgB,GAChB,KAAQ,GACR,OAAU,GACV,YAAe,GACf,YAAe,KAnDjB,mBAAOlJ,EAAP,KAAYmJ,EAAZ,KA6DMC,EAAmB,SAACC,GAOxBF,GAAO,SAACG,GAIN,IAAIzN,EAAY,eAAQyN,GAYxB,OAPAzN,EAAewN,GAEFE,YAAchK,EAAe8J,EAAU7J,QAK7C3D,MAqBL2N,EAAkB,SAACpW,GAGvB,IAFA,IAAIwI,EAAiBxI,EAAKoE,KAAKuE,WAC3B0N,EAAe,8CACVvQ,EAAQ,EAAGA,EAAQ0C,EAAe7C,OAAQG,IACjDuQ,GAAe,yBAAsB7N,EAAe1C,GAAOjF,GAA5C,aAAmD2H,EAAe1C,GAAOhC,KAAzE,aAQjBiS,GAAO,SAACjU,GAIN,IAAM6H,EAAQ,eAAQ7H,GAQtB,OAJA6H,EAAS2M,YAAcD,EAIhB1M,MAQL4M,EAAe,SAACrU,GACpB5B,QAAQC,IAAI,eAAgB2B,GAC5BwC,IAAOkL,MAAM,8CAWTjM,EAAoB,SAACpC,GAIzB,IAAMqC,EAASrC,EAAEqC,OAIXC,EAAQD,EAAOC,MAKfC,EAAOF,EAAOE,KAOpBiS,GAAO,SAAAG,GAIL,IAAMlS,EAAa,eACdkS,GAgBL,MATa,YAATpS,EACFE,EAAc2H,YAAY9K,GAAKgD,EAE/BG,EAAcF,GAAQD,EAMjBG,MAcLwS,EAAS,SAACjL,EAAS8J,GAKnBA,EACFW,EAAiBX,GVzOP,SAACxU,GAEbP,QAAQC,IAAI,iCACZ,IAAMV,EAAS,CACXW,OAAQ,MACRC,IAAKmF,EAAW,IAAM/E,EACtBH,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GAAQ6B,KAAKsE,GUsOxB8G,CACWvB,EAAQ1K,IAChBa,KAAKwC,GACLtC,MAAM+I,IAUPzG,EAAa,SAACnE,GAMlB,IAAIkW,EAAS,2BAAQlW,EAASqE,MAAjB,IAAuBnC,KAAM,WAAYgL,OAAQ,KAG9D+I,EAAiBC,GAKjBvR,IAAOY,QAAQ,wBASXqF,EAAW,SAACzI,GAKhB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAKfd,IAAOC,QAAQa,IA2BXiR,EAAiB,SAACC,GAEtB,OAAOA,EAAaC,QAAQ,MAAO,KAAKC,MAAM,MAiD1CtB,EAAc,SAACvV,GAKnBO,QAAQC,IAAI,cAAeR,GAK3B2E,IAAOY,QAAQ,kCASXiQ,EAAY,SAACrT,GAKjB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAKfd,IAAOC,QAAQa,IA+BXgQ,EAAgB,SAACzV,GAOrB2E,IAAOY,QAAQ,qEAOfyQ,GAAO,SAAAG,GAIL,IAAMlS,EAAa,eACdkS,GAaL,OAPAlS,EAAcnD,GAAKd,EAASC,KAAKoE,KACjCJ,EAAc/B,KAAO,UACrB+B,EAAciJ,OAAS,SAAWlN,EAASC,KAAKoE,KAKzCJ,MAULyR,EAAc,SAACvT,GAKnB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAKfd,IAAOC,QAAQa,IAQjBrD,qBAAU,WASR,GAjYA8H,EACW,EAAG,KACXvI,KAAK0U,GACLxU,MAAM2U,GA8XQ,YAAb3J,EAAI3K,KAAoB,CAM1B,IAAMsI,EAAQ,2BAAQqC,GAAR,IAAa3K,KAAM,WAAYgL,OAAQ,KAMrDjM,EAAS4L,EAAIK,OAAQ,CAAE7L,MAAOmJ,SAQ1BqC,EAAI/L,IAAI2V,EAAO5J,EAAKxL,KAIzB,CAACwL,EAAI3K,OAQR,IAkBMkK,EAAiB,SAACF,GAEtB,IADA,IAAIC,EAAU,GACLpG,EAAQ,EAAGA,EAAQmG,EAAQtG,OAAQG,IACtCA,IAAUmG,EAAQtG,OAAS,EAC7BuG,GAAWD,EAAQnG,GAAOhC,KAE1BoI,GAAWD,EAAQnG,GAAOhC,KAAO,KAGrC,OAAOoI,GAKT,OACE,cAAC,IAAM7J,SAAP,UACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,6BAAKsK,EAAI/L,GAAK,WAAa,gBAG/B,uBAAMiD,KAAK,WAAWjD,GAAG,WAAzB,UACE,8BAAG,wBAAQuC,QAzCF,SAAC7B,GAKhBA,EAAEC,iBAIFR,EAAS,UAgC2BiB,KAAK,SAASK,UAAU,6BAAnD,kBACD,wBAAQc,QAASwJ,EAAI/L,GAtOhB,SAACU,GAKdjB,QAAQC,IAAI,SAAUgB,GVrSX,SAACV,EAAIoE,GAIhB,GAFA3E,QAAQC,IAAI,4BAA8BqF,EAAW,IAAM/E,GAEtDA,EAAL,CAEA,IAAMhB,EAAS,CACXW,OAAQ,MACRC,IAAKmF,EAAW,IAAM/E,EACtBb,KAAMiF,EACNvE,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GAAQ6B,KAAKsE,IU4R1B8G,CACUF,EAAI/L,GA1DP,CACL,GAAM+L,EAAI/L,GACV,MAAS+L,EAAIzF,MACb,YAAeyF,EAAId,YACnB,QAAWc,EAAIhG,QACf,IAAOgG,EAAIhB,IACX,KAAQgB,EAAIvF,KACZ,SAAYuF,EAAInF,SAChB,cAAiBmF,EAAIjB,YAAY9K,GACjC,OAAU4V,EAAe7J,EAAIuJ,eAkD5BzU,KAAK4T,GACL1T,MAAM2T,IAmDM,SAAChU,GAKhBjB,QAAQC,IAAI,WAAYgB,GVnXhB,SAAC0D,GAET3E,QAAQC,IAAI,+BACZ,IAAMV,EAAS,CACXW,OAAQ,OACRC,IAAKmF,EACL5F,KAAMiF,EACNvE,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GU6WbiN,CA3FO,CACL,MAASF,EAAIzF,MACb,YAAeyF,EAAId,YACnB,QAAWc,EAAIhG,QACf,IAAOgG,EAAIhB,IACX,KAAQgB,EAAIvF,KACZ,SAAYuF,EAAInF,SAChB,cAAiBmF,EAAIjB,YAAY9K,GACjC,OAAU4V,EAAe7J,EAAIuJ,eAqF5BzU,KAAK8T,GACL5T,MAAM6T,IA2J4CxT,KAAK,SAASK,UAAU,6BAArE,SAAmGsK,EAAI/L,GAAK,OAAS,cACvH,uBAAOoB,KAAK,OAAO0T,aAAc/I,EAAI/L,GAAIA,GAAG,KAAKiD,KAAK,KAAKxB,UAAU,sBAAsBsT,UAAQ,IACnG,8CACA,uBAAO3T,KAAK,OAAOpB,GAAG,QAAQiD,KAAK,QAAQD,MAAO+I,EAAIzF,MAAO0P,MAAM,eAAejS,SAAUjB,IAC5F,gDACA,uBAAO1B,KAAK,OAAOpB,GAAG,cAAciD,KAAK,cAAcD,MAAO+I,EAAId,YAAa+K,MAAM,eAAejS,SAAUjB,IAC9G,4CACA,uBAAO1B,KAAK,OAAOpB,GAAG,UAAUiD,KAAK,UAAUD,MAAO+I,EAAIhG,QAASiQ,MAAM,eAAejS,SAAUjB,IAClG,wCACA,uBAAO1B,KAAK,OAAOpB,GAAG,MAAMiD,KAAK,MAAMD,MAAO+I,EAAIhB,IAAKiL,MAAM,eAAejS,SAAUjB,IACtF,yCACA,uBAAO1B,KAAK,OAAOpB,GAAG,OAAOiD,KAAK,OAAOD,MAAO+I,EAAIvF,KAAMwP,MAAM,eAAejS,SAAUjB,IACzF,6DACA,uBAAO1B,KAAK,OAAOpB,GAAG,cAAciD,KAAK,cAAcD,MAAO+I,EAAIuJ,YAAavR,SAAUjB,EAAmBkT,MAAM,iBAClH,4CACA,wBAAQ9K,wBAAyB,CAAEC,OAAQY,EAAI0J,aAAezV,GAAG,UAAUiD,KAAK,UAAUD,MAAO+I,EAAIjB,YAAY9K,GAAIgW,MAAM,cAAcjS,SAAUjB,IAGnJ,2CACA,yBAAQ9C,GAAG,WAAWgD,MAAO+I,EAAInF,SAAU3D,KAAK,WAAWc,SAAUjB,EAAmBkT,MAAM,cAA9F,UACE,wBAAQhT,MAAM,GAAd,6BACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,SAAd,uBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,UAAd,iCC0BGiT,MAnnBf,WAIE,IAAM9V,EAAWC,cAMTG,EAAUuT,cAAVvT,MAKA2V,EAAclC,cAAdkC,UASR,EAA8B7V,mBAAS,CACrC,GAAM6V,EACN,KAAQ,GACR,SAAY,GACZ,KAAQ,GACR,SAAY,GACZ,QAAW,GACX,QAAW,GACX,aAAgB,EAChB,mBAAsB,CACpB,GAAM,EACN,SAAY,EACZ,KAAQ,GACR,YAAe,GACf,aAAgB,IAElB,OAAU,CACR,CACE,GAAM,EACN,SAAY,EACZ,YAAe,OACf,SAAY,KAGhB,KAAQ,CACN,CACE,GAAM,EACN,SAAY,EACZ,IAAO,KAGX,QAAW,KACX,KAAQ,CACN,CACE,GAAM,EACN,SAAY,EACZ,QAAW,KAGf,YAAe,GACf,aAAgB,KAxClB,mBAAOjO,EAAP,KAAgBkO,EAAhB,KAkDMC,EAAwB,SAACC,GAO7BF,GAAW,SAACG,GAIM,eAAQA,GAYxB,OAPeD,MAyEbvT,EAAoB,SAACpC,GAIzB,IAAMqC,EAASrC,EAAEqC,OAIXC,EAAQD,EAAOC,MAKfC,EAAOF,EAAOE,KAOpBkT,GAAW,SAAAG,GAIT,IAAMnT,EAAa,eACdmT,GAqBL,MAda,aAATrT,EACFE,EAAcyC,OAAO,GAAGC,SAAW7C,EACjB,YAATC,EACTE,EAAcsD,mBAAmBtH,KAAO6D,EACtB,QAATC,EACTE,EAAcwD,KAAK,GAAG/G,IAAMoD,EAG5BG,EAAcF,GAAQD,EAMjBG,MAcLoT,EAAa,SAAClR,EAAamP,GAK3BA,EACF4B,EAAsB5B,Gd3OZ,SAACxU,GAEbP,QAAQC,IAAI,iCACZ,IAAMV,EAAS,CACXW,OAAQ,MACRC,IAAKmF,EAAW,IAAM/E,EACtBH,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GcwOXoK,CACW/D,EAAYrF,IACpBa,KAAKwC,GACLtC,MAAM+I,IAUPzG,EAAa,SAACnE,GAMlB,IAAImX,EAAa,2BAAQnX,EAASqE,MAAjB,IAAuBnC,KAAM,eAAgBuI,WAAY,KAG1EyM,EAAsBC,GAKtBxS,IAAOY,QAAQ,4BASXqF,EAAW,SAACzI,GAKhB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAKfd,IAAOC,QAAQa,IAqGX8P,EAAc,SAACvV,GAKnBO,QAAQC,IAAI,cAAeR,GAK3B2E,IAAOY,QAAQ,kCASXiQ,EAAY,SAACrT,GAKjB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAKfd,IAAOC,QAAQa,IA+BXgQ,EAAgB,SAACzV,GAOrB2E,IAAOY,QAAQ,6EAOf0R,GAAW,SAAAG,GAIT,IAAMnT,EAAa,eACdmT,GAaL,OAPAnT,EAAcnD,GAAKd,EAASC,KAAKoE,KACjCJ,EAAc/B,KAAO,cACrB+B,EAAcwG,WAAa,cAAgBzK,EAASC,KAAKoE,KAKlDJ,MAULyR,EAAc,SAACvT,GAKnB,IADA,IAAIsD,EAAc,WACTC,EAAI,EAAGA,EAAIvD,EAAInC,SAASC,KAAK0F,OAAOC,OAAQF,IACnDD,GAAetD,EAAInC,SAASC,KAAK0F,OAAOD,GAAK,YAE/CD,GAAe,uBAKfd,IAAOC,QAAQa,IAiFjB,OAzEArD,qBAAU,WASR,GAAqB,gBAAjB2G,EAAQ7G,KAAwB,CAMlC,IAAMsI,EAAQ,2BAAQzB,GAAR,IAAiB7G,KAAM,eAAgBuI,WAAY,KAMjExJ,EAAS8H,EAAQ0B,WAAY,CAAEpJ,MAAOmJ,SAQlCzB,EAAQjI,IAAIuW,EAAWtO,EAAS1H,KAIrC,CAAC0H,EAAQ7G,OAyCV,cAAC,IAAMI,SAAP,UACE,sBAAKC,UAAU,YAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,6BAAKwG,EAAQjI,GAAK,eAAiB,oBAGvC,uBAAMiD,KAAK,WAAWjD,GAAG,WAAzB,UACE,8BAAG,wBAAQuC,QAzCG,SAAC7B,GAKrBA,EAAEC,iBAIFR,EAAS,eAgCgCiB,KAAK,SAASK,UAAU,6BAAxD,uBACD,wBAAQc,QAAS0F,EAAQjI,GArOpB,SAACU,GAKdjB,QAAQC,IAAI,SAAUgB,Gd7TX,SAACV,EAAIoE,GAIhB,GAFA3E,QAAQC,IAAI,4BAA8BqF,EAAW,IAAM/E,GAEtDA,EAAL,CAEA,IAAMhB,EAAS,CACXW,OAAQ,MACRC,IAAKmF,EAAW,IAAM/E,EACtBb,KAAMiF,EACNxF,iBAAiB,EACjBiB,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,IcmTboK,CACUnB,EAAQjI,GAjFX,CACL,GAAMiI,EAAQjI,GACd,KAAQiI,EAAQhF,KAChB,QAAWgF,EAAQ1B,QACnB,QAAW0B,EAAQlC,QACnB,SAAYkC,EAAQnC,SACpB,mBAAsBmC,EAAQxB,mBAAmBtH,KACjD,KAAQ8I,EAAQzB,KAChB,SAAYyB,EAAQrB,SACpB,OAAU,CACR,CACE,YAAeqB,EAAQrC,OAAO,GAAG4Q,YACjC,SAAYvO,EAAQrC,OAAO,GAAGC,WAGlC,KAAQ,CACNoC,EAAQtB,KAAK,GAAG/G,KAElB,KAAQqI,EAAQG,KAAOH,EAAQG,KAAK,GAAGnF,KAAO,CAAC,IAC/C,UAAagF,EAAQI,UA+DpBxH,KAAK4T,GACL1T,MAAM2T,IAkDM,SAAChU,GAKhBjB,QAAQC,IAAI,WAAYgB,Gd1YhB,SAAC0D,GAET3E,QAAQC,IAAI,+BACZ,IAAMV,EAAS,CACXW,OAAQ,OACRC,IAAKmF,EACL5F,KAAMiF,EACNvE,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,GcoYboK,CArGO,CACL,KAAQnB,EAAQhF,KAChB,QAAWgF,EAAQ1B,QACnB,QAAW0B,EAAQlC,QACnB,SAAYkC,EAAQnC,SACpB,mBAAsBmC,EAAQxB,mBAAmBtH,KACjD,KAAQ8I,EAAQzB,KAChB,SAAYyB,EAAQrB,SACpB,OAAU,CACR,CACE,YAAe,OACf,SAAYqB,EAAQrC,OAAO,GAAGC,WAGlC,KAAQ,CACNoC,EAAQtB,KAAK,GAAG/G,KAElB,KAAQqI,EAAQG,KAAOH,EAAQG,KAAK,GAAGnF,KAAO,CAAC,IAC/C,UAAagF,EAAQI,UAqFpBxH,KAAK8T,GACL5T,MAAM6T,IA2JgDxT,KAAK,SAASK,UAAU,6BAAzE,SAAuGwG,EAAQjI,GAAK,OAAS,cAC/H,uBAAOoB,KAAK,OAAO0T,aAAc7M,EAAQjI,GAAIA,GAAG,KAAKiD,KAAK,KAAKxB,UAAU,sBAAsBsT,UAAQ,IACvG,iDACA,uBAAO3T,KAAK,OAAOpB,GAAG,OAAOiD,KAAK,OAAOD,MAAOiF,EAAQhF,KAAM+S,MAAM,eAAejS,SAAUjB,IAC7F,6CACA,uBAAO1B,KAAK,OAAOpB,GAAG,WAAWiD,KAAK,WAAWD,MAAOiF,EAAQnC,SAAUkQ,MAAM,eAAejS,SAAUjB,IACzG,4CACA,uBAAO1B,KAAK,OAAOpB,GAAG,UAAUiD,KAAK,UAAUD,MAAOiF,EAAQlC,QAASiQ,MAAM,eAAejS,SAAUjB,IACtG,4CACA,uBAAO1B,KAAK,OAAOpB,GAAG,UAAUiD,KAAK,UAAUD,MAAOiF,EAAQ1B,QAASyP,MAAM,eAAejS,SAAUjB,IACtG,yCACA,uBAAO1B,KAAK,OAAOpB,GAAG,OAAOiD,KAAK,OAAOD,MAAOiF,EAAQzB,KAAMwP,MAAM,eAAejS,SAAUjB,IAC7F,8CACA,uBAAO1B,KAAK,OAAOpB,GAAG,WAAWiD,KAAK,WAAWD,MAAOiF,EAAQrC,OAAO,GAAGC,SAAU9B,SAAUjB,EAAmBkT,MAAM,iBACvH,iDACA,uBAAO5U,KAAK,OAAOpB,GAAG,UAAUiD,KAAK,UAAUD,MAAOiF,EAAQxB,mBAAmBtH,KAAM4E,SAAUjB,EAAmBkT,MAAM,iBAC1H,6CACA,uBAAO5U,KAAK,OAAOpB,GAAG,MAAMiD,KAAK,MAAMD,MAAOiF,EAAQtB,KAAK,GAAG/G,IAAKmE,SAAUjB,EAAmBkT,MAAM,iBACtG,2CACA,yBAAQhW,GAAG,WAAWgD,MAAOiF,EAAQrB,SAAU3D,KAAK,WAAWc,SAAUjB,EAAmBkT,MAAM,cAAlG,UACE,wBAAQhT,MAAM,GAAd,6BACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,SAAd,uBACA,wBAAQA,MAAM,UAAd,qBACA,wBAAQA,MAAM,UAAd,iCCzgBGyT,MA5Gf,WAII,MAAwCpW,qBAAxC,mBAAOqW,EAAP,KAAqBC,EAArB,KACA,EAAwCtW,oBAAS,GAAjD,mBAAOuW,EAAP,KAAqBC,EAArB,KACA,EAAsCxW,mBAAS,CAC3CyW,MAAO,GACPC,SAAU,KAFd,mBAAOC,EAAP,KAAuBC,EAAvB,KA4CMC,EAAe,SAACC,GAClB,MAAM,mBAAN,OAA0BA,EAA1B,gCAAsDA,EAAtD,YAA8DA,EAA9D,mBAIAC,EAAgB,SAAClY,GAlCW,IAACmY,EAmC7B5X,QAAQC,IAAI,UAAWR,GACvB2X,GAAgB,GApCaQ,EAqCLnY,EAASC,KAAKmY,MAAM,GApC5CL,GAAY,SAACM,GAET,IAAI5F,EAAS3D,KAAKC,MAAMD,KAAKE,UAAUqJ,IAKvC,OAHA5F,EAAOmF,MAAMzE,KAAKgF,GAClB1F,EAAOoF,SAAWpF,EAAOmF,MAAMxO,IAAI4O,GAE5BvF,MAiCX6F,EAAc,SAACnW,GACf5B,QAAQC,IAAI,UAAW2B,IAY3B,OANAC,qBAAU,WACNqV,GAAgB,WAAQ,MAAO,MAC/BE,GAAgB,WAAQ,OAAO,OAChC,CAACG,EAAeF,QAKf,gCACI,uBAAO1V,KAAK,OAAO6B,KAAK,OAAOc,SAjEjB,SAACqK,GAEnBuI,GAAgB,WAAQ,OAAOvI,EAAMrL,OAAO+T,MAAM,MAClDD,GAAgB,WAAQ,OAAO,QA+D1BD,EACG,gCACI,kDACA,2CAAcF,EAAatV,QAC3B,gDAAmBsV,EAAaxR,QAChC,kDACsB,IACjBwR,EAAae,iBAAiBC,wBAEnC,8CAKJ,8DAGJ,gCACI,wBAAQnV,QA7DD,WAEf,IAAMoV,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQnB,GClCb,SAACtS,GAEhB3E,QAAQC,IAAI,kBACZ,IAAMV,EAAS,CACXW,OAAQ,OACRC,IAZS,2CAaTT,KAAMiF,EACNvE,aAAa,EACbC,QAAS,CAAE,eAAgB,wBAE/B,OAAOpB,IAAMM,GD0BT8Y,CACgBH,GACX9W,KAAKuW,GACLrW,MAAMyW,IAqDH,oBACA,uBAAO/V,UAAU,QAAQyJ,wBAAyB,CAAEC,OAAQ6L,EAAeD,SAAWC,EAAeD,SAAW,8BEpFjHgB,MAhBf,SAAgC7X,GAI5B,OAFAT,QAAQC,IAAI,aAAcQ,EAAM8X,mBAAmBhY,IAI/C,sBAAKyB,UAAU,OAAOwC,MAAQ/D,EAAM8X,mBAAmBC,OAAU,CAAEC,OAAQ,oBAAuB,CAAEA,OAAQ,cAA5G,UACI,mBAAGzW,UAAU,SAASzB,GAAIE,EAAM8X,mBAAmBhY,KACnD,kDAAqBE,EAAM8X,mBAAmB3V,UAA9C,IAA0DnC,EAAM8X,mBAAmB1V,YACnF,wCAAWpC,EAAM8X,mBAAmBG,SACpC,gDAAmBjY,EAAM8X,mBAAmBI,gBAJhD,WAKY,qBAAKnU,MAAO,CAAEnC,MAAO,QAASC,OAAQ,SAAWF,IAAK3B,EAAM8X,mBAAmBnS,SAAU7D,IAAI,SCX7GqW,EAA4B,CAC5BtT,SAAU,yDAOdsT,IAAgC,SAACjU,GAE7B,IAAMpF,EAAS,CACXW,OAAQ,OACRC,IAAKyY,EAA0BtT,SAC/B5F,KAAMiF,EACNxF,iBAAiB,EACjBiB,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,KAGFqZ,KC0PAC,OA7Qf,WAEI,MAA0BjY,mBAAS,CAC/B,GAAM,EACN,UAAa,GACb,SAAY,GACZ,aAAgB,EAChB,MAAS,GACT,SAAY,GACZ,KAAQ,IAPZ,mBAAOkY,EAAP,KAAcC,EAAd,KAUA,EAA0BnY,mBAAS,CAC/B,GAAM,EACN,UAAa,GACb,SAAY,GACZ,aAAgB,EAChB,MAAS,GACT,SAAY,GACZ,KAAQ,IAPZ,mBAAOoY,EAAP,KAAcC,EAAd,KAUMC,EAAqB,SAACC,GAExB,MAAO,CACH,UAAaA,EAAUvW,UACvB,SAAYuW,EAAUtW,SACtB,aAAgBsW,EAAUR,aAC1B,MAASQ,EAAUC,MACnB,SAAYD,EAAU/S,SACtB,KAAQ+S,EAAUE,OAIpBC,EAAsB,SAACH,GACzB,OAAO,cAAC,EAAD,CAAwBZ,mBAAoBY,KAKjDI,EAAqB,SAACtY,GAExBA,EAAEC,iBAEF,IAAMoC,EAASrC,EAAEqC,OAEXC,EAAQD,EAAOC,MACrBvD,QAAQC,IAAIsD,GAEZ,IAAMC,EAAOF,EAAOE,KAEpBuV,GAAS,SAAAS,GAEL,IAAMC,EAAS,eACRD,GAMP,OAHAC,EAAUjW,GAAQD,EAGXkW,MAITC,EAAqB,SAACzY,GAExBA,EAAEC,iBAEF,IAAMoC,EAASrC,EAAEqC,OAEXC,EAAQD,EAAOC,MACrBvD,QAAQC,IAAIsD,GAEZ,IAAMC,EAAOF,EAAOE,KAAKoQ,UAAU,EAAGtQ,EAAOE,KAAK6B,OAAS,GAE3D4T,GAAS,SAAAU,GAEL,IAAMF,EAAS,eACRE,GAKP,OAFAF,EAAUjW,GAAQD,EAEXkW,MAITG,EAAU,SAAC3Y,GACbA,EAAEC,iBAIe,UAFFD,EAAEqC,OAAO/C,GAGpBsZ,EAAWf,GAEXgB,EAAWd,IAIba,EAAa,WAEfd,GAAS,SAACS,GACN,IAAItH,EAAM,eAAQsH,GASlB,OAPAtH,EAAO3R,GAAK,EACZ2R,EAAOtP,UAAY,GACnBsP,EAAOrP,SAAW,GAClBqP,EAAOwG,MAAQ,GACfxG,EAAOyG,aAAe,EACtBzG,EAAO9L,SAAW,GAEX8L,MAKT4H,EAAa,WAEfb,GAAS,SAACU,GACN,IAAIzH,EAAM,eAAQyH,GASlB,OAPAzH,EAAO3R,GAAK,EACZ2R,EAAOtP,UAAY,GACnBsP,EAAOrP,SAAW,GAClBqP,EAAOwG,MAAQ,GACfxG,EAAOyG,aAAe,EACtBzG,EAAO9L,SAAW,GAEX8L,MAGT6H,EAAW,SAAC9Y,GAKd,GAJAA,EAAEC,iBAIe,WAFFD,EAAEqC,OAAO/C,GAEG,CAGvB,GAFAP,QAAQC,IAAI,cAEP6Y,EAAMlW,UAAW,OACtB,IAAKkW,EAAMjW,SAAU,OACrB,IAAKiW,EAAMH,aAAc,OACzB,GAAmC,IAA/BjQ,OAAOoQ,EAAMH,cAAqB,OACtC,IAAKG,EAAMJ,MAAO,OAClB,IAAKI,EAAM1S,SAAU,OAErBwS,GACKoB,IAAId,EAAmBJ,IACvB1X,KAAK6Y,GACL3Y,MAAM4Y,OACR,CAGH,GAFAla,QAAQC,IAAI,cAEP+Y,EAAMpW,UAAW,OACtB,IAAKoW,EAAMnW,SAAU,OACrB,IAAKmW,EAAML,aAAc,OACzB,GAAmC,IAA/BjQ,OAAOsQ,EAAML,cAAqB,OACtC,IAAKK,EAAMN,MAAO,OAClB,IAAKM,EAAM5S,SAAU,OAErBwS,GACKoB,IAAId,EAAmBF,IACvB5X,KAAK+Y,GACL7Y,MAAM8Y,KAIbH,EAAiB,SAACxa,GACpBO,QAAQC,IAAIR,GAEZsZ,GAAS,SAACS,GACN,IAAItH,EAAM,eAAQsH,GAElB,OADAtH,EAAO3R,GAAKd,EAASC,KAAKoE,KACnBoO,MAITgI,EAAe,SAACtY,GAClB5B,QAAQC,IAAI2B,IAGVuY,EAAiB,SAAC1a,GACpBO,QAAQC,IAAIR,GAEZwZ,GAAS,SAACU,GACN,IAAIzH,EAAM,eAAQyH,GAElB,OADAzH,EAAO3R,GAAKd,EAASC,KAAKoE,KACnBoO,MAKTkI,EAAe,SAACxY,GAClB5B,QAAQC,IAAI2B,IAgChB,OAEI,sBAAKI,UAAU,YAAf,UACI,wBAAQzB,GAAG,aAAauC,QA/BR,SAAC7B,GACrBA,EAAEC,iBACF,IAAImZ,EAAmB3R,OAAOoQ,EAAMH,cAChC2B,EAAmB5R,OAAOsQ,EAAML,cAEhC0B,EAAmBC,GACnBvB,GAAS,SAACS,GACN,IAAItH,EAAM,eAAQsH,GAElB,OADAtH,EAAOsG,QAAS,EACTtG,KAEX4H,KACOQ,EAAmBD,GAC1BpB,GAAS,SAACU,GACN,IAAIzH,EAAM,eAAQyH,GAElB,OADAzH,EAAOsG,QAAS,EACTtG,KAEX2H,KAGA7Z,QAAQC,IAAI,cAUZ,yBACA,qBAAK+B,UAAU,YAAf,SACI,uBAAMzB,GAAG,QAAQiD,KAAK,QAAtB,UACI,sBAAKxB,UAAU,aAAf,UAA4B,2CAA5B,IAA8C,uBAAOuB,MAAOuV,EAAMlW,UAAW0B,SAAUiV,EAAoB5X,KAAK,OAAOpB,GAAG,YAAYiD,KAAK,iBAC3I,sBAAKxB,UAAU,aAAf,UAA4B,0CAA5B,IAA6C,uBAAOL,KAAK,OAAO4B,MAAOuV,EAAMjW,SAAUyB,SAAUiV,EAAoBhZ,GAAG,WAAWiD,KAAK,gBACxI,sBAAKxB,UAAU,aAAf,UAA4B,8CAA5B,IAAiD,uBAAOL,KAAK,OAAO4B,MAAOuV,EAAMH,aAAcrU,SAAUiV,EAAoBhZ,GAAG,eAAeiD,KAAK,oBACpJ,sBAAKxB,UAAU,aAAf,UAA4B,sCAA5B,IAAyC,yBAAQuB,MAAOuV,EAAMJ,MAAOpU,SAAUiV,EAAoBhZ,GAAG,QAAQiD,KAAK,QAA1E,UACrC,wBAAQD,MAAM,KACd,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,cAAd,+BAEJ,sBAAKvB,UAAU,aAAf,UAA4B,uCAA5B,IAA0C,uBAAOL,KAAK,OAAO4B,MAAOuV,EAAM1S,SAAU9B,SAAUiV,EAAoBhZ,GAAG,WAAWiD,KAAK,gBACrI,wBAAQjD,GAAG,SAASoB,KAAK,SAASmB,QAASiX,EAA3C,oBACA,wBAAQxZ,GAAG,QAAQuC,QAAS8W,EAA5B,mBACEd,EAAMvY,GAAK,EAAK+Y,EAAoBR,GAAS,QAGvD,qBAAK9W,UAAU,aAAf,SACI,uBAAMzB,GAAG,QAAQiD,KAAK,QAAtB,UACI,sBAAKxB,UAAU,aAAf,UAA4B,2CAA5B,IAA8C,uBAAOL,KAAK,OAAO4B,MAAOyV,EAAMpW,UAAW0B,SAAUoV,EAAoBnZ,GAAG,aAAaiD,KAAK,kBAC5I,sBAAKxB,UAAU,aAAf,UAA4B,0CAA5B,IAA6C,uBAAOL,KAAK,OAAO4B,MAAOyV,EAAMnW,SAAUyB,SAAUoV,EAAoBnZ,GAAG,YAAYiD,KAAK,iBACzI,sBAAKxB,UAAU,aAAf,UAA4B,8CAA5B,IAAiD,uBAAOL,KAAK,OAAO4B,MAAOyV,EAAML,aAAcrU,SAAUoV,EAAoBnZ,GAAG,gBAAgBiD,KAAK,qBACrJ,sBAAKxB,UAAU,aAAf,UAA4B,sCAA5B,IAAyC,yBAAQuB,MAAOyV,EAAMN,MAAOpU,SAAUoV,EAAoBnZ,GAAG,SAASiD,KAAK,SAA3E,UACrC,wBAAQD,MAAM,KACd,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,cAAd,+BAEJ,sBAAKvB,UAAU,aAAf,UAA4B,uCAA5B,IAA0C,uBAAOL,KAAK,OAAO4B,MAAOyV,EAAM5S,SAAU9B,SAAUoV,EAAoBnZ,GAAG,YAAYiD,KAAK,iBACtI,wBAAQjD,GAAG,UAAUoB,KAAK,SAASmB,QAASiX,EAA5C,oBACA,wBAAQxZ,GAAG,SAASuC,QAAS8W,EAA7B,mBACEZ,EAAMzY,GAAK,EAAK+Y,EAAoBN,GAAS,YCtQ/DuB,GAAa,CACbjV,SAAU,4DAOdiV,OAAoB,WAEhB,IAAMhb,EAAS,CACXW,OAAQ,MACRC,IAAKoa,GAAWjV,SAChBnG,iBAAiB,EACjBiB,aAAa,EACbC,QAAS,CAAE,eAAgB,qBAE/B,OAAOpB,IAAMM,KAGFgb,MCaAC,OAjCf,SAAmB/Z,GAYf,OACI,cAAC,IAAMsB,SAAP,UACI,sBAAKC,UAAU,OAAOwC,MAAO,CAAEnC,MAAO,SAAtC,UACI,sBAAKL,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,SAA4BvB,EAAMga,IAAIC,OACtC,mBAAG1Y,UAAU,YAAb,SAA0BvB,EAAMga,IAAIE,OACpC,mBAAG3Y,UAAU,YAAb,SAA0BvB,EAAMga,IAAIG,WAExC,qBAAKpW,MAAO,CAAE+B,aAAc,WAAYC,QAAS,QAAjD,SACI,wBAAQ7E,KAAK,SAASmB,QAlBjB,SAAC7B,GAClBA,EAAEC,iBACFT,EAAMoa,aAAa,CACfH,KAAMja,EAAMga,IAAIC,KAChBE,MAAOna,EAAMga,IAAIG,MACjBD,KAAMla,EAAMga,IAAIE,QAaqC3Y,UAAWvB,EAAMqa,WAAa,wBAA0B,SAArG,+BCsHLC,OAxIf,WAGI,MAAwBna,mBAAS,CAC7BiX,MAAO,GACPmD,WAAY,GACZC,aAAc,GACdC,aAAc,GACdC,UAAU,EACVC,YAAa,KANjB,mBAAOC,EAAP,KAAaC,EAAb,KAiCM1X,EAAa,SAACnE,GAGhB6b,GAAQ,SAAC9Z,GAEL,IAAI0Q,EAAM,eAAQ1Q,GAIlB,OAHA0Q,EAAO2F,MAAQpY,EAASC,KACxBwS,EAAO+I,aAAe/I,EAAO2F,MAC7B3F,EAAO8I,WAAa9I,EAAO+I,aAAapS,IAAI0S,GACrCrJ,MAIT7H,EAAW,SAACzI,GACd5B,QAAQC,IAAI,WAAY2B,IAKtB4Z,EAAY,SAACva,GACfA,EAAEC,iBACF,IAAIua,EAAaxa,EAAEgI,cAAcC,QAAQC,KAEzCmS,GAAQ,SAAC9Z,GACL,IAAI0Q,EAAM,eAAQ1Q,GAGlB,OAFA0Q,EAAOgJ,aAAeO,EACtBvJ,EAAOkJ,YAAc,GACdlJ,MAKTwJ,EAAiB,SAACjB,GAGpBa,GAAQ,SAAC9Z,GACL,IAAI0Q,EAAM,eAAQ1Q,GAElB,OADA0Q,EAAOkJ,YAAc,cAAC,GAAD,CAAW7a,GAAG,YAAYua,YAAY,EAAOL,IAAKA,IAChEvI,MAOTqJ,EAAU,SAACzX,GACb,OAAO,cAAC,GAAD,CAAgEgX,YAAY,EAAML,IAAG,eAAO3W,GAAQ+W,aAAca,GAAlG5X,EAAK4W,KAAO,IAAM5W,EAAK8W,MAAQ,IAAM9W,EAAK6W,OAK/DgB,EAAa,SAAClB,GAChB,MAA2B,KAAtBY,EAAKH,cAAyBxS,OAAO+R,EAAIE,QAAUjS,OAAO2S,EAAKH,eA6BxE,OArBArZ,qBAAU,WAnEN0Y,GACKqB,SACAxa,KAAKwC,GACLtC,MAAM+I,KAkEZ,IAIHxI,qBAAU,WAGFwZ,EAAKxD,MAAMxS,OAAS,GAEpBiW,GAAQ,SAAC9Z,GACL,IAAI0Q,EAAM,eAAQ1Q,GAIlB,OAHA0Q,EAAO+I,aAAe/I,EAAO2F,MAAMgE,OAAOF,GAC1CzJ,EAAO8I,WAAa9I,EAAO+I,aAAapS,IAAI0S,GAC5CrJ,EAAOkJ,YAAc,GACdlJ,OAGhB,CAACmJ,EAAKH,eAGL,eAAC,IAAMnZ,SAAP,WACI,wBAAQe,QA1GO,SAAC7B,GACpBA,EAAEC,iBAEFoa,GAAQ,SAAC9Z,GACL,IAAI0Q,EAAM,eAAQ1Q,GAIlB,OAHA0Q,EAAOgJ,aAAehJ,EAAOiJ,SAAWjJ,EAAOiJ,SAAW,GAC1DjJ,EAAOiJ,UAAajJ,EAAOiJ,SAC3BjJ,EAAOkJ,YAAc,GACdlJ,MAkG0BzL,YAAU,GAAGlG,GAAG,WAAWiD,KAAK,WAAjE,SAA6E6X,EAAKF,SAAW,YAAc,cAC3G,wBAAQrY,QAAS0Y,EAAW/U,YAAU,OAAOlG,GAAG,iBAAiBiD,KAAK,OAAOsY,UAAUT,EAAKF,SAA5F,uBACA,wBAAQrY,QAAS0Y,EAAW/U,YAAU,OAAOlG,GAAG,iBAAiBiD,KAAK,OAAOsY,UAAUT,EAAKF,SAA5F,uBACA,wBAAQrY,QAAS0Y,EAAW/U,YAAU,OAAOlG,GAAG,iBAAiBiD,KAAK,OAAOsY,UAAUT,EAAKF,SAA5F,uBACA,wBAAQrY,QAAS0Y,EAAW/U,YAAU,OAAOlG,GAAG,iBAAiBiD,KAAK,OAAOsY,UAAUT,EAAKF,SAA5F,uBACA,sBAAKnZ,UAAU,MAAf,UACI,qBAAKA,UAAU,MAAf,SACKqZ,EAAKF,SAAWE,EAAKL,WAAa,KAEvC,qBAAKhZ,UAAU,MAAf,SAC8B,KAAtBqZ,EAAKD,YAAuBC,EAAKD,YAAc,YCsExDW,OAtLf,WAEE/b,QAAQC,IAAI,iBACZ,IAAMS,EAAWC,cAIjB,EAA0BC,mBAAS,CACjCgC,UAAW,OACXC,SAAU,OACVnB,YAAY,EACZC,KAAM,iBAJR,mBAAOb,EAAP,KAAcC,EAAd,KAWMib,EAAoB,SAACC,GAEzBlb,GAAS,WAgBP,OAXKkb,EAAUva,cACgB,IAAzBua,EAAUva,WACZua,EAAUva,WAAa,KAEvBua,EAAUva,YAAa,GAOpBua,MASLC,EAAc,SAACzc,GACnBO,QAAQC,IAAI,cAAeR,GAE3B0B,EACe1B,EAASC,KAAKoE,KAAKvD,IAC/Ba,KAAK+a,GACL7a,MAAM8a,IAQLC,EAAW,SAACza,GAChB5B,QAAQC,IAAI,WAAY2B,GAQxBoa,EANgB,CACdpZ,UAAW,SACXC,SAAU,YACVnB,YAAY,EACZC,KAAM,qBAUJwa,EAAkB,SAAC1c,GAEvB,IAAIwE,EAAY,CACdrB,UAAWnD,EAASC,KAAKoE,KAAKlB,UAC9BC,SAAUpD,EAASC,KAAKoE,KAAKjB,SAC7BnB,YAAY,EACZC,KAAM,kBAGRqa,EAAkB/X,IAOdmY,EAAe,SAACxa,GACpB5B,QAAQC,IAAI,eAAgB2B,GAQ5Boa,EANgB,CACdpZ,UAAW,SACXC,SAAU,YACVnB,YAAY,EACZC,KAAM,qBAWJ2a,EAAmB,SAACC,GACxBvc,QAAQC,IAAI,aAAcsc,GAC1BP,EAAkBO,IAkBpB1a,qBAAU,WACR7B,QAAQC,IAAI,gBACO,iBAAfa,EAAMa,KAXVR,IAEGC,KAAK8a,GACL5a,MAAM+a,GAUiB,oBAAfvb,EAAMa,KACfjB,EAAS,UACe,mBAAfI,EAAMa,MACfjB,EAAS,OAEV,CAACI,EAAMY,WAAYZ,EAAMa,OAE5B,IAAI6a,EAAW,eAAQ1b,GAEvB,OAEE,eAAC,IAAMiB,SAAP,WACE,cAAC,EAAD,CAASlB,KAAM2b,EAAa1a,mBAAoBwa,IAIhD,sBAAMta,UAAU,YAAYya,KAAK,OAAjC,SAME,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,EAAD,CAAOzY,kBAAmBoY,MACxD,cAAC,IAAD,CAAOI,KAAK,YAAYC,QAAS,cAAC,EAAD,MACjC,cAAC,IAAD,CAAOD,KAAK,aAAaC,QAAS,cAAC,EAAD,MAClC,cAAC,IAAD,CAAOD,KAAK,iBAAiBC,QAAS,cAAC,EAAD,MACtC,cAAC,IAAD,CAAOD,KAAK,wBAAwBC,QAAS,cAAC,EAAD,MAC7C,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,MAC7B,cAAC,IAAD,CAAOD,KAAK,YAAYC,QAAS,cAAC,EAAD,MACjC,cAAC,IAAD,CAAOD,KAAK,eAAeC,QAAS,cAAC,EAAD,MACpC,cAAC,IAAD,CAAOD,KAAK,UAAUC,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,EAAD,MAC9B,cAAC,IAAD,CAAOD,KAAK,WAAWC,QAAS,cAAC,EAAD,MAChC,cAAC,IAAD,CAAOD,KAAK,eAAeC,QAAS,cAAC,EAAD,MACpC,cAAC,IAAD,CAAOD,KAAK,qBAAqBC,QAAS,cAAC,EAAD,MAC1C,cAAC,IAAD,CAAOD,KAAK,uBAAuBC,QAAS,cAAC,GAAD,MAC5C,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,GAAD,WAGjC,wBAAQ3a,UAAU,YAAlB,SACE,2DC1LO4a,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB1b,MAAK,YAAkD,IAA/C2b,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCKRO,G,QAAUC,EAAMC,OAAO,QAE7BC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,SAG1Bf,GAAgBQ,K","file":"static/js/main.aecfc4c7.chunk.js","sourcesContent":["import axios from \"axios\";\r\naxios.defaults.withCredentials = true;\r\n// Add a request interceptor\r\naxios.interceptors.request.use(function (config) {\r\n  config.withCredentials = true;\r\n  return config;\r\n});\r\n\r\n/**\r\n * Will unpack the response body from reponse object\r\n * @param {*} response\r\n *\r\n */\r\nconst onGlobalSuccess = (response) => {\r\n  /// Should not use if you need access to anything other than the data\r\n  return response.data;\r\n};\r\n\r\nconst onGlobalError = (err) => {\r\n  return Promise.reject(err);\r\n};\r\n\r\nconst API_HOST_PREFIX = process.env.REACT_APP_API_HOST_PREFIX;\r\nconst API_NODE_HOST_PREFIX = process.env.REACT_APP_API_NODE_HOST_PREFIX;\r\n\r\n//console.log(\"API_HOST_PREFIX\", API_HOST_PREFIX);\r\n\r\nexport {\r\n  onGlobalError,\r\n  onGlobalSuccess,\r\n  API_HOST_PREFIX,\r\n  API_NODE_HOST_PREFIX,\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst entity = \"https://api.remotebootcamp.dev/api/users\";\r\n\r\n//register new user\r\nconst add = (payload) => {\r\n\r\n    console.log(\"Add new user is executing\");\r\n    const config = {\r\n        method: \"POST\",\r\n        url: entity + \"/register\",\r\n        data: payload,\r\n        withCredentials: true,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);\r\n};\r\n\r\n// //get the current logged-in user\r\nconst getCurrentUser = () => {\r\n\r\n    console.log(\"Get current user is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: entity + \"/current\",\r\n        withCredentials: true,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);\r\n};\r\n\r\n// //get user by id\r\nconst getUserById = (id) => {\r\n\r\n    console.log(\"Get user by ID is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: entity + \"/\" + id,\r\n        withCredentials: true,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);\r\n};\r\n\r\n// //log out as current user\r\nconst logout = () => {\r\n\r\n    console.log(\"Logout is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: entity + \"/logout\",\r\n        withCredentials: true,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);\r\n};\r\n\r\n// //log in\r\nconst login = (payload) => {\r\n\r\n    console.log(\"Login is executing\");\r\n    const config = {\r\n        method: \"POST\",\r\n        url: entity + \"/login\",\r\n        data: payload,\r\n        withCredentials: true,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);\r\n};\r\n\r\nexport { add, getCurrentUser, getUserById, logout, login };\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";   //\r\nimport * as usersService from \"../../services/usersService\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction SiteNav(props) {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [state, setState] = useState(props.user);\r\n    console.log(\"state\", state);\r\n    console.log(\"props.user\", props.user);\r\n\r\n    const startLogout = (e) => {\r\n        e.preventDefault();\r\n        usersService\r\n            .logout()\r\n            .then(logoutSuccess)\r\n            .catch(logoutFail);\r\n    }\r\n\r\n    const getLoginButton = () => {\r\n        return (<Link to=\"/login\" type=\"button\" className=\"btn btn-outline-light me-2\">Login</Link>);\r\n    }\r\n\r\n    const getRegisterButton = () => {\r\n        return (<Link to=\"/register\" type=\"button\" className=\"btn btn-warning\">Register</Link>);\r\n    }\r\n\r\n    const getLogoutButton = () => {\r\n        return (<Link to=\"\" type=\"button\" onClick={startLogout} className=\"btn btn-warning\">Logout</Link>);\r\n    }\r\n\r\n    const logoutSuccess = (response) => {\r\n        console.log(\"response\", response)\r\n\r\n        setState((prevState) => {\r\n\r\n            //make a copy of the previous state\r\n            //\r\n            const tempState = { ...prevState };\r\n\r\n            //Toggle the showContent boolean\r\n            //\r\n            tempState.isLoggedIn = false;\r\n            tempState.type = \"USER_LOGGED_OUT\";\r\n\r\n            //This returned object becomes the \r\n            //new state. Re-render to follow.\r\n            //\r\n            return tempState;\r\n        });\r\n\r\n\r\n        //props.pingUserStatus();\r\n        //navigate(\"/login\");\r\n    }\r\n\r\n    const logoutFail = (err) => {\r\n        console.log(\"Logout error\", err);\r\n        navigate(\"/login\");\r\n    }\r\n\r\n    // this is invoked following successful mount\r\n    // \r\n    useEffect(() => {\r\n        console.log(\"App mounted!\");\r\n        if ((!state.isLoggedIn) && (state.type === \"USER_LOGGED_OUT\")) {\r\n            props.sendAppLogoutState(state);\r\n        }\r\n        if ((state.type === \"USER_INITIAL\") && (props.user.type === \"USER_LOGGED_IN\")) {\r\n            setState(() => {\r\n\r\n                //This returned object becomes the \r\n                //new state. Re-render to follow.\r\n                //\r\n                return props.user;\r\n            });\r\n        }\r\n    }, [state.isLoggedIn, state.type]);\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <nav\r\n                className=\"navbar navbar-expand-md navbar-dark bg-dark\"\r\n                aria-label=\"Fourth navbar example\"\r\n            >\r\n                <div className=\"container\">\r\n                    <Link to={(props.user.isLoggedIn) ? \"/\" : \"/login\"} className=\"navbar-brand\" href=\"/\">\r\n                        <img\r\n\r\n                            src=\"https://pw.sabio.la/images/Sabio.png\"\r\n                            width=\"30\"\r\n                            height=\"30\"\r\n                            className=\"d-inline-block align-top\"\r\n                            alt=\"Sabio\"\r\n                        />\r\n                    </Link>\r\n                    <button\r\n                        className=\"navbar-toggler\"\r\n                        type=\"button\"\r\n                        data-bs-toggle=\"collapse\"\r\n                        data-bs-target=\"#navbarsExample04\"\r\n                        aria-controls=\"navbarsExample04\"\r\n                        aria-expanded=\"false\"\r\n                        aria-label=\"Toggle navigation\"\r\n                    >\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarsExample04\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-md-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link to={(props.user.isLoggedIn) ? \"/\" : \"/login\"} className=\"nav-link px-2 text-white link-button\">\r\n                                    Home\r\n                                </Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link to={(props.user.isLoggedIn) ? \"/friends\" : \"/login\"} className=\"nav-link px-2 text-white link-button\">\r\n                                    Friends\r\n                                </Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link\r\n                                    to={(props.user.isLoggedIn) ? \"/jobs\" : \"/login\"}\r\n                                    // href=\"#\"\r\n                                    className=\"nav-link px-2 text-white link-button\"\r\n                                >\r\n                                    Jobs\r\n                                </Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link\r\n                                    to={(props.user.isLoggedIn) ? \"/companies\" : \"/login\"}\r\n                                    //href=\"#\"\r\n                                    className=\"nav-link px-2 text-white link-button\"\r\n                                >\r\n                                    Tech Companies\r\n                                </Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link\r\n                                    to={(props.user.isLoggedIn) ? \"/events\" : \"/login\"}\r\n                                    //href=\"#\"\r\n                                    className=\"nav-link px-2 text-white link-button\"\r\n                                >\r\n                                    Events\r\n                                </Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link\r\n                                    to={(props.user.isLoggedIn) ? \"/files\" : \"/login\"}\r\n                                    //href=\"#\"\r\n                                    className=\"nav-link px-2 text-white link-button\"\r\n                                >\r\n                                    File Uploads\r\n                                </Link>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <Link\r\n                                    to={(props.user.isLoggedIn) ? \"/politicalcandidates\" : \"/login\"}\r\n                                    //href=\"#\"\r\n                                    className=\"nav-link px-2 text-white link-button\"\r\n                                >\r\n                                    Assessment #1\r\n                                </Link>\r\n                            </li> */}\r\n                            <li className=\"nav-item\">\r\n                                <Link\r\n                                    to={(props.user.isLoggedIn) ? \"/cars\" : \"/login\"}\r\n                                    //href=\"#\"\r\n                                    className=\"nav-link px-2 text-white link-button\"\r\n                                >\r\n                                    Cars\r\n                                </Link>\r\n                            </li>                        </ul>\r\n                        <div className=\"text-end\">\r\n                            <div className=\"align-items-center mb-2 me-2 mb-lg-0 text-white text-decoration-none\">\r\n                                <label>{(props.user.isLoggedIn) ? `${props.user.firstName} ${props.user.lastName}` : \"Nobody Logged In\"}</label>\r\n                                {(props.user.isLoggedIn) ? getLogoutButton() : getLoginButton()} {(props.user.isLoggedIn) ? \"\" : getRegisterButton()}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n\r\n\r\n        </React.Fragment >\r\n    );\r\n}\r\n\r\nexport default SiteNav;","import React, { useEffect } from \"react\";\r\n\r\nfunction Home(props) {\r\n\r\n\r\n\r\n  // this is invoked following successful mount\r\n  // \r\n  useEffect(() => {\r\n    console.log(\"App mounted!\", props);\r\n    //props.pingUserStatus();\r\n  }, []\r\n  );\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container\">\r\n        <div className=\"mb-4 bg-light\">\r\n          <div className=\"container-fluid\">\r\n            <h1>Home</h1>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","//Stand-alone login page for the Sabio API\r\n//You should be able to insert this with Routes\r\n//into an existing App.jsx component without making\r\n//any changes.\r\n//\r\nimport React, { useState } from \"react\";\r\nimport * as usersService from \"../../services/usersService\";\r\n//import { useNavigate } from \"react-router-dom\";\r\nimport Toastr from \"toastr\";\r\n\r\nfunction Login(props) {\r\n\r\n  //Init the navigate hook\r\n  //\r\n  //const navigate = useNavigate();\r\n\r\n  //Build the framework for the state\r\n  //This JSON outline is exactly how a \r\n  //Login record is defined by the \r\n  //Sabio API page. \r\n  //\r\n  const [user, setUser] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    tenantId: \"\",\r\n    isLoggedIn: false\r\n  });\r\n\r\n\r\n  //Form field function to change state with\r\n  //every onChange with the input HTML elements.\r\n  //This was copied and modified from the Sabio\r\n  //Wiki example.\r\n  //Parameters:\r\n  //- e - Event object\r\n  // \r\n  const onFormFieldChange = (e) => {   //captures this event\r\n\r\n    //Assign the target of the event to the target variable\r\n    //\r\n    const target = e.target;\r\n\r\n    //This is the value to update the state with\r\n    //\r\n    const value = target.value;\r\n\r\n    //This is the name of the target. Your HTML elements\r\n    //MUST have the name property set for this to work.\r\n    //\r\n    const name = target.name;\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setUser(prevUser => {\r\n\r\n      // copy the previous state\r\n      //\r\n      const newUserObject = {\r\n        ...prevUser\r\n      };\r\n\r\n      //change the value of the copied object using the name and using bracket notation\r\n      //\r\n      newUserObject[name] = value;  //  <- bracket notation!!!!\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return newUserObject;\r\n    });\r\n  };\r\n\r\n\r\n  //Login function\r\n  //Invoked by the submit/login button.\r\n  //Makes API call to log in.\r\n  //Parameters:\r\n  //- e - Event object\r\n  // \r\n  const onLogin = (e) => {\r\n\r\n    //Prevent the page from reloading\r\n    //\r\n    e.preventDefault();\r\n\r\n    //Invoke add with the current user state\r\n    //as the payload. They both share the\r\n    //same schema.\r\n    //\r\n    usersService\r\n      .login(user)\r\n      .then(loginSuccess)\r\n      .catch(loginError);\r\n  }\r\n\r\n\r\n  //Successful login\r\n  //Parameters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  // \r\n  const loginSuccess = (response) => {\r\n\r\n    //Required to prevent error of non-use\r\n    //\r\n    console.log(\"loginSuccess:\" + response);\r\n\r\n    //get current user to build a \r\n    //new state JSON to pass to\r\n    //the App.jsx component\r\n    //getUserById will be next\r\n    //\r\n    usersService\r\n      .getCurrentUser()\r\n      .then(getSuccess)\r\n      .catch(getFail)\r\n  }\r\n\r\n  //Successful get of current user\r\n  //Parameters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  // \r\n  const getSuccess = (response) => {\r\n    console.log(\"Get Current User Success:\" + response);\r\n\r\n    //get user by id to build a \r\n    //new state JSON to pass to\r\n    //the App.jsx component\r\n    //\r\n    usersService\r\n      .getUserById(response.data.item.id)\r\n      .then(getByIdSuccess)\r\n      .catch(getByIdFail)\r\n  }\r\n\r\n  //Successful get of user by id\r\n  //Parameters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  // \r\n  const getByIdSuccess = (response) => {\r\n    console.log(\"Get Current User Success:\" + response);\r\n\r\n    //this is a sub-state of the current state of this\r\n    //login page.\r\n    //\r\n    let userState = {\r\n      firstName: response.data.item.firstName,\r\n      lastName: response.data.item.lastName,\r\n      isLoggedIn: true,\r\n      type: \"USER_LOGGED_IN\"\r\n    }\r\n\r\n    //Passing a sub-state JSON of the \r\n    //current login state object to the\r\n    //App.jsx component\r\n    //\r\n    props.sendAppLoginState(userState);\r\n  }\r\n\r\n  //Unsuccessful get of current user by id\r\n  //Parameters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  // \r\n  const getByIdFail = (err) => {\r\n    console.log(\"Get Current User By Id Fail:\" + err);\r\n  }\r\n\r\n  //Unsuccessful get of current user\r\n  //Parameters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  // \r\n  const getFail = (err) => {\r\n    console.log(\"Get Current User Fail:\" + err);\r\n  }\r\n\r\n  //Unsuccessful login\r\n  //Parameters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  // \r\n  const loginError = (err) => {\r\n\r\n    //Build error response\r\n    //\r\n    console.log(\"loginError:\" + err);\r\n    Toastr.warning(err);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <div className=\"container\">\r\n        <div className=\"p-5 mb-4 bg-light rounded-3\">\r\n          <div className=\"container-fluid py-5\"> */}\r\n\r\n      <form name=\"loginform\" className=\"text-center mt-3 position-absolute top-5 start-50 translate-middle-x\">\r\n        <h1 className=\"h3 font-weight-normal\">Please Log In</h1>\r\n        <input type=\"email\" value={user.email} id=\"email\" name=\"email\" onChange={onFormFieldChange} className=\"form-control m-1\" placeholder=\"Email address\" style={{ maxwidth: \"50px\" }} autoFocus />\r\n        <input type=\"password\" value={user.password} id=\"password\" name=\"password\" onChange={onFormFieldChange} className=\"form-control m-1\" placeholder=\"Password\" />\r\n        <input type=\"text\" value={user.tenantId} id=\"tenantId\" name=\"tenantId\" onChange={onFormFieldChange} className=\"form-control m-1\" placeholder=\"Tenant ID...will be hidden for release\" />\r\n        <p><label><a href=\"https://sabio.la/privacypolicy\">terms and conditions</a></label> </p>\r\n        <button onClick={onLogin} className=\"btn btn-primary m-1\" id=\"login\">Complete Login</button>\r\n      </form>\r\n\r\n      {/* </div>\r\n        </div>\r\n      </div> */}\r\n      {/* <Navigate></Navigate> */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","//Stand-alone register page for the Sabio API\r\n//You should be able to insert this with Routes\r\n//into an existing App.jsx component without making\r\n//any changes.\r\n//\r\nimport React, { useState } from \"react\";\r\nimport * as usersService from \"../../services/usersService\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Toastr from \"toastr\";\r\n\r\nfunction Register() {\r\n\r\n  //Init the navigate hook\r\n  //\r\n  const navigate = useNavigate();  //comes with the useNavigate hook\r\n\r\n  //Build the framework for the state\r\n  //This JSON outline is exactly how a \r\n  //register record is defined by the \r\n  //Sabio API page. \r\n  //\r\n  const [user, setUser] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    passwordConfirm: \"\",\r\n    avatarUrl: \"\",\r\n    tenantId: \"\"\r\n  });\r\n\r\n\r\n  //Form field function to change state with\r\n  //every onChange with the input HTML elements.\r\n  //This was copied and modified from the Sabio\r\n  //Wiki example.\r\n  //Parameters:\r\n  //- e - Event object\r\n  // \r\n  const onFormFieldChange = (e) => {   //captures this event\r\n\r\n    //Assign the target of the event to the target variable\r\n    //\r\n    const target = e.target;\r\n\r\n    //This is the value to update the state with\r\n    //\r\n    const value = target.value;\r\n\r\n    //This is the name of the target. Your HTML elements\r\n    //MUST have the name property set for this to work.\r\n    //\r\n    const name = target.name;\r\n\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setUser(prevUser => {\r\n\r\n      // copy the previous state\r\n      //\r\n      const newUserObject = {\r\n        ...prevUser\r\n      };\r\n\r\n      //change the value of the copied object using the name and using bracket notation\r\n      //\r\n      newUserObject[name] = value;  //  <- bracket notation!!!!\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return newUserObject;\r\n    });\r\n  };\r\n\r\n\r\n  //Register function\r\n  //Invoked by the submit/register button.\r\n  //Makes API call to log in.\r\n  //Parameters:\r\n  //- e - Event object\r\n  // \r\n  const onSubmitNewRegistrant = (e) => {\r\n\r\n    //Prevent the page from reloading\r\n    //\r\n    e.preventDefault();\r\n\r\n    //Invoke add with the current user state\r\n    //as the payload. They both share the\r\n    //same schema.\r\n    //\r\n    usersService\r\n      .add(user)\r\n      .then(addSuccess)\r\n      .catch(addError);\r\n  }\r\n\r\n\r\n  //Successful login\r\n  //Parameters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  // \r\n  const addSuccess = (response) => {\r\n\r\n    //Required to prevent error of non-use\r\n    //\r\n    console.log(\"addSuccess:\" + response);\r\n    if (!true) navigate(\"/login\"); //save this for later\r\n\r\n    //Let the user know the register was successful\r\n    //\r\n    Toastr.success(\"Congratulations! Your ID is: \" + response.data.item);\r\n  }\r\n\r\n\r\n  //Unsuccessful register\r\n  //Parameters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  // \r\n  const addError = (err) => {\r\n    console.log(\"addError:\" + err);\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <form name=\"registrationForm\" className=\"text-center mt-3 position-absolute top-5 start-50 translate-middle-x\">\r\n        <h1 className=\"h3 mb-3 font-weight-normal\">Please Register</h1>\r\n        <label>First Name {user.firstName}</label>\r\n        <input type=\"text\" className=\"form-control validation\" value={user.firstName} name=\"firstName\" id=\"firstName\" onChange={onFormFieldChange} placeholder=\"Enter first name\" />\r\n        <label>Last Name</label>\r\n        <input type=\"text\" className=\"form-control validation\" name=\"lastName\" id=\"lastName\" onChange={onFormFieldChange} placeholder=\"Enter last name\" />\r\n        <label>Email address</label>\r\n        <input type=\"email\" className=\"form-control validation\" name=\"email\" id=\"email\" onChange={onFormFieldChange} placeholder=\"name@example.com\" />\r\n        <label>Password</label>\r\n        <input type=\"password\" className=\"form-control validation\" name=\"password\" id=\"password\" onChange={onFormFieldChange} placeholder=\"Password\" />\r\n        <label>Confirl Password</label>\r\n        <input type=\"password\" className=\"form-control validation\" name=\"passwordConfirm\" id=\"passwordConfirm\" onChange={onFormFieldChange} placeholder=\"Password confirmation\" />\r\n        <label>Avatar URL</label>\r\n        <input type=\"text\" className=\"form-control validation\" name=\"avatarUrl\" id=\"avatarUrl\" onChange={onFormFieldChange} placeholder=\"Enter the URL of your avatar image file\" />\r\n        <label>Tenant ID</label>\r\n        <input type=\"text\" className=\"form-control validation\" name=\"tenantId\" id=\"tenantId\" onChange={onFormFieldChange} placeholder=\"Enter the unique tenant ID\" />\r\n        <label>I agree to the <a href=\"https://sabio.la/privacypolicy\">terms and conditions</a></label>\r\n        <input type=\"checkbox\" value=\"true\" name=\"agreement\" id=\"agreement\" className=\"form-check-input validation\" />\r\n        <p><button type=\"submit\" onClick={onSubmitNewRegistrant} className=\"btn btn-primary m-1\" id=\"submit\">Complete Registration</button>\r\n          {/* <a href=\"login.html\" className=\"btn btn-primary m-1\" role=\"button\">Login</a> */}\r\n        </p>\r\n      </form>\r\n\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","import axios from \"axios\";\r\nimport * as helper from \"./serviceHelper\";\r\n\r\nconst endpoint = \"https://api.remotebootcamp.dev/api/techcompanies\"\r\n\r\n//all service functions follow<Job>\r\n\r\n//get entity by id\r\n//done for TechCompanies\r\nconst getById = (id) => {\r\n\r\n    console.log(\"Get friend by id is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: endpoint + \"/\" + id,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);\r\n}\r\n\r\n//get entity by id\r\n//done for TechCompanies\r\nconst getBySlug = (id) => {\r\n\r\n    console.log(\"Get friend by id is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: endpoint + \"/\" + id,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);\r\n}\r\n\r\n//get all entities\r\n//done for TechCompanies\r\nconst getPage = (index, size) => {\r\n\r\n    console.log(\"Get all by entity is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: endpoint + `?pageIndex=${index}&pageSize=${size}`,  //hardcoded page zero 10 size\r\n        crossdomain: true,\r\n        withCredentials: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess);\r\n}\r\n\r\n\r\n//add entity\r\n//done for TechCompanies\r\nconst add = (payload) => {\r\n\r\n    console.log(\"Create new job is executing\");\r\n    const config = {\r\n        method: \"POST\",\r\n        url: endpoint,\r\n        data: payload,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);//.then((response) => { return { id: response.data.item, ...payload } });\r\n};\r\n\r\n//update entity by id\r\n//done for TechCompanies\r\nconst update = (id, payload) => {\r\n\r\n    console.log(\"Update blog is executing \" + endpoint + \"/\" + id);\r\n\r\n    if (!id) return;\r\n\r\n    const config = {\r\n        method: \"PUT\",\r\n        url: endpoint + \"/\" + id,\r\n        data: payload,\r\n        withCredentials: true,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);//.then((response) => { return { id: id, ...payload } });\r\n};\r\n\r\n\r\n//update entity by id\r\n//done for TechCompanies\r\nconst setStatus = (id, status) => {\r\n\r\n    console.log(\"Update blog is executing \" + endpoint + \"/\" + id);\r\n\r\n    if (!id) return;\r\n\r\n    const config = {\r\n        method: \"PUT\",\r\n        url: endpoint + \"/\" + id + \"/\" + status,\r\n        crossdomain: true,\r\n        withCredentials: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);//.then((response) => { return { id: id } });\r\n};\r\n\r\n//get all entities\r\n//done for TechCompanies\r\nconst search = (index, size, searchFor) => {\r\n\r\n    console.log(\"Get all by entity is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: endpoint + `/search?pageIndex=${index}&pageSize=${size}&q=${searchFor}`,  //hardcoded page zero 10 size\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess);\r\n}\r\n\r\n\r\nexport { getById, getBySlug, getPage, add, update, setStatus, search };","//This Company functional component displays just\r\n//one card per companies record. It receives a single\r\n//Company object from the array of companies in the\r\n//state of the parent component.\r\n//                      \r\n//There are also two local click handlers, \r\n//one for delete and one for edit, which\r\n//call to the parent functions defined in \r\n//the properties.\r\n//\r\nimport React, { useState } from \"react\";\r\n\r\n//for modal\r\n//\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nfunction Company(props) {\r\n\r\n    //set a local Company person record\r\n    const thisCompany = props.aCompany;\r\n\r\n    //state for modal\r\n    //\r\n    const [modal, setModal] = useState(false);\r\n\r\n    //toggle function, which sets te state\r\n    //\r\n    const toggle = () => setModal(!modal);\r\n\r\n    //delete click handler\r\n    //\r\n    const onLocalCompanyEdit = (e) => {\r\n        e.preventDefault()\r\n        props.editThisCompany(thisCompany, e);\r\n    }\r\n\r\n    //edit click handler \r\n    //\r\n    const onLocalCompanyDelete = (e) => {\r\n        e.preventDefault()\r\n        props.deleteThisCompany(e);\r\n        //props.deleteThisCompany();\r\n    }\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n            <div className=\"card\" style={{ width: \"18rem\" }}>\r\n                <img className=\"card-img-top\" src={thisCompany.images ? thisCompany.images[0].imageUrl : \"/favicon.ico\"} alt={thisCompany.images ? thisCompany.images[0].imageUrl : \"No Image\"} />\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{thisCompany.name}</h5>\r\n                    <p className=\"card-text\">{thisCompany.headline}</p>\r\n                    <p className=\"card-text\">{thisCompany.summary}</p>\r\n                </div>\r\n                <div style={{ alignContent: \"baseline\", padding: \"20px\" }}>\r\n                    {/* <button type=\"button\" data-page={\"/companies/\" + thisCompany.id} onClick={onLocalCompanyEdit} className={((props.pageType === \"COMPANIES_SEARCH_A\") || (props.pageType === \"COMPANIES_SEARCH_B\")) ? \"d-none\" : \"btn btn-primary btn-sm m-1 select\"}>Edit</button> */}\r\n                    <button type=\"button\" data-page={\"/companies/\" + thisCompany.id} onClick={onLocalCompanyEdit} className=\"btn btn-primary btn-sm m-1 select\">Edit</button>\r\n                    <button type=\"button\" onClick={onLocalCompanyDelete} id={thisCompany.id} className=\"btn btn-danger btn-sm m-1 delete\">Delete</button>\r\n                    <button color=\"danger\" className=\"btn btn-primary btn-sm m-1 select\" onClick={toggle}>View More</button>\r\n                </div>\r\n            </div >\r\n\r\n            <Modal isOpen={modal} toggle={toggle} >\r\n                <ModalHeader toggle={toggle}>More Information on the <b><u>{thisCompany.title}</u></b> position.</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"App\">\r\n                        <table className=\"table\">\r\n                            <tr><td>\r\n                                <img src={thisCompany.images ? thisCompany.images[0].imageUrl : \"/favicon.ico\"} alt=\"\" style={{ width: \"150px\", height: \"150px\" }}></img>\r\n                            </td><td>\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Name\r\n                            </td><td>\r\n                                    {thisCompany.name}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                headline\r\n                            </td><td>\r\n                                    {thisCompany.headline}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Summary\r\n                            </td><td>\r\n                                    {thisCompany.summary}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Profile\r\n                            </td><td>\r\n                                    {thisCompany.profile}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Slug\r\n                            </td><td>\r\n                                    {thisCompany.slug}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Contact Info\r\n                            </td><td>\r\n                                    {thisCompany.contactInformation ? thisCompany.contactInformation.data : \"No Copntact in Search\"}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Web Site\r\n                            </td><td>\r\n                                    <a target=\"_blank\" rel=\"noreferrer\" href={thisCompany.urls ? thisCompany.urls[0].url : \"No URL in Search\"}>{thisCompany.urls ? thisCompany.urls[0].url : \"No URL in Search\"}</a>\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Status\r\n                            </td><td>\r\n                                    {thisCompany.statusId}\r\n                                </td></tr>\r\n                        </table>\r\n                    </div>\r\n\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    {/* className={((props.pageType === \"COMPANIES_SEARCH_A\") || (props.pageType === \"COMPANIES_SEARCH_B\")) ? \"d-none\" : \"\"} */}\r\n                    <Button color=\"primary\" data-page={\"/companies/\" + thisCompany.id} onClick={onLocalCompanyEdit}>\r\n                        Edit\r\n                    </Button>{' '}\r\n                    <Button color=\"secondary\" onClick={toggle}>\r\n                        Cancel\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n\r\n        </React.Fragment >\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Company;\r\n//export default React.memo(Person);  <- memoize to prevent useless re-renderings\r\n//not ideal to use when utilizing callbacks, shich is what this component does","//useState is for managing state, useEffect is for the useEffect function,\r\n//which acts like the after mount function of class components, and\r\n//useCallback is for currying, at least in this component\r\n//\r\nimport React, { useState, useEffect, useCallback } from \"react\";   //add useCallback\r\n\r\nimport * as techCompaniesService from \"../../services/techCompaniesService\";\r\nimport Toastr from \"toastr\";\r\nimport Company from \"../companies/Company\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//PAGINATION imports\r\n//\r\nimport Pagination from 'rc-pagination';\r\nimport 'rc-pagination/assets/index.css';\r\nimport locale from \"rc-pagination/lib/locale/en_US\";  //pass as prop to pagination component\r\n\r\nfunction Companies() {\r\n\r\n  //init the useNavigate hook\r\n  //\r\n  const navigate = useNavigate();\r\n\r\n\r\n  //set state framework\r\n  //- Companies array will contain Company objects as defined\r\n  //  in the Sabio API Company schema.\r\n  //- companies Components array will contain the returned  \r\n  //  HTML from the company component\r\n  //- showContent - This is the toggle value for display\r\n  //  of company records. Set to false to show no companies\r\n  //  at startup. Currently set to true.\r\n  //- type - This will be either COMPANIES_VIEW or COMPANIES_EDIT.\r\n  //  When changed from COMPANIES_VIEW to COMPANIES_EDIT, the \r\n  //  page will be redirected to the NewEditcompanies.jsx page.\r\n  //- editIndex - Used to indicate the index of the companies\r\n  //  record to send to the NewEditCompanies.jsx page.\r\n  //- editUrl - Holds the generated URL for redirect to\r\n  //  the NewEditCompanies.jsx page. \r\n  //\r\n  const [pageData, setPage] = useState({\r\n    companies: [],\r\n    companiesComponents: [],\r\n    showContent: true,     //<- change this to false to have companies not show on first rendering\r\n    type: \"COMPANIES_VIEW\",\r\n    editIndex: -1,\r\n    editUrl: \"/companies/new\",\r\n    searchString: \"\",\r\n    pageIndex: 0,\r\n    pageSize: 12,\r\n    totalCount: 0,\r\n    totalPages: 0\r\n  }\r\n  );\r\n\r\n\r\n  //If hit the  enter key in the search text\r\n  //field, perform a company search\r\n  //Parameters:\r\n  //- e - the event object\r\n  //\r\n  const onFormKeyUp = (e) => {\r\n\r\n    if ((pageData.type === \"COMPANIES_SEARCH_A\") || (pageData.type === \"COMPANIES_SEARCH_B\")) return;\r\n    //I put in the extra step for readability\r\n    //\r\n    const enterKey = 13;\r\n    if (e.keyCode === enterKey) companiesSearch(e);\r\n  }\r\n\r\n  //Form field function to change state with\r\n  //every onChange with the input HTML elements.\r\n  //This was copied and modified from the Sabio\r\n  //Wiki example.\r\n  //Parameters:\r\n  //- e - Event object\r\n  // \r\n  const onFormFieldChange = (e) => {   //captures this event\r\n\r\n    //Assign the target of the event to the target variable\r\n    //\r\n    const target = e.target;\r\n\r\n    //This is the value to update the state with\r\n    //\r\n    const value = target.value;\r\n\r\n    //This is the name of the target. Your HTML elements\r\n    //MUST have the name property set for this to work.\r\n    //\r\n    const name = target.name;\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setPage(prevState => {\r\n\r\n      // copy the previous state\r\n      //\r\n      const newUserObject = {\r\n        ...prevState\r\n      };\r\n\r\n      // change the value of the copied object using the name and using bracket notation\r\n      // ONE conditional is the image, which doesn't sit at the same level with the other \r\n      // properties of the JSON\r\n\r\n      // if (name === \"url\") {\r\n      //   newUserObject.urls[0].url = value;  //  <- bracket notation!!!!\r\n      // } if (name === \"avatar\") {\r\n      //   newUserObject.images[0].imageUrl = value;  //  <- bracket notation!!!!\r\n      // } if (name === \"contact\") {\r\n      //   newUserObject.contactInformation.data = value;  //  <- bracket notation!!!!\r\n      // }\r\n      // else {\r\n      newUserObject[name] = value;  //  <- bracket notation!!!!\r\n      //}\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return newUserObject;\r\n    });\r\n  };\r\n\r\n\r\n  //populate the state with the companies array\r\n  //provided by the API call\r\n  //Parameters:\r\n  //- companiesArray - An array of company objects\r\n  //\r\n  const populateCompaniesState = (companiesArray) => {\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //If this is during a search process\r\n      //\r\n      if ((pageData.type === \"COMPANIES_SEARCH_A\") || (pageData.type === \"COMPANIES_SEARCH_B\")) {\r\n\r\n        //We know that the search returns null for urls, images, and companyInfo\r\n        //We will grab a copy of that info from previous state...\r\n        //\r\n        let companyHolder = pageDataComp.companies;\r\n        pageDataComp.companies = companiesArray.pagedItems;\r\n\r\n        for (let index = 0; index < companyHolder.length; index++) {\r\n\r\n          //\r\n          let id = companyHolder[index].id;\r\n\r\n          const idxOf = pageDataComp.companies.findIndex((company) => {\r\n            let result = false;\r\n            if (Number(company.id) === Number(id)) {\r\n              result = true;\r\n            };\r\n            return result;\r\n          });\r\n\r\n          if (idxOf >= 0) {\r\n            pageDataComp.companies[idxOf].urls = companyHolder[index].urls;\r\n            pageDataComp.companies[idxOf].images = companyHolder[index].images;\r\n            pageDataComp.companies[idxOf].contactInformation = companyHolder[index].contactInformation;\r\n            pageDataComp.companies[idxOf].tags = companyHolder[index].tags;\r\n            pageDataComp.companies[idxOf].friends = companyHolder[index].friends;\r\n          }\r\n        }\r\n        //not during search\r\n        //\r\n      } else {\r\n        pageDataComp.companies = companiesArray.pagedItems;\r\n      }\r\n\r\n      //Generate the HTML cards - this mapping will place\r\n      //one company card into each array slot\r\n      //\r\n      pageDataComp.companiesComponents = companiesArray.pagedItems.map(createCompanyCard);\r\n\r\n      //populate pagination properties\r\n      //\r\n      pageDataComp.pageIndex = companiesArray.pageIndex;\r\n      pageDataComp.pageSize = companiesArray.pageSize;\r\n      pageDataComp.totalCount = companiesArray.totalCount;\r\n      pageDataComp.totalPages = companiesArray.totalPages;\r\n\r\n\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n\r\n  };\r\n\r\n  // const restoreNullImages = (existingState, brokenState) => {\r\n\r\n  //   existingState\r\n\r\n  //   const swapImages = (company)\r\n\r\n\r\n  // }\r\n\r\n  // const restoreNullUrls = (existingState, brokenState) => {\r\n\r\n  // }\r\n\r\n  //Simple toggle for showing content\r\n  //Parameters:\r\n  //- e - This is the event object\r\n  //\r\n  const toggleShow = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //  The only thing modified will be the \r\n    //  showContent property.  \r\n    //\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.showContent = !(prevState.showContent);\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  };\r\n\r\n\r\n  //Edit company\r\n  //This is invoked from the <Company> component.\r\n  //this function updates the state and passes\r\n  //one company record from the companies array\r\n  //within the state to the NewEditCompanies.jsx.\r\n  //Parameters:\r\n  //- thisCompany - This is a company record from a\r\n  //  previous state that was passed to the <Company>\r\n  //  component. This variable is a copy that is\r\n  //  passed back and will be used used to get the \r\n  //  if of the record to be edited.\r\n  //- e - The event object pass by the <Company> component. \r\n  //\r\n  const editCompany = (thisCompany, e) => {\r\n\r\n    //Grab the target URL (including the id)\r\n    //from the event\r\n    //\r\n    const targetPage = e.currentTarget.dataset.page;\r\n    let buttonId = thisCompany.id;\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //  The type, editIndex, and editUrl\r\n    //  will be the only properties updated.\r\n    //  Updating the type will cause useEffect\r\n    //  to re-invoke. The type changing to\r\n    //  COMPANY_EDIT will cause a redirect using\r\n    //  the navigate function. See useEffect.\r\n    //\r\n    setPage(prevState => {\r\n\r\n      //Get the index of the match by company id\r\n      //\r\n      const idxOf = prevState.companies.findIndex((company) => {\r\n        let result = false;\r\n        if (Number(company.id) === Number(buttonId)) {\r\n          result = true;\r\n        };\r\n        return result;\r\n      });\r\n\r\n      if (!(idxOf >= 0)) return false;    //if no match, exit function\r\n\r\n      //Get a copy of the previous state\r\n      //\r\n      const newState = { ...prevState };\r\n\r\n      //Set type, index, and url\r\n      //\r\n      newState.type = \"COMPANY_EDIT\";      //<- editing this will cause useEffect to invoke again\r\n      newState.editIndex = idxOf;\r\n      newState.editUrl = targetPage;\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return newState;\r\n    });\r\n  }\r\n\r\n  //Delete company record\r\n  //This example utilizes useCallback, which\r\n  //wraps the function to keep it from \r\n  //re-rendering. It wasn't necessary here,\r\n  //but I used it to test it.\r\n  //Parameters:\r\n  //- (arrow function) \r\n  //- e - event passed by <Company> component\r\n  //\r\n  const deleteCompany = useCallback((e) => {\r\n\r\n    let buttonId = e.target.id;\r\n    console.log(\"deleting: \", buttonId);\r\n    //Currying step 2 - invoke the function with the \r\n    //variable you want to be curried (id in this case)\r\n    //This is assigned to a variable. At this point, the\r\n    //currying function is only partially invoked\r\n    //\r\n    const handler = getDeleteSuccessHandler(buttonId);\r\n\r\n    //Currying step 3 - Invoking \"handler\" \r\n    //upon success will complete the function\r\n    //and the id will already be inside the \r\n    //curried function\r\n    //\r\n    techCompaniesService\r\n      .setStatus(buttonId, \"2\")\r\n      .then(handler)  //<- the function that completes the currying operation\r\n      .catch(deleteError);\r\n  }, []);\r\n\r\n\r\n  //Success on delete - invoked if there are no\r\n  //errors when completing the delete using the api\r\n  //Currying example - Step 1 - define function\r\n  //Since the delete API call does not return\r\n  //the ID of the deleted record, this method\r\n  //of currying carries over the ID to be used\r\n  //when needed.\r\n  //See anything in code with //Currying in the \r\n  //comments\r\n  //\r\n  const getDeleteSuccessHandler = (id) => {\r\n\r\n    //This returned function does not get executed\r\n    //until step 3. The id will already be here \r\n    //from step 1\r\n    //\r\n    return () => {\r\n\r\n      //Display the successful delete message via Toastr\r\n      //\r\n      Toastr.success(\"The record has been deleted!\");\r\n\r\n      //set the state\r\n      //Parameters:\r\n      //- An arrow function that will provide a \r\n      //  modifed copy of the previous state.\r\n      // \r\n      setPage(prevCompanies => {\r\n\r\n        //make a copy of the previous state\r\n        //\r\n        const newCompaniesObject = {\r\n          ...prevCompanies\r\n        };\r\n\r\n        //Copy the companies as well. You must do this to\r\n        //prevent from making changed to the existing state.\r\n        // \r\n        newCompaniesObject.companies = [...newCompaniesObject.companies];\r\n\r\n        //Get the index of the match by company id\r\n        //\r\n        const idxOf = newCompaniesObject.companies.findIndex((company) => {\r\n          let result = false;\r\n          if (Number(company.id) === Number(id)) {\r\n            result = true;\r\n          };\r\n          return result;\r\n        });\r\n\r\n        //If an index was generated, remove the deleted record\r\n        //and re-generate the HTML components\r\n        //\r\n        if (idxOf >= 0) {\r\n          newCompaniesObject.companies.splice(idxOf, 1);\r\n          newCompaniesObject.companiesComponents = newCompaniesObject.companies.map(createCompanyCard);\r\n        }\r\n        //This returned object becomes the \r\n        //new state. Re-render to follow.\r\n        //\r\n        return newCompaniesObject;\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  //Unsuccessfully on delete\r\n  //This is invoked if there is an error in \r\n  //deleting the company record using the api.\r\n  //Paremeters:\r\n  //- err - This is an object returned by axios\r\n  //  based on the format from the Sabio API\r\n  //\r\n  const deleteError = (err) => {\r\n\r\n    //Build an error string\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Display the error string with Toastr\r\n    //\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n  //Mapping function to build the HTML\r\n  //for one specific company record.\r\n  //Provides the company component the\r\n  //following props:\r\n  //- aCompany.id - The company id\r\n  //- aCompany - A copy of one company\r\n  //  from the companies array in the state.\r\n  //- editCompany - The function to edit a\r\n  //  company record.\r\n  //- deleteCompany - The function to delete\r\n  //  a company record.\r\n  //\r\n  const createCompanyCard = (aCompany, index) => {\r\n    return <Company\r\n      key={aCompany.id}\r\n      aCompany={aCompany}\r\n      editThisCompany={editCompany}\r\n      deleteThisCompany={deleteCompany}\r\n      index={index}\r\n      pageType={pageData.type}\r\n    >\r\n    </Company>;\r\n  };\r\n\r\n\r\n  //Runs after mounting complete.\r\n  //Rund every time items in the second \r\n  //parameter array are changed. In this\r\n  //component, changes to pageData.type\r\n  //will cause this function to re-run.\r\n  // \r\n  useEffect(() => {\r\n\r\n    console.log(\"useEffect\");\r\n\r\n    //if the type is COMPANY_EDIT\r\n    //\r\n    if (pageData.type === \"COMPANY_EDIT\") {\r\n\r\n      //navigate to the edit page\r\n      //\r\n      const stateObj = { ...pageData.companies[pageData.editIndex], type: \"COMPANY_EDIT\", companyUrl: \"\" };\r\n      navigate(pageData.editUrl, { state: stateObj });\r\n\r\n    } else if ((pageData.type === \"COMPANIES_SEARCH_A\") || (pageData.type === \"COMPANIES_SEARCH_B\")) {\r\n\r\n      //do the search\r\n      searchForCompanies(pageData.pageIndex, pageData.pageSize, pageData.searchString);\r\n\r\n    }\r\n    else {\r\n\r\n      //otherwise, get companies\r\n      //\r\n      getCompanies(pageData.pageIndex, pageData.pageSize);\r\n    }\r\n  }, [pageData.type, pageData.pageIndex, pageData.pageSize]);\r\n  //    ^^^^^^\r\n  //re-run the above function if the items in the array change\r\n  //\r\n\r\n\r\n  //Get all companies from the api\r\n  //This function is called from the \r\n  //useEffect function. \r\n  //Parameters:\r\n  //- index - which page\r\n  //- size - how many records per page\r\n  //\r\n  const getCompanies = (index, size) => {\r\n    techCompaniesService\r\n      .getPage(index, size)\r\n      .then(getSuccess)\r\n      .catch(getError);\r\n  }\r\n\r\n\r\n  //Successfully retrieved the company records\r\n  //Parameters:\r\n  //- data - Object returned from api via axios\r\n  //\r\n  const getSuccess = (data) => {\r\n\r\n    //Since we have all the company records, \r\n    //pass the array of companies to be processed\r\n    //\r\n    populateCompaniesState(data.item);\r\n  }\r\n\r\n\r\n  //Unsuccessfully gets company records\r\n  //This is invoked if there is an error in \r\n  //retrieving of the company records using the api.\r\n  //Paremeters:\r\n  //- err - This is an object returned by axios\r\n  //  based on the format from the Sabio API\r\n  //\r\n  const getError = (err) => {\r\n\r\n    //Generate the error message\r\n    //\r\n    // let errorString = \"<ul><li>\";\r\n    // for (let i = 0; i < err.response.data.Errors.length; i++) {\r\n    //   errorString += err.response.data.Errors[i] + \"</li><li>\";\r\n    // }\r\n    // errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know there is an error using Toastr\r\n    //\r\n    Toastr.warning(err);\r\n  }\r\n\r\n\r\n  //Navigate to create a new record\r\n  //Invoked by clicking the Create New \r\n  //company button.\r\n  //Parameters:\r\n  //- e - Event object\r\n  //\r\n  const goToNew = (e) => {\r\n    e.preventDefault();\r\n    navigate(\"/companies/new\")\r\n  }\r\n\r\n\r\n  //Perform the search\r\n  //Parameters:\r\n  //- index - The base index for the paginated search\r\n  //- size -  The size of the page\r\n  //- searchString - The typed string to search on\r\n  //\r\n  const searchForCompanies = (index, size, searchString) => {\r\n    techCompaniesService\r\n      .search(index, size, searchString)\r\n      .then(searchSuccess)\r\n      .catch(searchError);\r\n  }\r\n\r\n\r\n  //Successfully searched the company records\r\n  //Parameters:\r\n  //- data - Object returned from api via axios\r\n  //\r\n  const searchSuccess = (data) => {\r\n\r\n    //Since we have all the company records from\r\n    //the search, pass the array of companies to \r\n    //be processed\r\n    //\r\n    populateCompaniesState(data.item);\r\n\r\n    //Let the user know the get was successful\r\n    //\r\n    //Toastr.success(\"Your search yielded some results!\");\r\n  }\r\n\r\n\r\n  //Unsuccessfully searched the company records\r\n  //This is invoked if there is an error in \r\n  //retrieving of the company records using the api.\r\n  //Paremeters:\r\n  //- err - This is an object returned by axios\r\n  //  based on the format from the Sabio API\r\n  //\r\n  const searchError = (err) => {\r\n\r\n    //Generate the error message\r\n    //\r\n    // let errorString = \"<ul><li>\";\r\n    // for (let i = 0; i < err.response.data.errors.length; i++) {\r\n    //   errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    // }\r\n    // errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know there is an error using Toastr\r\n    //\r\n    Toastr.warning(err);\r\n  }\r\n\r\n  //Invoked by the search button \r\n  //Begins the search functionality\r\n  //Parameters:\r\n  //- e - Event object\r\n  //\r\n  const companiesSearch = (e) => {\r\n\r\n    console.log(\"companiesSearch\", e);\r\n    if (!pageData.searchString) {\r\n      Toastr.warning(\"Please enter a search string!\");\r\n      return;\r\n    }\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //  The only thing modified will be the \r\n    //  showContent property.  \r\n    //\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Set type to search. Toggles between two searches, A and B\r\n      //to allow multiple searches in a row\r\n      //\r\n      pageDataComp.type = (pageDataComp.type === \"COMPANIES_SEARCH_A\") ? \"COMPANIES_SEARCH_B\" : \"COMPANIES_SEARCH_A\";\r\n      pageDataComp.pageIndex = 0;\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  }\r\n\r\n  //Clears the search text and \r\n  //reloads the original companies render\r\n  //Parameters:\r\n  //- e - Event object\r\n  //\r\n  const clearSearch = (e) => {\r\n\r\n    console.log(\"clearSearch\", e);\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //  The only thing modified will be the \r\n    //  showContent property.  \r\n    //\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.type = \"COMPANIES_VIEW\";\r\n      pageDataComp.searchString = \"\";\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n\r\n  }\r\n\r\n\r\n  //Invoked by the <Pagination> component\r\n  //with the onChange method.\r\n  //Parameters: \r\n  //- page - The page of the destination in the \r\n  //  pagination. If i were already on page 2, \r\n  //  then clicked \"3\" or the > link, the page\r\n  //  parameter would be 3.\r\n  //\r\n  const onPageChange = page => {\r\n    console.log(\"onChange\", page);\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.pageIndex = page - 1;\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  };\r\n\r\n\r\n  //Invoked by the <Pagination> component\r\n  //with the onChange method.\r\n  //Parameters: \r\n  //- page - The page of the destination in the \r\n  //  pagination. If i were already on page 2, \r\n  //  then clicked \"3\" or the > link, the page\r\n  //  parameter would be 3.\r\n  //\r\n  const onPageSizeChange = (e) => {\r\n    console.log(\"onPageSizeChange\", e);\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.pageSize = e.target.value;\r\n      pageDataComp.pageIndex = 0;\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container\">\r\n        <div className=\"mb-4 bg-light\">\r\n          <div className=\"container-fluid\">\r\n            <h1>Companies</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"companies row\">\r\n          <p><button onClick={toggleShow} type=\"button\" className=\"btn btn-primary btn-sm m-1\">Toggle Content Display</button>\r\n            <button onClick={goToNew} type=\"button\" className=\"btn btn-primary btn-sm m-1\">Add New Company</button>\r\n            <button id=\"clearSearch\" onClick={clearSearch} className=\"btn btn-primary btn-sm m-1\" name=\"clearSearch\">Clear search</button>\r\n            <button id=\"search\" onClick={companiesSearch} className={((pageData.type === \"COMPANIES_SEARCH_A\") || (pageData.type === \"COMPANIES_SEARCH_B\")) ? \"d-none\" : \"btn btn-primary btn-sm m-1\"} name=\"search\">Search</button>\r\n            <input type=\"text\" id=\"searchString\" onKeyUp={onFormKeyUp} onChange={onFormFieldChange} value={pageData.searchString} name=\"searchString\" style={{ width: \"260px\" }} />\r\n\r\n          </p>\r\n\r\n          <table className=\"table\"><tr><td width=\"15%\">\r\n            <Pagination\r\n              onChange={onPageChange}\r\n              current={pageData.pageIndex + 1}\r\n              total={pageData.totalCount}\r\n              locale={locale}\r\n              pageSize={pageData.pageSize}\r\n            ></Pagination>\r\n\r\n            Page Size:\r\n            <select onChange={onPageSizeChange} value={pageData.pageSize}>\r\n              <option value=\"6\">6</option>\r\n              <option value=\"12\">12</option>\r\n              <option value=\"18\">18</option>\r\n              <option value=\"24\">24</option>\r\n            </select>\r\n          </td></tr></table>\r\n\r\n          {pageData.showContent && pageData.companiesComponents}\r\n\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Companies;\r\n","//Friends API service functions\r\n//These functions make the API\r\n//calls to the Sabio API pagestate\r\n//\r\nimport axios from \"axios\";\r\nimport * as helper from \"./serviceHelper\";\r\n\r\nconst endpoint = \"https://api.remotebootcamp.dev/api/jobs\"\r\n\r\n//init the entity type\r\n//will be set on startup\r\n//entityType = \"\";\r\n\r\n//all service functions follow\r\n\r\n//get entity by id\r\n//done for Jobs\r\nconst getById = (id) => {\r\n\r\n    console.log(\"Get friend by id is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: endpoint + \"/\" + id,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess);\r\n}\r\n\r\n//get entity by id\r\n//done for Jobs\r\nconst getBySlug = (id) => {\r\n\r\n    console.log(\"Get friend by id is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: endpoint + \"/\" + id,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess);\r\n}\r\n\r\n//get all entities\r\n//done for Jobs\r\nconst getPage = (index, size) => {\r\n\r\n    console.log(\"Get all by entity is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: endpoint + `?pageIndex=${index}&pageSize=${size}`,  //hardcoded page zero 10 size\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess);\r\n}\r\n\r\n//add entity\r\n//done for Jobs\r\nconst add = (payload) => {\r\n\r\n    console.log(\"Create new job is executing\");\r\n    const config = {\r\n        method: \"POST\",\r\n        url: endpoint,\r\n        data: payload,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config); //.then((response) => { return { id: response.data.item, ...payload } });\r\n};\r\n\r\n//update entity by id\r\n//done for Jobs\r\nconst update = (id, payload) => {\r\n\r\n    console.log(\"Update blog is executing \" + endpoint + \"/\" + id);\r\n\r\n    if (!id) return;\r\n\r\n    const config = {\r\n        method: \"PUT\",\r\n        url: endpoint + \"/\" + id,\r\n        data: payload,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess);//.then((response) => { return { id: id, ...payload } });\r\n};\r\n\r\n//update entity by id\r\n//done for Jobs\r\nconst setStatus = (id, status) => {\r\n\r\n    //console.log(\"Update blog is executing \" + endpoint + \"/\" + id);\r\n\r\n    if (!id) return;\r\n\r\n    const config = {\r\n        method: \"PUT\",\r\n        url: endpoint + \"/\" + id + \"/\" + status,\r\n        crossdomain: true,\r\n        withCredentials: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);//.then(helper.onGlobalSuccess);//.then((response) => { return { id: id } });\r\n};\r\n\r\n//get all entities\r\n//done for Jobs\r\nconst search = (index, size, searchFor) => {\r\n\r\n    console.log(\"Get all by entity is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: endpoint + `/search?pageIndex=${index}&pageSize=${size}&searchTerm=${searchFor}`,  //hardcoded page zero 10 size\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess);\r\n}\r\n\r\nexport { getById, getBySlug, getPage, add, update, setStatus, search };\r\n\r\n\r\n","//This Job functional component displays just\r\n//one card per jobs record. It receives a single\r\n//job object from the array of jobs in the\r\n//state of the parent component.\r\n//                      \r\n//There are also two local click handlers, \r\n//one for delete and one for edit, which\r\n//call to the parent functions defined in \r\n//the properties.\r\n//\r\nimport React, { useState } from \"react\";\r\n\r\n//for modal\r\n//\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nfunction Job(props) {\r\n\r\n    //set a local job person record\r\n    const thisJob = props.aJob;\r\n\r\n    //state for modal\r\n    //\r\n    const [modal, setModal] = useState(false);\r\n\r\n    //toggle function, which sets te state\r\n    //\r\n    const toggle = () => setModal(!modal);\r\n\r\n    //delete click handler\r\n    //\r\n    const onLocalJobEdit = (e) => {\r\n        e.preventDefault()\r\n        props.editThisJob(thisJob, e);\r\n    }\r\n\r\n    //edit click handler \r\n    //\r\n    const onLocalJobDelete = (e) => {\r\n        e.preventDefault()\r\n        props.deleteThisJob(e);\r\n        //props.deleteThisJob();\r\n    }\r\n\r\n    //split the skills array into a comma-separated\r\n    //list\r\n    //Parameter:\r\n    //- anArray - An array of data\r\n    //-\r\n    const commaSepSkills = (anArray) => {\r\n        let aString = \"<ul>\";\r\n        for (let index = 0; index < anArray.length; index++) {\r\n            if (index === anArray.length - 1) {\r\n                aString += anArray[index].name + \"</ul>\";\r\n            } else {\r\n                aString += \"<li>\" + anArray[index].name + \"</li>\";\r\n            }\r\n        }\r\n        return aString;\r\n    }\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n            <div className=\"card\" style={{ width: \"18rem\" }}>\r\n                <img className=\"card-img-top\" src={thisJob.techCompany.images[0].imageUrl} alt={thisJob.techCompany.images[0].imageUrl} />\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{thisJob.title}</h5>\r\n                    <p className=\"card-text\">{thisJob.pay}</p>\r\n                    <p className=\"card-text\">{thisJob.summary}</p>\r\n                </div>\r\n                <div style={{ alignContent: \"baseline\", padding: \"20px\" }}>\r\n                    <button type=\"button\" data-page={\"/jobs/\" + thisJob.id} onClick={onLocalJobEdit} className=\"btn btn-primary btn-sm m-1 select\">Edit</button>\r\n                    <button type=\"button\" onClick={onLocalJobDelete} id={thisJob.id} className=\"btn btn-danger btn-sm m-1 delete\">Delete</button>\r\n                    <button color=\"danger\" className=\"btn btn-primary btn-sm m-1 select\" onClick={toggle}>View More</button>\r\n                </div>\r\n            </div >\r\n\r\n            <Modal isOpen={modal} toggle={toggle} >\r\n                <ModalHeader toggle={toggle}>More Information on the <b><u>{thisJob.title}</u></b> position.</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"App\">\r\n                        <table className=\"table\">\r\n                            <tr><td>\r\n                                <img src={thisJob.techCompany.images[0].imageUrl} alt=\"\" style={{ width: \"150px\", height: \"150px\" }}></img>\r\n                            </td><td>\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Title\r\n                            </td><td>\r\n                                    {thisJob.title}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Description\r\n                            </td><td>\r\n                                    {thisJob.description}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Summary\r\n                            </td><td>\r\n                                    {thisJob.summary}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Pay\r\n                            </td><td>\r\n                                    ${thisJob.pay}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Slug\r\n                            </td><td>\r\n                                    {thisJob.slug}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Status\r\n                            </td><td>\r\n                                    {thisJob.statusId}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Skills\r\n                            </td><td dangerouslySetInnerHTML={{ __html: commaSepSkills(thisJob.skills) }} >\r\n\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Company Name\r\n                            </td><td>\r\n                                    {thisJob.techCompany.name}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Headline\r\n                            </td><td>\r\n                                    {thisJob.techCompany.headline}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Profile\r\n                            </td><td>\r\n                                    {thisJob.techCompany.profile}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Summary\r\n                            </td><td>\r\n                                    {thisJob.techCompany.summary}\r\n                                </td></tr>\r\n                            <tr><td className=\"h5\">\r\n                                Contact\r\n                            </td><td>\r\n                                    {thisJob.techCompany.contactInformation.data}\r\n                                </td></tr>\r\n                        </table>\r\n                    </div>\r\n\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" data-page={\"/jobs/\" + thisJob.id} onClick={onLocalJobEdit}>\r\n                        Edit\r\n                    </Button>{' '}\r\n                    <Button color=\"secondary\" onClick={toggle}>\r\n                        Cancel\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n\r\n        </React.Fragment >\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Job;\r\n//export default React.memo(Person);  <- memoize to prevent useless re-renderings\r\n//not ideal to use when utilizing callbacks, shich is what this component does","//useState is for managing state, useEffect is for the useEffect function,\r\n//which acts like the after mount function of class components, and\r\n//useCallback is for currying, at least in this component\r\n//\r\nimport React, { useState, useEffect, useCallback } from \"react\";   //add useCallback\r\n\r\nimport * as jobsService from \"../../services/jobsService\";\r\nimport Toastr from \"toastr\";\r\nimport Job from \"../jobs/Job\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//PAGINATION imports\r\n//\r\nimport Pagination from 'rc-pagination';\r\nimport 'rc-pagination/assets/index.css';\r\nimport locale from \"rc-pagination/lib/locale/en_US\";  //pass as prop to pagination component\r\n\r\nfunction Jobs() {\r\n\r\n  //init the useNavigate hook\r\n  //\r\n  const navigate = useNavigate();\r\n\r\n\r\n  //set state framework\r\n  //- Jobs array will contain Job objects as defined\r\n  //  in the Sabio API Job schema.\r\n  //- jobsComponents array will contain the returned  \r\n  //  HTML from the Job component\r\n  //- showContent - This is the toggle value for display\r\n  //  of Job records. Set to false to show no Jobs\r\n  //  at startup. Currently set to true.\r\n  //- type - This will be either JOBS_VIEW or JOBS_EDIT.\r\n  //  When changed from JOBS_VIEW to JOBS_EDIT, the \r\n  //  page will be redirected to the NewEditJobs.jsx page.\r\n  //- editIndex - Used to indicate the index of the Jobs\r\n  //  record to send to the NewEditJobs.jsx page.\r\n  //- editUrl - Holds the generated URL for redirect to\r\n  //  the NewEditJobs.jsx page. \r\n  //\r\n  const [pageData, setPage] = useState({\r\n    jobs: [],\r\n    jobsComponents: [],\r\n    showContent: true,     //<- change this to false to have Jobs not show on first rendering\r\n    type: \"JOBS_VIEW\",\r\n    editIndex: -1,\r\n    editUrl: \"/jobs/new\",\r\n    searchString: \"\",\r\n    pageIndex: 0,\r\n    pageSize: 12,\r\n    totalCount: 0,\r\n    totalPages: 0,\r\n    modal: false\r\n  }\r\n  );\r\n\r\n\r\n  //If hit the  enter key in the search text\r\n  //field, perform a job search\r\n  //Parameters:\r\n  //- e - the event object\r\n  //\r\n  const onFormKeyUp = (e) => {\r\n\r\n    //I put in the extra step for readability\r\n    //\r\n    const enterKey = 13;\r\n    if (e.keyCode === enterKey) jobsSearch(e);\r\n  }\r\n\r\n  //Form field function to change state with\r\n  //every onChange with the input HTML elements.\r\n  //This was copied and modified from the Sabio\r\n  //Wiki example.\r\n  //Parameters:\r\n  //- e - Event object\r\n  // \r\n  const onFormFieldChange = (e) => {   //captures this event\r\n\r\n    //Assign the target of the event to the target variable\r\n    //\r\n    const target = e.target;\r\n\r\n    //This is the value to update the state with\r\n    //\r\n    const value = target.value;\r\n\r\n    //This is the name of the target. Your HTML elements\r\n    //MUST have the name property set for this to work.\r\n    //\r\n    const name = target.name;\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setPage(prevState => {\r\n\r\n      // copy the previous state\r\n      //\r\n      const newUserObject = {\r\n        ...prevState\r\n      };\r\n\r\n      // change the value of the copied object using the name and using bracket notation\r\n      // ONE conditional is the image, which doesn't sit at the same level with the other \r\n      // properties of the JSON\r\n\r\n      if (name === \"imageUrl\") {\r\n        newUserObject.primaryImage.imageUrl = value;  //  <- bracket notation!!!!\r\n      } else {\r\n        newUserObject[name] = value;  //  <- bracket notation!!!!\r\n      }\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return newUserObject;\r\n    });\r\n  };\r\n\r\n\r\n  //populate the state with the Jobs array\r\n  //provided by the API call\r\n  //Parameters:\r\n  //- jobsArray - An array of Job objects\r\n  //\r\n  const populateJobsState = (jobsArray) => {\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //replace the entire Jobs array\r\n      //\r\n      pageDataComp.jobs = jobsArray.pagedItems;\r\n\r\n      //Generate the HTML cards - this mapping will place\r\n      //one Job card into each array slot\r\n      //\r\n      pageDataComp.jobsComponents = jobsArray.pagedItems.map(createJobCard);\r\n\r\n      //populate pagination properties\r\n      //\r\n      pageDataComp.pageIndex = jobsArray.pageIndex;\r\n      pageDataComp.pageSize = jobsArray.pageSize;\r\n      pageDataComp.totalCount = jobsArray.totalCount;\r\n      pageDataComp.totalPages = jobsArray.totalPages;\r\n\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n\r\n  };\r\n\r\n\r\n  //Simple toggle for showing content\r\n  //Parameters:\r\n  //- e - This is the event object\r\n  //\r\n  const toggleShow = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //  The only thing modified will be the \r\n    //  showContent property.  \r\n    //\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.showContent = !(prevState.showContent);\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  };\r\n\r\n\r\n  //Edit Job\r\n  //This is invoked from the <Job> component.\r\n  //this function updates the state and passes\r\n  //one Job record from the Jobs array\r\n  //within the state to the NewEditJobs.jsx.\r\n  //Parameters:\r\n  //- thisJob - This is a Job record from a\r\n  //  previous state that was passed to the <Job>\r\n  //  component. This variable is a copy that is\r\n  //  passed back and will be used used to get the \r\n  //  if of the record to be edited.\r\n  //- e - The event object pass by the <Job> component. \r\n  //\r\n  const editJob = (thisJob, e) => {\r\n\r\n    //Grab the target URL (including the id)\r\n    //from the event\r\n    //\r\n    const targetPage = e.currentTarget.dataset.page;\r\n    let buttonId = thisJob.id;\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //  The type, editIndex, and editUrl\r\n    //  will be the only properties updated.\r\n    //  Updating the type will cause useEffect\r\n    //  to re-invoke. The type changing to\r\n    //  Job_EDIT will cause a redirect using\r\n    //  the navigate function. See useEffect.\r\n    //\r\n    setPage(prevState => {\r\n\r\n      //Get the index of the match by Job id\r\n      //\r\n      const idxOf = prevState.jobs.findIndex((job) => {\r\n        let result = false;\r\n        if (Number(job.id) === Number(buttonId)) {\r\n          result = true;\r\n        };\r\n        return result;\r\n      });\r\n\r\n      if (!(idxOf >= 0)) return false;    //if no match, exit function\r\n\r\n      //Get a copy of the previous state\r\n      //\r\n      const newState = { ...prevState };\r\n\r\n      //Set type, index, and url\r\n      //\r\n      newState.type = \"JOB_EDIT\";      //<- editing this will cause useEffect to invoke again\r\n      newState.editIndex = idxOf;\r\n      newState.editUrl = targetPage;\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return newState;\r\n    });\r\n  }\r\n\r\n  //Delete Job record\r\n  //This example utilizes useCallback, which\r\n  //wraps the function to keep it from \r\n  //re-rendering. It wasn't necessary here,\r\n  //but I used it to test it.\r\n  //Parameters:\r\n  //- (arrow function) \r\n  //- e - event passed by <Job> component\r\n  //\r\n  const deleteJob = useCallback((e) => {\r\n\r\n    let buttonId = e.target.id;\r\n    console.log(\"deleting: \", buttonId);\r\n    //Currying step 2 - invoke the function with the \r\n    //variable you want to be curried (id in this case)\r\n    //This is assigned to a variable. At this point, the\r\n    //currying function is only partially invoked\r\n    //\r\n    const handler = getDeleteSuccessHandler(buttonId);\r\n\r\n    //Currying step 3 - Invoking \"handler\" \r\n    //upon success will complete the function\r\n    //and the id will already be inside the \r\n    //curried function\r\n    //\r\n    jobsService\r\n      .setStatus(buttonId, \"2\")\r\n      .then(handler)  //<- the function that completes the currying operation\r\n      .catch(deleteError);\r\n  }, []);\r\n\r\n\r\n  //Success on delete - invoked if there are no\r\n  //errors when completing the delete using the api\r\n  //Currying example - Step 1 - define function\r\n  //Since the delete API call does not return\r\n  //the ID of the deleted record, this method\r\n  //of currying carries over the ID to be used\r\n  //when needed.\r\n  //See anything in code with //Currying in the \r\n  //comments\r\n  //\r\n  const getDeleteSuccessHandler = (id) => {\r\n\r\n    //This returned function does not get executed\r\n    //until step 3. The id will already be here \r\n    //from step 1\r\n    //\r\n    return () => {\r\n\r\n      //Display the successful delete message via Toastr\r\n      //\r\n      Toastr.success(\"The record has been deleted!\");\r\n\r\n      //set the state\r\n      //Parameters:\r\n      //- An arrow function that will provide a \r\n      //  modifed copy of the previous state.\r\n      // \r\n      setPage(prevJobs => {\r\n\r\n        //make a copy of the previous state\r\n        //\r\n        const newJobsObject = {\r\n          ...prevJobs\r\n        };\r\n\r\n        //Copy the Jobs as well. You must do this to\r\n        //prevent from making changed to the existing state.\r\n        // \r\n        newJobsObject.jobs = [...newJobsObject.jobs];\r\n\r\n        //Get the index of the match by Job id\r\n        //\r\n        const idxOf = newJobsObject.jobs.findIndex((job) => {\r\n          let result = false;\r\n          if (Number(job.id) === Number(id)) {\r\n            result = true;\r\n          };\r\n          return result;\r\n        });\r\n\r\n        //If an index was generated, remove the deleted record\r\n        //and re-generate the HTML components\r\n        //\r\n        if (idxOf >= 0) {\r\n          newJobsObject.jobs.splice(idxOf, 1);\r\n          newJobsObject.jobsComponents = newJobsObject.jobs.map(createJobCard);\r\n        }\r\n        //This returned object becomes the \r\n        //new state. Re-render to follow.\r\n        //\r\n        return newJobsObject;\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  //Unsuccessfully on delete\r\n  //This is invoked if there is an error in \r\n  //deleting the Job record using the api.\r\n  //Paremeters:\r\n  //- err - This is an object returned by axios\r\n  //  based on the format from the Sabio API\r\n  //\r\n  const deleteError = (err) => {\r\n\r\n    //Build an error string\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Display the error string with Toastr\r\n    //\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n  //Mapping function to build the HTML\r\n  //for one specific Job record.\r\n  //Provides the Job component the\r\n  //following props:\r\n  //- aJob.id - The Job id\r\n  //- aJob - A copy of one Job\r\n  //  from the Jobs array in the state.\r\n  //- editJob - The function to edit a\r\n  //  Job record.\r\n  //- deleteJob - The function to delete\r\n  //  a Job record.\r\n  //\r\n  const createJobCard = (aJob, index) => {\r\n    return <Job\r\n      key={aJob.id}\r\n      aJob={aJob}\r\n      editThisJob={editJob}\r\n      deleteThisJob={deleteJob}\r\n      index={index}\r\n    >\r\n    </Job>;\r\n  };\r\n\r\n\r\n  //Runs after mounting complete.\r\n  //Rund every time items in the second \r\n  //parameter array are changed. In this\r\n  //component, changes to pageData.type\r\n  //will cause this function to re-run.\r\n  // \r\n  useEffect(() => {\r\n\r\n    console.log(\"useEffect\");\r\n\r\n    //if the type is JOB_EDIT\r\n    //\r\n    if (pageData.type === \"JOB_EDIT\") {\r\n\r\n      //navigate to the edit page\r\n      //\r\n      const stateObj = { ...pageData.jobs[pageData.editIndex], type: \"JOB_EDIT\", jobUrl: \"\" };\r\n      navigate(pageData.editUrl, { state: stateObj });\r\n\r\n    } else if ((pageData.type === \"JOBS_SEARCH_A\") || (pageData.type === \"JOBS_SEARCH_B\")) {\r\n\r\n      //do the search\r\n      searchForJobs(pageData.pageIndex, pageData.pageSize, pageData.searchString);\r\n\r\n    }\r\n    else {\r\n\r\n      //otherwise, get Jobs\r\n      //\r\n      getJobs(pageData.pageIndex, pageData.pageSize);\r\n    }\r\n  }, [pageData.type, pageData.pageIndex, pageData.pageSize]);\r\n  //    ^^^^^^\r\n  //re-run the above function if the items in the array change\r\n  //\r\n\r\n\r\n  //Get all Jobs from the api\r\n  //This function is called from the \r\n  //useEffect function. \r\n  //Parameters:\r\n  //- index - which page\r\n  //- size - how many records per page\r\n  //\r\n  const getJobs = (index, size) => {\r\n    jobsService\r\n      .getPage(index, size)\r\n      .then(getSuccess)\r\n      .catch(getError);\r\n  }\r\n\r\n\r\n  //Successfully retrieved the Job records\r\n  //Parameters:\r\n  //- data - Object returned from api via axios\r\n  //\r\n  const getSuccess = (data) => {\r\n\r\n    //Since we have all the Job records, \r\n    //pass the array of Jobs to be processed\r\n    //\r\n    populateJobsState(data.item);\r\n  }\r\n\r\n\r\n  //Unsuccessfully gets Job records\r\n  //This is invoked if there is an error in \r\n  //retrieving of the Job records using the api.\r\n  //Paremeters:\r\n  //- err - This is an object returned by axios\r\n  //  based on the format from the Sabio API\r\n  //\r\n  const getError = (err) => {\r\n\r\n    //Generate the error message\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.Errors.length; i++) {\r\n      errorString += err.response.data.Errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know there is an error using Toastr\r\n    //\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  //Navigate to create a new record\r\n  //Invoked by clicking the Create New \r\n  //Job button.\r\n  //Parameters:\r\n  //- e - Event object\r\n  //\r\n  const goToNew = (e) => {\r\n    e.preventDefault();\r\n    navigate(\"/jobs/new\")\r\n  }\r\n\r\n\r\n  //Perform the search\r\n  //Parameters:\r\n  //- index - The base index for the paginated search\r\n  //- size -  The size of the page\r\n  //- searchString - The typed string to search on\r\n  //\r\n  const searchForJobs = (index, size, searchString) => {\r\n    jobsService\r\n      .search(index, size, searchString)\r\n      .then(searchSuccess)\r\n      .catch(searchError);\r\n  }\r\n\r\n\r\n  //Successfully searched the Job records\r\n  //Parameters:\r\n  //- data - Object returned from api via axios\r\n  //\r\n  const searchSuccess = (data) => {\r\n\r\n    //Since we have all the Job records from\r\n    //the search, pass the array of Jobs to \r\n    //be processed\r\n    //\r\n    populateJobsState(data.item);\r\n\r\n    //Let the user know the get was successful\r\n    //\r\n    //Toastr.success(\"Your search yielded some results!\");\r\n  }\r\n\r\n\r\n  //Unsuccessfully searched the Job records\r\n  //This is invoked if there is an error in \r\n  //retrieving of the Job records using the api.\r\n  //Paremeters:\r\n  //- err - This is an object returned by axios\r\n  //  based on the format from the Sabio API\r\n  //\r\n  const searchError = (err) => {\r\n\r\n    //Generate the error message\r\n    //\r\n    // let errorString = \"<ul><li>\";\r\n    // for (let i = 0; i < err.response.data.errors.length; i++) {\r\n    //   errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    // }\r\n    // errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know there is an error using Toastr\r\n    //\r\n    Toastr.warning(err);\r\n  }\r\n\r\n  //Invoked by the search button \r\n  //Begins the search functionality\r\n  //Parameters:\r\n  //- e - Event object\r\n  //\r\n  const jobsSearch = (e) => {\r\n\r\n    console.log(\"jobsSearch\", e);\r\n    if (!pageData.searchString) {\r\n      Toastr.warning(\"Please enter a search string!\");\r\n      return;\r\n    }\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //  The only thing modified will be the \r\n    //  showContent property.  \r\n    //\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Set type to search. Toggles between two searches, A and B\r\n      //to allow multiple searches in a row\r\n      //\r\n      pageDataComp.type = (pageDataComp.type === \"JOBS_SEARCH_A\") ? \"JOBS_SEARCH_B\" : \"JOBS_SEARCH_A\";\r\n      pageDataComp.pageIndex = 0;\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  }\r\n\r\n  //Clears the search text and \r\n  //reloads the original Jobs render\r\n  //Parameters:\r\n  //- e - Event object\r\n  //\r\n  const clearSearch = (e) => {\r\n\r\n    console.log(\"clearSearch\", e);\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //  The only thing modified will be the \r\n    //  showContent property.  \r\n    //\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.type = \"JOBS_VIEW\";\r\n      pageDataComp.searchString = \"\";\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n\r\n  }\r\n\r\n\r\n  //Invoked by the <Pagination> component\r\n  //with the onChange method.\r\n  //Parameters: \r\n  //- page - The page of the destination in the \r\n  //  pagination. If i were already on page 2, \r\n  //  then clicked \"3\" or the > link, the page\r\n  //  parameter would be 3.\r\n  //\r\n  const onPageChange = page => {\r\n    console.log(\"onChange\", page);\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.pageIndex = page - 1;\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  };\r\n\r\n\r\n  //Invoked by the <Pagination> component\r\n  //with the onChange method.\r\n  //Parameters: \r\n  //- page - The page of the destination in the \r\n  //  pagination. If i were already on page 2, \r\n  //  then clicked \"3\" or the > link, the page\r\n  //  parameter would be 3.\r\n  //\r\n  const onPageSizeChange = (e) => {\r\n    console.log(\"onPageSizeChange\", e);\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.pageSize = e.target.value;\r\n      pageDataComp.pageIndex = 0;\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container\">\r\n        <div className=\"mb-4 bg-light\">\r\n          <div className=\"container-fluid\">\r\n            <h1>Jobs</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"jobs row\">\r\n          <p><button onClick={toggleShow} type=\"button\" className=\"btn btn-primary btn-sm m-1\">Toggle Content Display</button>\r\n            <button onClick={goToNew} type=\"button\" className=\"btn btn-primary btn-sm m-1\">Add New Job</button>\r\n            <button id=\"clearSearch\" onClick={clearSearch} className=\"btn btn-primary btn-sm m-1\" name=\"clearSearch\">Clear search</button>\r\n            <button id=\"search\" onClick={jobsSearch} className=\"btn btn-primary btn-sm m-1\" name=\"search\">Search</button>\r\n            <input type=\"text\" id=\"searchString\" onKeyUp={onFormKeyUp} onChange={onFormFieldChange} value={pageData.searchString} name=\"searchString\" style={{ width: \"260px\" }} />\r\n\r\n          </p>\r\n\r\n          <table className=\"table\"><tr><td width=\"15%\">\r\n            <Pagination\r\n              onChange={onPageChange}\r\n              current={pageData.pageIndex + 1}\r\n              total={pageData.totalCount}\r\n              locale={locale}\r\n              pageSize={pageData.pageSize}\r\n            ></Pagination>\r\n\r\n            Page Size:\r\n            <select onChange={onPageSizeChange} value={pageData.pageSize}>\r\n              <option value=\"6\">6</option>\r\n              <option value=\"12\">12</option>\r\n              <option value=\"18\">18</option>\r\n              <option value=\"24\">24</option>\r\n            </select>\r\n          </td></tr></table>\r\n\r\n          {pageData.showContent && pageData.jobsComponents}\r\n\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Jobs;\r\n","//Friends API service functions\r\n//These functions make the API\r\n//calls to the Sabio API page\r\n//\r\nimport axios from \"axios\";\r\nimport * as helper from \"./serviceHelper\";\r\n\r\nconst entity = \"https://api.remotebootcamp.dev/api/friends\"\r\n\r\n//Get friend by id\r\n//Parameters:\r\n//- id - Friend Id\r\n//\r\nconst getById = (id) => {\r\n\r\n    const config = {\r\n        method: \"GET\",\r\n        url: entity + \"/\" + id,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess);\r\n}\r\n\r\n//Get friend by slug\r\n//Parameters:\r\n//- id - Friend slug\r\n//\r\nconst getBySlug = (id) => {\r\n\r\n    const config = {\r\n        method: \"GET\",\r\n        url: entity + \"/\" + id,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess);\r\n}\r\n\r\n\r\n//Get page of friends\r\n//CURRENTLY - hardcoded with an index of 0 and a page size of 10\r\n//\r\nconst getPage = (index, size) => {\r\n\r\n    const config = {\r\n        method: \"GET\",\r\n        url: `${entity}?pageIndex=${index}&pageSize=${size}`,  //hardcoded page zero 10 size\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess);\r\n}\r\n\r\n\r\n//Delete friend by Id\r\n//Parameters:\r\n//- id - Friend Id\r\n//\r\nconst deleteById = (id) => {\r\n\r\n    if (!id) return;\r\n    if (isNaN(id)) return;\r\n\r\n    const config = {\r\n        method: \"DELETE\",\r\n        url: entity + \"/\" + id,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then((response) => { return { id: id, response: response } });\r\n};\r\n\r\n//Add friend\r\n//Parameters:\r\n//- payload - Friend JSON\r\n//\r\nconst add = (payload) => {\r\n\r\n    const config = {\r\n        method: \"POST\",\r\n        url: entity,\r\n        data: payload,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);//.then((response) => { return { id: response.item, ...payload } }); //.then(helper.onGlobalSuccess);//.then((response) => { return { id: response.data.item, ...payload } });\r\n};\r\n\r\n//Update friend record\r\n//Parameters:\r\n//- id - Friend Id\r\n//- payload - Friend JSON\r\n//\r\nconst update = (id, payload) => {\r\n\r\n    if (!id) return;\r\n\r\n    const config = {\r\n        method: \"PUT\",\r\n        url: entity + \"/\" + id,\r\n        data: payload,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess);//.then((response) => { return { id: id, ...payload } });\r\n};\r\n\r\n\r\n//Set friend status\r\n//Parameters:\r\n//- id - Friend Id\r\n//- status - New status\r\n//\r\nconst setStatus = (id, status) => {\r\n\r\n    if (!id) return;\r\n\r\n    const config = {\r\n        method: \"PUT\",\r\n        url: entity + \"/\" + id + \"/\" + status,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess); //.then((response) => { return { id: id, ...payload } });\r\n};\r\n\r\n//Search friend record\r\n//Parameters:\r\n//- searchFor - The text to base the search off of\r\n//\r\nconst search = (index, size, searchFor) => {\r\n\r\n    const config = {\r\n        method: \"GET\",\r\n        url: `${entity}/search?pageIndex=${index}&pageSize=${size}&q=${searchFor}`,  //hardcoded page zero 10 size\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config).then(helper.onGlobalSuccess);\r\n}\r\n\r\n//Must export to import\r\n//\r\nexport { getById, getBySlug, getPage, deleteById, add, update, setStatus, search };\r\n\r\n","//This Person functional component displays just\r\n//one card per friend record. It receives a single\r\n//friend object from the array of friends in the\r\n//state of the parent component.\r\n//                      \r\n//There are also two local click handlers, \r\n//one for delete and one for edit, which\r\n//call to the parent functions defined in \r\n//the properties.\r\n//\r\nimport React from \"react\";\r\n\r\nfunction Person(props) {\r\n\r\n    //set a local friend person record\r\n    const thisPerson = props.aPerson;\r\n\r\n    //delete click handler\r\n    //\r\n    const onLocalPersonDelete = (e) => {\r\n        props.deleteThisFriend(thisPerson, e);\r\n    }\r\n\r\n    //edit click handler\r\n    //\r\n    const onLocalPersonEdit = (e) => {\r\n        props.editThisFriend(thisPerson, e);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"card\" style={{ width: \"18rem\" }}>\r\n            <img className=\"card-img-top\" src={thisPerson.primaryImage.imageUrl} alt={thisPerson.primaryImage.imageUrl} />\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{thisPerson.title}</h5>\r\n                <p className=\"card-text\">{thisPerson.headline}</p>\r\n                <p className=\"card-text\">{thisPerson.summary}</p>\r\n            </div>\r\n            <div style={{ alignContent: \"baseline\", padding: \"40px\" }}>\r\n                <button type=\"button\" data-page={\"/friends/\" + thisPerson.id} onClick={onLocalPersonEdit} className=\"btn btn-primary btn-sm m-1 select\">Edit</button>\r\n                <button type=\"button\" onClick={onLocalPersonDelete} id={thisPerson.id} className=\"btn btn-danger btn-sm m-1 delete\">Delete</button>\r\n            </div>\r\n        </div >\r\n    );\r\n\r\n}\r\n\r\nexport default Person;\r\n//export default React.memo(Person);  <- memoize to prevent useless re-renderings\r\n//not ideal to use when utilizing callbacks, shich is what this component does","//Friends functional component is called from App.jsx from\r\n//a route with /friends as the identifier. This component\r\n//displays a listing of friends in Bootstrap card format.\r\n//Friends has one child component, Person, that is called \r\n//via the element tag, <Person>, and one child component\r\n//that is redirected to at either /friends/new or \r\n//friends/friendId. Partial state is passed to Person via\r\n//props, while partial state is passed to NewEditFriends.jsx\r\n//through the Navigate function.\r\n//\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport * as friendsService from \"../../services/friendsService\";\r\nimport Toastr from \"toastr\";\r\nimport Person from \"../person/Person\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\n//PAGINATION imports\r\n//\r\nimport Pagination from 'rc-pagination';\r\nimport 'rc-pagination/assets/index.css';\r\nimport locale from \"rc-pagination/lib/locale/en_US\";  //pass as prop to pagination component\r\n\r\nfunction Friends() {\r\n\r\n  //init the useNavigate hook\r\n  //\r\n  const navigate = useNavigate();\r\n\r\n\r\n  //set state framework\r\n  //- friends array will contain friend objects as defined\r\n  //  in the Sabio API friend schema.\r\n  //- peopleComponents array will contain the returned  \r\n  //  HTML from the Person component\r\n  //- showContent - This is the toggle value for display\r\n  //  of friend records. Set to false to show no friends\r\n  //  at startup. Currently set to true.\r\n  //- type - This will be either FRIENDS_VIEW or FRIENDS_EDIT.\r\n  //  When changed from FRIENDS_VIEW to FRIENDS_EDIT, the \r\n  //  page will be redirected to the NewEditFriends.jsx page.\r\n  //- editIndex - Used to indicate the index of the friends\r\n  //  record to send to the NewEditFriends.jsx page.\r\n  //- editUrl - Holds the generated URL for redirect to\r\n  //  the NewEditFriends.jsx page. \r\n  //\r\n  const [pageData, setPage] = useState({\r\n    friends: [],\r\n    peopleComponents: [],\r\n    showContent: true,     //<- change this to false to have friends not show on first rendering\r\n    type: \"FRIENDS_VIEW\",\r\n    editIndex: -1,\r\n    editUrl: \"/friends/new\",\r\n    searchString: \"\",\r\n    pageIndex: 0,\r\n    pageSize: 10,\r\n    totalCount: 0,\r\n    totalPages: 0\r\n  });\r\n\r\n\r\n  //Form field function to change state with\r\n  //every onChange with the input HTML elements.\r\n  //This was copied and modified from the Sabio\r\n  //Wiki example.\r\n  //Parameters:\r\n  //- e - Event object\r\n  // \r\n  const onFormFieldChange = (e) => {   //captures this event\r\n\r\n    //Assign the target of the event to the target variable\r\n    //\r\n    const target = e.target;\r\n\r\n    //This is the value to update the state with\r\n    //\r\n    const value = target.value;\r\n\r\n    //This is the name of the target. Your HTML elements\r\n    //MUST have the name property set for this to work.\r\n    //\r\n    const name = target.name;\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setPage(prevState => {\r\n\r\n      // copy the previous state\r\n      //\r\n      const newUserObject = {\r\n        ...prevState\r\n      };\r\n\r\n      //change the value of the copied object using the name and using bracket notation\r\n      //ONE conditional is the image, which doesn't sit at the same level with the other \r\n      //properties of the JSON\r\n      //\r\n      if (name === \"imageUrl\") {\r\n        newUserObject.primaryImage.imageUrl = value;  //  <- bracket notation!!!!\r\n      } else {\r\n        newUserObject[name] = value;  //  <- bracket notation!!!!\r\n      }\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return newUserObject;\r\n    });\r\n  };\r\n\r\n\r\n  //populate the state with the friends array\r\n  //provided by the API call\r\n  //Parameters:\r\n  //- friendsArray - An array of friend objects\r\n  //\r\n  const populateFriendsState = (friendsArray) => {\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //replace the entire friends array\r\n      //\r\n      pageDataComp.friends = friendsArray.pagedItems;\r\n\r\n      //Generate the HTML cards - this mapping will place\r\n      //one friend card into each array slot\r\n      //\r\n      pageDataComp.peopleComponents = friendsArray.pagedItems.map(createFriendCard);\r\n\r\n      //populate pagination properties\r\n      //\r\n      pageDataComp.pageIndex = friendsArray.pageIndex;\r\n      pageDataComp.pageSize = friendsArray.pageSize;\r\n      pageDataComp.totalCount = friendsArray.totalCount;\r\n      pageDataComp.totalPages = friendsArray.totalPages;\r\n\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n\r\n  };\r\n\r\n\r\n  //Simple toggle for showing content\r\n  //Parameters:\r\n  //- e - This is the event object\r\n  //\r\n  const toggleShow = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //  The only thing modified will be the \r\n    //  showContent property.  \r\n    //\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.showContent = !(prevState.showContent);\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  };\r\n\r\n\r\n  //Edit friend\r\n  //This is invoked from the <Person> component.\r\n  //this function updates the state and passes\r\n  //one friend record from the friends array\r\n  //within the state to the NewEditFriends.jsx.\r\n  //Parameters:\r\n  //- thisPerson - This is a friend record from a\r\n  //  previous state that was passed to the <Person>\r\n  //  component. This variable is a copy that is\r\n  //  passed back and will be used used to get the \r\n  //  if of the record to be edited.\r\n  //- e - The event object pass by the <Person> component. \r\n  //\r\n  const editFriend = (thisPerson, e) => {\r\n\r\n    //Grab the target URL (including the id)\r\n    //from the event\r\n    //\r\n    const targetPage = e.currentTarget.dataset.page;\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //  The type, editIndex, and editUrl\r\n    //  will be the only properties updated.\r\n    //  Updating the type will cause useEffect\r\n    //  to re-invoke. The type changing to\r\n    //  FRIEND_EDIT will cause a redirect using\r\n    //  the navigate function. See useEffect.\r\n    //\r\n    setPage(prevState => {\r\n\r\n      //Get the index of the match by friend id\r\n      //\r\n      const idxOf = prevState.friends.findIndex((person) => {\r\n        let result = false;\r\n        if (Number(person.id) === Number(thisPerson.id)) {\r\n          result = true;\r\n        };\r\n        return result;\r\n      });\r\n\r\n      if (!(idxOf >= 0)) return false;    //if no match, exit function\r\n\r\n      //Get a copy of the previous state\r\n      //\r\n      const newState = { ...prevState };\r\n\r\n      //Set type, index, and url\r\n      //\r\n      newState.type = \"FRIEND_EDIT\";      //<- editing this will cause useEffect to invoke again\r\n      newState.editIndex = idxOf;\r\n      newState.editUrl = targetPage;\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return newState;\r\n    });\r\n  }\r\n\r\n  //Delete friend record\r\n  //This example utilizes useCallback, which\r\n  //wraps the function to keep it from \r\n  //re-rendering. It wasn't necessary here,\r\n  //but I used it to test it.\r\n  //Parameters:\r\n  //- (arrow function) \r\n  //- person - This is a friend record from a\r\n  //  previous state that was passed to the <Person>\r\n  //  component. This variable is a copy that is\r\n  //  passed back and will be used used to get the \r\n  //  if of the record to be deleted.\r\n  //- e - event passed by <Person> component\r\n  //\r\n  const deleteFriend = useCallback((person, e) => {\r\n\r\n    let buttonId = e.target.id;\r\n\r\n    //Currying step 2 - invoke the function with the \r\n    //variable you want to be curried (id in this case)\r\n    //This is assigned to a variable. At this point, the\r\n    //currying function is only partially invoked\r\n    //\r\n    const handler = getDeleteSuccessHandler(buttonId);\r\n\r\n    //Currying step 3 - Invoking \"handler\" \r\n    //upon success will complete the function\r\n    //and the id will already be inside the \r\n    //curried function\r\n    //\r\n    friendsService\r\n      .deleteById(buttonId)\r\n      .then(handler)  //<- the function that completes the currying operation\r\n      .catch(deleteError);\r\n  }, []);\r\n\r\n\r\n  //Success on delete - invoked if there are no\r\n  //errors when completing the delete using the api\r\n  //Currying example - Step 1 - define function\r\n  //Since the delete API call does not return\r\n  //the ID of the deleted record, this method\r\n  //of currying carries over the ID to be used\r\n  //when needed.\r\n  //See anything in code with //Currying in the \r\n  //comments\r\n  //\r\n  const getDeleteSuccessHandler = (id) => {\r\n\r\n    //This returned function does not get executed\r\n    //until step 3. The id will already be here \r\n    //from step 1\r\n    //\r\n    return () => {\r\n\r\n      //Display the successful delete message via Toastr\r\n      //\r\n      Toastr.success(\"The record has been deleted!\");\r\n\r\n      //set the state\r\n      //Parameters:\r\n      //- An arrow function that will provide a \r\n      //  modifed copy of the previous state.\r\n      // \r\n      setPage(prevFriends => {\r\n\r\n        //make a copy of the previous state\r\n        //\r\n        const newFriendsObject = {\r\n          ...prevFriends\r\n        };\r\n\r\n        //Copy the friends as well. You must do this to\r\n        //prevent from making changed to the existing state.\r\n        // \r\n        newFriendsObject.friends = [...newFriendsObject.friends];\r\n\r\n        //Get the index of the match by friend id\r\n        //\r\n        const idxOf = newFriendsObject.friends.findIndex((person) => {\r\n          let result = false;\r\n          if (Number(person.id) === Number(id)) {\r\n            result = true;\r\n          };\r\n          return result;\r\n        });\r\n\r\n        //If an index was generated, remove the deleted record\r\n        //and re-generate the HTML components\r\n        //\r\n        if (idxOf >= 0) {\r\n          newFriendsObject.friends.splice(idxOf, 1);\r\n          newFriendsObject.peopleComponents = newFriendsObject.friends.map(createFriendCard);\r\n        }\r\n        //This returned object becomes the \r\n        //new state. Re-render to follow.\r\n        //\r\n        return newFriendsObject;\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  //Unsuccessfully on delete\r\n  //This is invoked if there is an error in \r\n  //deleting the friend record using the api.\r\n  //Paremeters:\r\n  //- err - This is an object returned by axios\r\n  //  based on the format from the Sabio API\r\n  //\r\n  const deleteError = (err) => {\r\n\r\n    //Build an error string\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Display the error string with Toastr\r\n    //\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  //Mapping function to build the HTML\r\n  //for one specific friend record.\r\n  //Provides the Person component the\r\n  //following props:\r\n  //- aFriend.id - The friend id\r\n  //- aFriend - A copy of one friend\r\n  //  from the friends array in the state.\r\n  //- editFriend - The function to edit a\r\n  //  friend record.\r\n  //- deleteFriend - The function to delete\r\n  //  a friend record.\r\n  //\r\n  const createFriendCard = (aFriend) => {\r\n    return <Person\r\n      key={aFriend.id}\r\n      aPerson={aFriend}\r\n      editThisFriend={editFriend}\r\n      deleteThisFriend={deleteFriend}>\r\n    </Person>;\r\n  };\r\n\r\n\r\n  //Runs after mounting complete.\r\n  //Rund every time items in the second \r\n  //parameter array are changed. In this\r\n  //component, changes to pageData.type\r\n  //will cause this function to re-run.\r\n  // \r\n  useEffect(() => {\r\n\r\n    console.log(\"useEffect\");\r\n\r\n    //props.pingUserStatus();\r\n\r\n    //if the type is FRIEND_EDIT\r\n    //\r\n    if (pageData.type === \"FRIEND_EDIT\") {\r\n\r\n      //navigate to the edit page\r\n      //\r\n      const stateObj = { ...pageData.friends[pageData.editIndex], type: \"FRIEND_EDIT\", friendUrl: \"\" };\r\n      navigate(pageData.editUrl, { state: stateObj });\r\n\r\n    } else if ((pageData.type === \"FRIENDS_SEARCH_A\") || (pageData.type === \"FRIENDS_SEARCH_B\")) {\r\n\r\n      //do the search\r\n      searchForFriends(pageData.pageIndex, pageData.pageSize, pageData.searchString);\r\n\r\n    }\r\n    else {\r\n\r\n      //otherwise, get friends\r\n      //\r\n      getFriends(pageData.pageIndex, pageData.pageSize);\r\n    }\r\n  }, [pageData.type, pageData.pageIndex, pageData.pageSize]);\r\n  //    ^^^^^^\r\n  //re-run the above function if the items in the array change\r\n  //\r\n\r\n\r\n  //Get all friends from the api\r\n  //This function is called from the \r\n  //useEffect function. \r\n  //\r\n  const getFriends = (index, size) => {\r\n    friendsService\r\n      .getPage(index, size)\r\n      .then(getSuccess)\r\n      .catch(getError);\r\n  }\r\n\r\n\r\n  //Successfully retrieved the friend records\r\n  //Parameters:\r\n  //- data - Object returned from api via axios\r\n  //\r\n  const getSuccess = (data) => {\r\n\r\n    //Since we have all the friend records, \r\n    //pass the array of friends to be processed\r\n    //\r\n    populateFriendsState(data.item);\r\n\r\n    //Let the user know the get was successful\r\n    //\r\n    //Toastr.success(\"Your friends list has rendered!\");\r\n  }\r\n\r\n\r\n  //Unsuccessfully gets friend records\r\n  //This is invoked if there is an error in \r\n  //retrieving of the friend records using the api.\r\n  //Paremeters:\r\n  //- err - This is an object returned by axios\r\n  //  based on the format from the Sabio API\r\n  //\r\n  const getError = (err) => {\r\n\r\n    //Generate the error message\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.Errors.length; i++) {\r\n      errorString += err.response.data.Errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know there is an error using Toastr\r\n    //\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  //Navigate to create a new record\r\n  //Invoked by clicking the Create New \r\n  //Friend button.\r\n  //Parameters:\r\n  //- e - Event object\r\n  //\r\n  const goToNew = (e) => {\r\n    e.preventDefault();\r\n    navigate(\"/friends/new\")\r\n  }\r\n\r\n\r\n  //Perform the search\r\n  //Parameters:\r\n  //- index - The base index for the paginated search\r\n  //- size -  The size of the page\r\n  //- searchString - The typed string to search on\r\n  //\r\n  const searchForFriends = (index, size, searchString) => {\r\n    friendsService\r\n      .search(index, size, searchString)\r\n      .then(searchSuccess)\r\n      .catch(searchError);\r\n  }\r\n\r\n\r\n  //Successfully searched the friend records\r\n  //Parameters:\r\n  //- data - Object returned from api via axios\r\n  //\r\n  const searchSuccess = (data) => {\r\n\r\n    //Since we have all the friend records from\r\n    //the search, pass the array of friends to \r\n    //be processed\r\n    //\r\n    populateFriendsState(data.item);\r\n\r\n    //Let the user know the get was successful\r\n    //\r\n    Toastr.success(\"Your search yielded some results!\");\r\n  }\r\n\r\n\r\n  //Unsuccessfully searched the friend records\r\n  //This is invoked if there is an error in \r\n  //retrieving of the friend records using the api.\r\n  //Paremeters:\r\n  //- err - This is an object returned by axios\r\n  //  based on the format from the Sabio API\r\n  //\r\n  const searchError = (err) => {\r\n\r\n    //Generate the error message\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know there is an error using Toastr\r\n    //\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n  //Invoked by the search button \r\n  //Begins the search functionality\r\n  //Parameters:\r\n  //- e - Event object\r\n  //\r\n  const friendsSearch = (e) => {\r\n\r\n    console.log(\"friendsSearch\", e);\r\n    if (!pageData.searchString) {\r\n      Toastr.warning(\"Please enter a search string!\");\r\n      return;\r\n    }\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //  The only thing modified will be the \r\n    //  showContent property.  \r\n    //\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Set type to search. Toggles between two searches, A and B\r\n      //to allow multiple searches in a row\r\n      //\r\n      pageDataComp.type = (pageDataComp.type === \"FRIENDS_SEARCH_A\") ? \"FRIENDS_SEARCH_B\" : \"FRIENDS_SEARCH_A\";\r\n      pageDataComp.pageIndex = 0;\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n  //Clears the search text and \r\n  //reloads the original friends render\r\n  //Parameters:\r\n  //- e - Event object\r\n  //\r\n  const clearSearch = (e) => {\r\n\r\n    console.log(\"clearSearch\", e);\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //  The only thing modified will be the \r\n    //  showContent property.  \r\n    //\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.type = \"FRIENDS_VIEW\";\r\n      pageDataComp.searchString = \"\";\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n\r\n  }\r\n\r\n\r\n  //Invoked by the <Pagination> component\r\n  //with the onChange method.\r\n  //Parameters: \r\n  //- page - The page of the destination in the \r\n  //  pagination. If i were already on page 2, \r\n  //  then clicked \"3\" or the > link, the page\r\n  //  parameter would be 3.\r\n  //\r\n  const onPageChange = page => {\r\n    console.log(\"onChange\", page);\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.pageIndex = page - 1;\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  };\r\n\r\n\r\n  //Invoked by the <Pagination> component\r\n  //with the onChange method.\r\n  //Parameters: \r\n  //- page - The page of the destination in the \r\n  //  pagination. If i were already on page 2, \r\n  //  then clicked \"3\" or the > link, the page\r\n  //  parameter would be 3.\r\n  //\r\n  const onPageSizeChange = (e) => {\r\n    console.log(\"onPageSizeChange\", e);\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.pageSize = e.target.value;\r\n      pageDataComp.pageIndex = 0;\r\n      //pageDataComp.type = \"FRIENDS_VIEW\";\r\n      //pageDataComp.searchString = \"\";\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container\">\r\n        <div className=\"mb-4 bg-light\">\r\n          <div className=\"container-fluid\">\r\n            <h1>Friends</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"friends row\">\r\n          <p><button onClick={toggleShow} type=\"button\" className=\"btn btn-primary btn-sm m-1\">Toggle Content Display</button>\r\n            <button onClick={goToNew} type=\"button\" className=\"btn btn-primary btn-sm m-1\">Add New Friend</button>\r\n\r\n            <button id=\"clearSearch\" onClick={clearSearch} className=\"btn btn-primary btn-sm m-1\" name=\"clearSearch\">Clear search</button>\r\n            <button id=\"search\" onClick={friendsSearch} className=\"btn btn-primary btn-sm m-1\" name=\"search\">Search</button>\r\n            <input type=\"text\" id=\"searchString\" onChange={onFormFieldChange} value={pageData.searchString} name=\"searchString\" style={{ width: \"260px\" }} />\r\n\r\n          </p>\r\n\r\n          <table className=\"table\"><tr><td width=\"15%\">\r\n            <Pagination\r\n              onChange={onPageChange}\r\n              current={pageData.pageIndex + 1}\r\n              total={pageData.totalCount}\r\n              locale={locale}\r\n              pageSize={pageData.pageSize}\r\n            ></Pagination>\r\n\r\n            Page Size:\r\n            <select onChange={onPageSizeChange} value={pageData.pageSize}>\r\n              <option value=\"5\">5</option>\r\n              <option value=\"10\">10</option>\r\n              <option value=\"15\">15</option>\r\n              <option value=\"20\">20</option>\r\n            </select>\r\n          </td></tr></table>\r\n\r\n          {pageData.showContent && pageData.peopleComponents}\r\n\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Friends;\r\n","import axios from \"axios\";\r\n\r\n//create the entitiesService object\r\n\r\nconst endpoint = \"https://api.remotebootcamp.dev/api/events\"\r\n\r\n\r\n//all service functions follow\r\n\r\n//get entity by id\r\n//done for events\r\nconst getById = (id) => {\r\n\r\n    console.log(\"Get friend by id is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: endpoint + \"/\" + id,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);\r\n}\r\n\r\n//get entity by id\r\n//done for events\r\nconst getBySlug = (id) => {\r\n\r\n    console.log(\"Get friend by id is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: endpoint + \"/\" + id,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);\r\n}\r\n\r\n//get all entities\r\n//done for events\r\nconst getFeed = (index, size) => {\r\n\r\n    console.log(\"Get page of events is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: endpoint + `/feed?pageIndex=${index}&pageSize=${size}`,  //hardcoded page zero 10 size\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);\r\n}\r\n\r\n//add entity\r\n//done for events\r\nconst add = (payload) => {\r\n\r\n    console.log(\"Create new event is executing\");\r\n    const config = {\r\n        method: \"POST\",\r\n        url: endpoint,\r\n        data: payload,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config); //.then((response) => { return { id: response.data.item, ...payload } });\r\n};\r\n\r\n//update entity by id\r\n//done for events\r\n//may need to curry status!!!!!!\r\n//\r\nconst update = (id, payload) => {\r\n\r\n    console.log(\"Update blog is executing \" + endpoint + \"/\" + id);\r\n\r\n    if (!id) return;\r\n\r\n    const config = {\r\n        method: \"PUT\",\r\n        url: endpoint + \"/\" + id,\r\n        data: payload,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config); //.then((response) => { return { id: id, index: index, status: status, ...payload } });\r\n};\r\n\r\n\r\n//update entity by id\r\n//done for events\r\nconst setStatus = (id, status) => {\r\n\r\n    console.log(\"Update blog is executing \" + endpoint + \"/\" + id);\r\n\r\n    if (!id) return;\r\n\r\n    const config = {\r\n        method: \"PUT\",\r\n        url: endpoint + \"/\" + id + \"/\" + status,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config); //.then((response) => { return { id: id } });\r\n};\r\n\r\n//get all entities\r\n//done for events\r\nconst search = (index, size, searchFor) => {\r\n\r\n    console.log(\"Get all by entity is executing\");\r\n    const config = {\r\n        method: \"GET\",\r\n        url: endpoint + `/search??pageIndex=${index}&pageSize=${size}&q=${searchFor}`,  //hardcoded page zero 10 size\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);\r\n}\r\n\r\nexport { getById, getBySlug, add, update, setStatus, search, getFeed };\r\n\r\n\r\n","//This event functional component displays just\r\n//one card per events record. It receives a single\r\n//event object from the array of events in the\r\n//state of the parent component.\r\n//                      \r\n//There are also two local click handlers, \r\n//one for delete and one for edit, which\r\n//call to the parent functions defined in \r\n//the properties.\r\n//\r\nimport React, { useState } from \"react\";\r\nimport * as eventsService from \"../../services/eventsService\";\r\nimport Toastr from \"toastr\";\r\nimport { Autocomplete } from '@react-google-maps/api';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nfunction Event(props) {\r\n\r\n    //states\r\n    //\r\n    const [modal, setModal] = useState(false);\r\n    const [event, setEvent] = useState(JSON.parse(JSON.stringify(props.anEvent)));\r\n    const [holder, setHolder] = useState(JSON.parse(JSON.stringify(props.anEvent)));\r\n    const [modify, setModify] = useState(JSON.parse(JSON.stringify(props.anEvent)));\r\n\r\n    //gets the payload JSON of the event record passed\r\n    //\r\n    const getEventUpdatePayload = (anEvent) => {\r\n        return {\r\n            \"id\": anEvent.id,\r\n            \"metaData\": {\r\n                \"dateStart\": anEvent.metaData.dateStart,\r\n                \"dateEnd\": anEvent.metaData.dateEnd,\r\n                \"location\": {\r\n                    \"latitude\": anEvent.metaData.location.latitude,\r\n                    \"longitude\": anEvent.metaData.location.latitude,\r\n                    \"zipCode\": anEvent.metaData.location.zipCode,\r\n                    \"address\": anEvent.metaData.location.address\r\n                }\r\n            },\r\n            \"name\": anEvent.name,\r\n            \"headline\": anEvent.headline,\r\n            \"description\": anEvent.description,\r\n            \"summary\": anEvent.summary,\r\n            \"slug\": anEvent.slug,\r\n            \"statusId\": anEvent.statusId\r\n        }\r\n    }\r\n\r\n    //toggle function, which sets the state\r\n    //for the modal\r\n    //\r\n    const toggle = (e) => {\r\n        cancelEdit(e);\r\n        setModal(!modal);\r\n    }\r\n\r\n    //SAVE BEGIN\r\n    //invoked when \"save\" is clicked\r\n    //for an event record\r\n    //\r\n    const onLocalEventModify = (e) => {\r\n        e.preventDefault()\r\n\r\n        if ((modify.name.length < 3) || (modify.name.length > 25)) {\r\n            Toastr.warning(\"Name must be between three and 25 characters in length!\")\r\n            return false;\r\n        }\r\n\r\n        if ((modify.headline.length < 3) || (modify.headline.length > 80)) {\r\n            Toastr.warning(\"Image URL must be between three and 80 characters in length!\")\r\n            return false;\r\n        }\r\n\r\n        eventsService\r\n            .update(modify.id, getEventUpdatePayload(modify))\r\n            .then(updateSuccess)\r\n            .catch(updateError);\r\n    }\r\n\r\n    const updateSuccess = (response) => {\r\n        console.log(response);\r\n        Toastr.success(\"Record Saved!\");\r\n        setEvent(() => { return (JSON.parse(JSON.stringify(modify))) });\r\n        setHolder(() => { return (JSON.parse(JSON.stringify(modify))) });\r\n        props.addEditEvent((JSON.parse(JSON.stringify(modify))), props.eventIndex);\r\n        setModal(!modal);\r\n    }\r\n    const updateError = (err) => {\r\n        console.log(err);\r\n        Toastr.error(\"There was an error saving the record! \" + err);\r\n    }\r\n    //SAVE BEGIN\r\n\r\n\r\n    //cancel the edit modal window\r\n    //\r\n    const cancelEdit = (e) => {\r\n        e.preventDefault()\r\n        setEvent(() => { return (JSON.parse(JSON.stringify(holder))) });\r\n        setModify(() => { return (JSON.parse(JSON.stringify(holder))) });\r\n    }\r\n\r\n    //on click of View More, pass the index\r\n    //to the Events page to display the proper\r\n    //events record\r\n    //\r\n    const onViewMore = (e) => {\r\n        e.preventDefault();\r\n        props.changePrimaryView(e.currentTarget.dataset.index);\r\n    }\r\n\r\n    //invoked when onChange event fires for\r\n    //select elements\r\n    //\r\n    const localFormFieldChange = (e) => {\r\n        e.preventDefault();\r\n\r\n        //Assign the target of the event to the target variable\r\n        //\r\n        const target = e.target;\r\n\r\n        //This is the value to update the state with\r\n        //\r\n        const value = target.value;\r\n\r\n        //This is the name of the target. Your HTML elements\r\n        //MUST have the name property set for this to work.\r\n        //\r\n        const name = target.name;\r\n\r\n        //set the state\r\n        //Parameters:\r\n        //- An arrow function that will provide a \r\n        //  modifed copy of the previous state.\r\n        //\r\n        setModify((prevEvent) => {\r\n\r\n            // copy the previous state\r\n            //\r\n            let newEvent = { ...prevEvent };\r\n\r\n            // change the value of the copied object using the name and using bracket notation\r\n            // some exceptions are that a few fields don't sit at the same level with the other \r\n            // properties of the JSON\r\n            if (name === \"dateStart\") {\r\n                newEvent.metaData.dateStart = value;\r\n            } else if (name === \"dateEnd\") {\r\n                newEvent.metaData.dateEnd = value;\r\n            } else if (name === \"address\") {\r\n                newEvent.metaData.location.address = value;\r\n            } else if (name === \"zipCode\") {\r\n                newEvent.metaData.location.zipCode = value;\r\n            }\r\n            else {\r\n                newEvent[name] = value;  //  <- bracket notation!!!!\r\n            }\r\n\r\n            return newEvent;\r\n        });\r\n\r\n    }\r\n\r\n    //AUTOCOMPLETE CODE BEGIN\r\n    //\r\n    const [autocomplete, setAutocomplete] = useState(null);\r\n    console.log(\"autocomplete\", autocomplete);\r\n\r\n    const onLoad = (autocomplete) => {\r\n        console.log('autocomplete: ', autocomplete)\r\n\r\n        setAutocomplete(autocomplete)\r\n    }\r\n\r\n    const onPlaceChanged = () => {\r\n        // if (autocomplete !== null) {\r\n        //     console.log(this.autocomplete.getplace())\r\n        // } else {\r\n        //     console.log('autocomplete is not loaded yet!')\r\n        // }\r\n        console.log(\"place Changed\")\r\n    }\r\n    //\r\n    //AUTOCOMPLETE CODE END\r\n    //\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n            <tr><td>\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{event.name}</h5>\r\n                        <p className=\"card-text\">{event.description}</p>\r\n                        <p className=\"card-text\">{event.summary}</p>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"button\" data-index={props.eventIndex} onClick={toggle} className=\"btn btn-primary btn-sm m-1 select\">Edit</button>\r\n                        <button color=\"danger\" data-index={props.eventIndex} onClick={onViewMore} className=\"btn btn-info btn-sm m-1 select\">View More</button>\r\n                    </div>\r\n                </div >\r\n            </td></tr>\r\n            <Modal isOpen={modal} toggle={toggle} >\r\n                <ModalHeader toggle={toggle}><b><u>{modify.name}</u></b></ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"App\">\r\n                        <table className=\"table\">\r\n                            <tr><td>\r\n                                <h6>Enter date range</h6>\r\n                                <input id=\"dateStart\" data-index={props.eventIndex} name=\"dateStart\" className=\"form-control mb-1\" value={modify.metaData.dateStart} type=\"datetime-local\" onChange={localFormFieldChange} />\r\n                                <input id=\"dateEnd\" data-index={props.eventIndex} name=\"dateEnd\" className=\"form-control mb-1\" value={modify.metaData.dateEnd} type=\"datetime-local\" onChange={localFormFieldChange} />\r\n\r\n                            </td></tr>\r\n                            <tr><td className=\"h6\">\r\n                                Title\r\n\r\n                                <input type=\"text\" id={modify.id + \"name\"} name=\"name\" data-index={props.eventIndex} value={modify.name} className=\"form-control\" onChange={localFormFieldChange} />\r\n                            </td></tr>\r\n                            <tr><td className=\"h6\">\r\n\r\n                                Image\r\n                                <input type=\"text\" id={modify.id + \"headline\"} name=\"headline\" data-index={props.eventIndex} value={modify.headline} className=\"form-control\" onChange={localFormFieldChange} />\r\n                            </td></tr>\r\n\r\n                            <tr><td className=\"h6\">\r\n                                Description\r\n\r\n                                <input type=\"text\" id={modify.id + \"description\"} name=\"description\" data-index={props.eventIndex} value={modify.description} className=\"form-control\" onChange={localFormFieldChange} />\r\n                            </td></tr>\r\n                            <tr><td className=\"h6\">\r\n                                Summary\r\n\r\n                                <input type=\"text\" id={modify.id + \"summary\"} name=\"summary\" data-index={props.eventIndex} value={modify.summary} className=\"form-control\" onChange={localFormFieldChange} />\r\n                            </td></tr>\r\n                            <tr><td className=\"h6\">\r\n                                Slug\r\n\r\n\r\n                                <input type=\"text\" id={modify.id + \"slug\"} name=\"slug\" data-index={props.eventIndex} value={modify.slug} className=\"form-control\" onChange={localFormFieldChange} />\r\n                            </td></tr>\r\n                            <tr><td className=\"h6\">\r\n                                Status\r\n\r\n                                <select id={modify.id + \"statusId\"} name=\"statusId\" value={modify.statusId} data-index={props.eventIndex} onChange={localFormFieldChange} className=\"form-select\">\r\n                                    <option value=\"\">Select a status</option>\r\n                                    <option value=\"Active\">Active</option>\r\n                                    <option value=\"NotSet\">No status</option>\r\n                                    <option value=\"Deleted\">Deleted</option>\r\n                                    <option value=\"Flagged\">Flagged</option>\r\n                                </select>\r\n                            </td></tr>\r\n\r\n\r\n                            <tr><td className=\"h6\">\r\n                                Address\r\n\r\n                                {/* <input type=\"text\" id={modify.id + \"address\"} name=\"address\" data-index={props.eventIndex} value={modify.metaData.location.address} className=\"form-control\" onChange={localFormFieldChange} /> */}\r\n                                <Autocomplete\r\n                                    onLoad={onLoad}\r\n                                    onPlaceChanged={onPlaceChanged}\r\n                                >\r\n                                    <input type=\"text\" id={modify.id + \"address\"} name=\"address\" data-index={props.eventIndex} value={modify.metaData.location.address} className=\"form-control\" onBlur={localFormFieldChange} onChange={localFormFieldChange} />\r\n                                </Autocomplete>\r\n\r\n                            </td></tr>\r\n                            <tr><td className=\"h6\">\r\n                                Zip Code\r\n                                <input type=\"text\" id={modify.id + \"zipCode\"} name=\"zipCode\" data-index={props.eventIndex} value={modify.metaData.location.zipCode} className=\"form-control\" onChange={localFormFieldChange} />\r\n                            </td></tr>\r\n\r\n                        </table>\r\n                    </div>\r\n\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"Save\" id=\"modify\" name=\"modify\" className=\"btn-primary\" data-index={props.eventIndex} onClick={onLocalEventModify}>\r\n                        Save\r\n                    </Button>{' '}\r\n                    <Button color=\"secondary\" className=\"btn-info\" onClick={toggle}>\r\n                        Cancel\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n\r\n        </React.Fragment >\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Event;\r\n//export default React.memo(Person);  <- memoize to prevent useless re-renderings\r\n//not ideal to use when utilizing callbacks, shich is what this component does","import React, { useState, useEffect } from \"react\";\r\nimport * as eventsService from \"../../services/eventsService\";\r\nimport Pagination from 'rc-pagination';\r\nimport 'rc-pagination/assets/index.css';\r\nimport locale from \"rc-pagination/lib/locale/en_US\";  //pass as prop to pagination component\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n//import { Autocomplete } from '@react-google-maps/api';\r\nimport { GoogleMap, LoadScript, Marker, Autocomplete } from '@react-google-maps/api';\r\nimport Geocode from \"react-geocode\";\r\nimport Event from \"./Event\";\r\n//import ReactHtmlParser from 'react-html-parser';\r\n//import parse from 'html-react-parser';\r\n\r\n//import * as usersService from \"../../services/usersService\";\r\n//import { useNavigate } from \"react-router-dom\";\r\nimport Toastr from \"toastr\";\r\n\r\n//This one is for tabs\r\n//\r\nimport {\r\n  TabContent, TabPane, Nav,\r\n  NavItem, NavLink, Row, Col\r\n} from 'reactstrap';\r\nimport classnames from \"classnames\";\r\n\r\n//this is for Google maps\r\n//\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '400px'\r\n};\r\n\r\n\r\nfunction Events() {\r\n\r\n\r\n  // set Google Maps Geocoding API for obtaining the lat/lng\r\n  //based on address\r\n  //\r\n  Geocode.setApiKey(\"AIzaSyCmpmDVRALSWSKAeTdrEzX8cKmUMRMf4yY\");\r\n\r\n  // set response language. Defaults to english.\r\n  //\r\n  Geocode.setLanguage(\"en\");\r\n\r\n  //state for Google maps lat/lng obtained\r\n  //via Geocode\r\n  //\r\n  const [loc, setLoc] = useState({\r\n    lat: -3.745,\r\n    lng: -38.523,\r\n    eventMapMarkers: [],\r\n    showAllMapMarkers: false,\r\n    locs: []\r\n  });\r\n  console.log(loc);\r\n\r\n  //Sets the loc state, which will render\r\n  //the map for that location\r\n  //\r\n  const goToLocation = (lat, lng) => {\r\n    setLoc(() => {\r\n      return { \"lat\": lat, \"lng\": lng, eventMapMarkers: loc.eventMapMarkers, showAllMapMarkers: loc.showAllMapMarkers, locs: loc.locs };\r\n    })\r\n    //MAP2\r\n    // let newCoords = { lat: lat, lng: lng };\r\n    // map.setOptions({\r\n    //   center: newCoords,\r\n    //   zoom: 2\r\n    // });\r\n    // setMap(map);\r\n    // addMarker(lat, lng);\r\n  }\r\n\r\n  //const [map, setMap] = useState(null);\r\n\r\n\r\n  //modal window state\r\n  //modal will toggle true/false\r\n  //true - window shows\r\n  //false - window doesn't show\r\n  //\r\n  const [modal, setModal] = useState(false);\r\n\r\n  //newEvent state for creating a new event\r\n  //\r\n  const [newEvent, setNewEvent] = useState({\r\n    \"metaData\": {\r\n      \"dateStart\": \"\",\r\n      \"dateEnd\": \"\",\r\n      \"location\": {\r\n        \"latitude\": 0,\r\n        \"longitude\": 0,\r\n        \"zipCode\": \"\",\r\n        \"address\": \"\"\r\n      }\r\n    },\r\n    \"name\": \"\",\r\n    \"headline\": \"\",\r\n    \"description\": \"\",\r\n    \"summary\": \"\",\r\n    \"slug\": \"\",\r\n    \"statusId\": \"Active\"\r\n  });\r\n  console.log(\"newEvent\", newEvent);\r\n\r\n\r\n\r\n\r\n  //invoked by clicking cancel on the \r\n  //new event modal\r\n  //\r\n  const clearNewEvent = (e) => {\r\n    toggleModal(e);\r\n    emptyTheNewPayload();\r\n  }\r\n\r\n  //empty the payload state for new event\r\n  //This is to clear after a cancel on the\r\n  //new event modal, and also after a new \r\n  //record is created\r\n  //\r\n  const emptyTheNewPayload = () => {\r\n    setNewEvent(() => {\r\n      return {\r\n        \"metaData\": {\r\n          \"dateStart\": \"\",\r\n          \"dateEnd\": \"\",\r\n          \"location\": {\r\n            \"latitude\": 0,\r\n            \"longitude\": 0,\r\n            \"zipCode\": \"\",\r\n            \"address\": \"\"\r\n          }\r\n        },\r\n        \"name\": \"\",\r\n        \"headline\": \"\",\r\n        \"description\": \"\",\r\n        \"summary\": \"\",\r\n        \"slug\": \"\",\r\n        \"statusId\": \"Active\"\r\n      };\r\n    })\r\n  }\r\n\r\n  // State for current active feed of events\r\n  // events - array of events from the Sabio API\r\n  // eventComponents - array of HTML components\r\n  //            generated from the array of events\r\n  // selectedIndex - Which of the events in the list\r\n  //            will be displayed\r\n  //\r\n  const [pageData, setPage] = useState({\r\n    events: [],\r\n    eventComponents: [],\r\n    currentTab: \"1\",\r\n    type: \"EVENTS_VIEW\",\r\n    selectedIndex: 0,\r\n    pageIndex: 0,\r\n    pageSize: 3,\r\n    totalCount: 0,\r\n    totalPages: 0\r\n  });\r\n  console.log(pageData);\r\n\r\n  //toggleModal function, which sets te state\r\n  //\r\n  const toggleModal = (e) => {\r\n    e.preventDefault();\r\n    setModal(!modal);\r\n  }\r\n\r\n  const showPagedMapMarkers = (e) => {\r\n    e.preventDefault();\r\n    if (Number(pageData.currentTab) !== 2) tabToggle(\"2\");\r\n    setLoc((prevLoc) => {\r\n      let newObj = JSON.parse(JSON.stringify(prevLoc));\r\n      newObj.showAllMapMarkers = (!newObj.showAllMapMarkers);\r\n\r\n      // for (let index = 0; index < newObj.eventMapMarkers.length; index++) {  MAP2\r\n      //   //const element = array[index];\r\n      //   addMarker(newObj.eventMapMarkers[index].lat, newObj.eventMapMarkers[index].lng);\r\n      // }\r\n\r\n      return newObj;\r\n    })\r\n  }\r\n\r\n\r\n  //CREATE NEW EVENT BEGIN\r\n  //invoked on the Create New button\r\n  //to create the new event record\r\n  //\r\n  const onCreateNew = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"onCreateNew\", e);\r\n\r\n    if ((newEvent.name.length < 3) || (newEvent.name.length > 25)) {\r\n      Toastr.warning(\"Name must be between three and 25 characters in length!\")\r\n      return false;\r\n    }\r\n\r\n    if ((newEvent.headline.length < 3) || (newEvent.headline.length > 80)) {\r\n      Toastr.warning(\"Image URL must be between three and 80 characters in length!\")\r\n      return false;\r\n    }\r\n\r\n    eventsService\r\n      .add(newEvent)\r\n      .then(createSuccess)\r\n      .catch(createError);\r\n  }\r\n\r\n  const createSuccess = (response) => {\r\n    console.log(\"createSuccess\", response);\r\n    Toastr.success(\"Record created successfully!\");\r\n    loadEvents();\r\n    emptyTheNewPayload();\r\n    setModal(!modal);\r\n  }\r\n\r\n  const createError = (err) => {\r\n    console.log(\"getError\", err);\r\n    emptyTheNewPayload();\r\n    Toastr.error(\"Record not created!\");\r\n  }\r\n  //CREATE NEW EVENT END\r\n\r\n  //GET EVENTS FEED BEGIN\r\n  //Load events (feed) based on pageIndex and pageSize\r\n  //\r\n  const loadEvents = () => {\r\n    eventsService\r\n      .getFeed(pageData.pageIndex, pageData.pageSize)\r\n      .then(getSuccess)\r\n      .catch(getError)\r\n  }\r\n\r\n  const getSuccess = (response) => {\r\n    console.log(\"getSuccess\", response)\r\n\r\n    setPage((prevState) => {\r\n\r\n      let tempObj = { ...prevState };\r\n\r\n      tempObj.events = response.data.item.pagedItems;\r\n      tempObj.eventComponents = tempObj.events.map(buildEventList);\r\n      tempObj.pageIndex = response.data.item.pageIndex;\r\n      tempObj.pageSize = response.data.item.pageSize;\r\n      tempObj.totalCount = response.data.item.totalCount;\r\n      tempObj.totalPages = response.data.item.totalPages;\r\n      return tempObj;\r\n\r\n    })\r\n  }\r\n  const getError = (err) => {\r\n    console.log(\"getError\", err)\r\n    Toastr.error(err);\r\n  }\r\n  //GET EVENTS FEED END\r\n\r\n  //Change which event is the primary event on\r\n  //the left of the screen\r\n  //\r\n  const changePrimaryView = (index) => {\r\n    setPage((prevPage) => {\r\n      let newObj = { ...prevPage };\r\n      newObj.selectedIndex = index;\r\n      newObj.showAllMapMarkers = false;\r\n      return newObj;\r\n    });\r\n    tabToggle(\"1\");\r\n    //    turnOffPagedMapMarkers();\r\n  }\r\n\r\n  //mapping function to create an event card\r\n  //for every event on the \"get\"\r\n  //\r\n  const buildEventList = (event, index) => {\r\n\r\n    //get the address of the selected event and get the lat/lng\r\n    Geocode.fromAddress(event.metaData.location.address + \", \" + event.metaData.location.zipCode)\r\n      .then(\r\n        (response) => {\r\n          const { lat, lng } = response.results[0].geometry.location;\r\n          console.log(lat, lng);\r\n          setNewMarker(lat, lng);//`<Marker position={{ lat: ${lat}, lng: ${lng} }} />`);\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        }\r\n      ).catch(err => {\r\n        console.log(err);\r\n      });\r\n\r\n    let anObj = { ...event };\r\n    return <Event changePrimaryView={changePrimaryView}\r\n      eventIndex={index}\r\n      key={anObj.id}\r\n      anEvent={anObj}\r\n      addEditEvent={editHolder}\r\n      formFieldChange={onFormFieldChange}>\r\n    </Event>\r\n  }\r\n\r\n  const setNewMarker = (lat, lng) => {\r\n    setLoc((prevLoc) => {\r\n      let newObj = JSON.parse(JSON.stringify(prevLoc));\r\n      newObj.eventMapMarkers.push(`<Marker position={{ lat: ${lat}, lng: ${lng} }} />`);\r\n      newObj.locs.push({ lat: lat, lng: lng });\r\n      return newObj;\r\n    });\r\n  }\r\n\r\n  // const buildMarkerList = (eventArray) => {\r\n\r\n  //   //get the address of the selected event and get the lat/lng\r\n  //   Geocode.fromAddress(eventArray.metaData.location.address + \", \" + eventArray.metaData.location.zipCode)\r\n  //     .then(\r\n  //       (response) => {\r\n  //         const { lat, lng } = response.results[0].geometry.location;\r\n  //         console.log(lat, lng);\r\n  //         //return `<Marker position={{ lat: ${lat}, lng: ${lng} }} />`;\r\n  //         setNewMarker(`<Marker position={{ lat: ${lat}, lng: ${lng} }} />`);\r\n  //       },\r\n  //       (error) => {\r\n  //         console.error(error);\r\n  //       }\r\n  //     ).catch(err => {\r\n  //       console.log(err);\r\n  //     });\r\n  //   return \"No lat/lng found\";\r\n  // }\r\n\r\n  //edit the state record for the successfully-edited \r\n  //corresponding database record\r\n  //\r\n  const editHolder = (updatedEvent, index) => {\r\n    console.log(\"editHolder\", index, updatedEvent)\r\n\r\n    setPage((prevPage) => {\r\n\r\n      let newObj = { ...prevPage };\r\n      let newEvent = { ...prevPage.events[index] };\r\n      let newMetaLoc = { ...prevPage.events[index].metaData.location };\r\n      let newTime = { ...prevPage.events[index].metaData }\r\n\r\n      newEvent = updatedEvent;\r\n      newMetaLoc = updatedEvent.metaData.location;\r\n      newTime = updatedEvent.metaData;\r\n\r\n      newObj.events[index] = newEvent;\r\n      newObj.events[index].metaData = newTime;\r\n      newObj.events[index].metaData.location = newMetaLoc;\r\n\r\n      return newObj;\r\n    })\r\n\r\n  }\r\n\r\n\r\n  //update the state with changes to add new \r\n  //event form elements\r\n  //\r\n  const onFormFieldChange = (e) => {   //captures this event\r\n\r\n    //const eventIndex = e.currentTarget.dataset.index;\r\n\r\n    //Assign the target of the event to the target variable\r\n    //\r\n    const target = e.target;\r\n\r\n    //This is the value to update the state with\r\n    //\r\n    const value = target.value;\r\n\r\n    //This is the name of the target. Your HTML elements\r\n    //MUST have the name property set for this to work.\r\n    //\r\n    const name = target.name;\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setNewEvent((prevNewEvent) => {\r\n\r\n      // copy the previous state\r\n      //\r\n      let newUserEvents =\r\n        JSON.parse(JSON.stringify(prevNewEvent));\r\n\r\n      // change the value of the copied object using the name and using bracket notation\r\n      // ONE conditional is the image, which doesn't sit at the same level with the other \r\n      // properties of the JSON\r\n\r\n      if (name === \"dateStart\") {\r\n        newUserEvents.metaData.dateStart = value;  //  <- bracket notation!!!!\r\n      } else if (name === \"dateEnd\") {\r\n        newUserEvents.metaData.dateEnd = value;  //  <- bracket notation!!!!\r\n      } else if (name === \"address\") {\r\n        newUserEvents.metaData.location.address = value;  //  <- bracket notation!!!!\r\n      } else if (name === \"zipCode\") {\r\n        newUserEvents.metaData.location.zipCode = value;  //  <- bracket notation!!!!\r\n      }\r\n      else {\r\n        newUserEvents[name] = value;  //  <- bracket notation!!!!\r\n      }\r\n      return newUserEvents;\r\n    });\r\n  };\r\n\r\n\r\n  // Toggle active state for tabs\r\n  //\r\n  const tabToggle = tab => {\r\n    //if clicking on tab 2, display the map\r\n    if (Number(tab) === 2) startMapping();\r\n    if (pageData.currentTab !== tab) setPage((prevState) => {\r\n      let newObj = { ...prevState };\r\n      newObj.currentTab = tab;\r\n      return newObj;\r\n    });\r\n  }\r\n\r\n  //When the page navigation\r\n  //is clicked\r\n  //\r\n  const onPageChange = page => {\r\n    console.log(\"onChange\", page);\r\n\r\n    tabToggle(\"1\"); //reset tab to first tab\r\n\r\n    setPage((prevState) => {\r\n\r\n      //make a copy of the previous state\r\n      //\r\n      const pageDataComp = { ...prevState };\r\n\r\n      //Toggle the showContent boolean\r\n      //\r\n      pageDataComp.pageIndex = page - 1;\r\n      pageDataComp.selectedIndex = 0;\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  };\r\n\r\n  //set the map state lat/lng\r\n  //\r\n  const startMapping = () => {\r\n\r\n    //if there is actually a record in state\r\n    if (pageData.events.length > 0) {\r\n\r\n      //get the address of the selected event and get the lat/lng\r\n      Geocode.fromAddress(pageData.events[pageData.selectedIndex].metaData.location.address + \", \" + pageData.events[pageData.selectedIndex].metaData.location.zipCode).then(\r\n        (response) => {\r\n          const { lat, lng } = response.results[0].geometry.location;\r\n          console.log(lat, lng);\r\n          goToLocation(lat, lng);\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        }\r\n      );\r\n    };\r\n  }\r\n\r\n  // this is invoked following successful mount\r\n  // \r\n  useEffect(() => {\r\n\r\n    loadEvents();\r\n\r\n    // var map = new window.google.maps.Map(document.getElementById('map'), {\r\n    //   center: { lat: 37.7749, lng: -122.4194 },\r\n    //   zoom: 8,\r\n    // });\r\n    // setMap(map);  MAP2\r\n\r\n\r\n  }, [pageData.pageIndex, pageData.selectedIndex, pageData.currentTab]   //removed \r\n  );\r\n\r\n  //AUTOCOMPLETE CODE BEGIN\r\n  //\r\n  const [autocomplete, setAutocomplete] = useState(null);\r\n  console.log(\"autocomplete\", autocomplete);\r\n\r\n  const onLoad = (autocomplete) => {\r\n    console.log('autocomplete: ', autocomplete)\r\n\r\n    setAutocomplete(autocomplete)\r\n  }\r\n\r\n  const onPlaceChanged = () => {\r\n    // if (autocomplete !== null) {\r\n    //     console.log(this.autocomplete.getplace())\r\n    // } else {\r\n    //     console.log('autocomplete is not loaded yet!')\r\n    // }\r\n    console.log(\"place Changed\")\r\n  }\r\n  //\r\n  //AUTOCOMPLETE CODE END\r\n  //\r\n\r\n  // const addMarker = (lat, lng) => { MAP2\r\n  // const addMarker = (lat, lng) => {\r\n  //     new window.google.maps.Marker({\r\n  //     position: { lat, lng },\r\n  //     map,\r\n  //   });\r\n  // }\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n\r\n\r\n          {/* TABS BEGIN */}\r\n          <Nav tabs>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({\r\n                  active:\r\n                    pageData.currentTab === '1'\r\n                })}\r\n                onClick={() => { tabToggle('1'); }}\r\n              >\r\n                Event\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink\r\n                className={classnames({\r\n                  active:\r\n                    pageData.currentTab === '2'\r\n                })}\r\n                onClick={() => { tabToggle('2'); }}\r\n              >\r\n                Event Map View\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n          <TabContent activeTab={pageData.currentTab} className=\"col-8\">\r\n            <TabPane tabId=\"1\">\r\n              <Row>\r\n                <Col sm=\"12\">\r\n                  <div className=\"\">\r\n                    <div className=\"card\">\r\n                      <h2 className=\"card-title px-2\" id=\"currentName\">{(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].name : \"\"}</h2>\r\n                      <img style={{ height: \"400px\", objectFit: \"contain\" }} id=\"currentImage\" className=\"card-img\" src={(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].headline : \"\"} alt=\"\"></img>\r\n                      <p>\r\n                        <div className=\"row\">\r\n                          <div className=\"col-12\">\r\n                            <h5 className=\"card-title px-2 mt-4\">Location</h5>\r\n                            <table><tr><td className=\"px-4 h6\">\r\n                              <p className=\"card-text mb-0 h6\" id=\"currentAddress\">{(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].metaData.location.address : \"\"}</p>\r\n                            </td><td>\r\n                                <p className=\"card-text mb-0\" id=\"currentStartDate\"><table><tr><td className=\"h6\" style={{ width: \"50px\" }}>From:</td><td> {(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].metaData.dateStart.substring(0, 9) : \"\"}</td></tr></table></p>\r\n                              </td></tr>\r\n                              <tr><td className=\"px-4 h6\">\r\n                                <p className=\"card-text mb-0 h6\" id=\"currentAddress\">{(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].metaData.location.zipCode : \"\"}</p>\r\n                              </td>\r\n                                <td>\r\n                                  <p className=\"card-text mb-0\" id=\"currentStartEnd\"><table><tr><td className=\"h6\" style={{ width: \"50px\" }}>To:</td><td> {(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].metaData.dateEnd.substring(0, 9) : \"\"}</td></tr></table></p>\r\n                                </td></tr>\r\n                            </table>\r\n                          </div>\r\n                        </div>\r\n                      </p>\r\n                      <p className=\"card-text p-2\" id=\"\"><p className=\"h5\">Summary</p> {(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].summary : \"\"}</p>\r\n                      <p className=\"card-text p-2\" id=\"currentDescription\"><p className=\"h5\">Description</p>\r\n                        {(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].description : \"\"}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n\r\n\r\n\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n            <TabPane tabId=\"2\">\r\n              <Row>\r\n                <Col sm=\"12\">\r\n                  <div className=\"\">\r\n                    <div className=\"card\">\r\n                      {/* <img className=\"card-img-top\" src=\"https://cdn.wccftech.com/wp-content/uploads/2017/03/Google-Maps.jpg\" alt=\"Google Maps\" /> */}\r\n                      <h2 className=\"card-title px-2\" id=\"currentName\">{(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].name : \"\"}</h2>\r\n                      <LoadScript\r\n                        googleMapsApiKey=\"AIzaSyCmpmDVRALSWSKAeTdrEzX8cKmUMRMf4yY\"\r\n                        libraries={[\"places\"]}>\r\n                        <GoogleMap\r\n                          style={{ width: \"100%\" }}\r\n                          mapContainerStyle={containerStyle}\r\n                          center={loc}\r\n                          zoom={loc.showAllMapMarkers ? 5 : 15}\r\n                        //onLoad={generateMarkers}\r\n                        // dangerouslySetInnerHTML={{ __html: loc.showAllMapMarkers ? loc.eventMapMarkers.join(\"\") : \"\" }}\r\n                        // dangerouslySetInnerHTML={{ __html: loc.showAllMapMarkers ? <Marker position={{ lat: 100, lng: 100 }} /> : \"\" }}\r\n                        >\r\n                          { /* Child components, such as markers, info windows, etc. */}\r\n                          <></>\r\n                          {/* {loc.showAllMapMarkers ? <Marker position={{ lat: 100, lng: 100 }} /> : \"\"} */}\r\n                          {/* ReactHtmlParser(loc.eventMapMarkers.join(\"\")) : \"\"} */}\r\n                          <Marker\r\n                            position={loc}\r\n                          />\r\n                          <Marker\r\n                            position={loc.showAllMapMarkers ? (loc.locs.length > 0 ? loc.locs[0] : null) : null}\r\n                          />\r\n                          <Marker\r\n                            position={loc.showAllMapMarkers ? (loc.locs.length > 1 ? loc.locs[1] : null) : null}\r\n                          />\r\n                          <Marker\r\n                            position={loc.showAllMapMarkers ? (loc.locs.length > 2 ? loc.locs[2] : null) : null}\r\n                          />\r\n                          <Marker\r\n                            position={loc.showAllMapMarkers ? (loc.locs.length > 3 ? loc.locs[3] : null) : null}\r\n                          />\r\n                          <Marker\r\n                            position={loc.showAllMapMarkers ? (loc.locs.length > 4 ? loc.locs[4] : null) : null}\r\n                          />\r\n                          <Marker\r\n                            position={loc.showAllMapMarkers ? (loc.locs.length > 5 ? loc.locs[5] : null) : null}\r\n                          />\r\n                          <Marker\r\n                            position={loc.showAllMapMarkers ? (loc.locs.length > 6 ? loc.locs[6] : null) : null}\r\n                          />\r\n                          <Marker\r\n                            position={loc.showAllMapMarkers ? (loc.locs.length > 7 ? loc.locs[7] : null) : null}\r\n                          />\r\n                          <Marker\r\n                            position={loc.showAllMapMarkers ? (loc.locs.length > 8 ? loc.locs[8] : null) : null}\r\n                          />\r\n                        </GoogleMap>\r\n                      </LoadScript>\r\n                      {/* <div id=\"map\" style={{ height: '500px' }}>MAP?</div> MAP2 */}\r\n                      <p>\r\n                        <div className=\"row\">\r\n                          <div className=\"col-12\">\r\n                            <h5 className=\"card-title px-2 mt-4\">Location</h5>\r\n                            <table><tr><td className=\"px-4 h6\">\r\n                              <p className=\"card-text mb-0 h6\" id=\"currentAddress\">{(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].metaData.location.address : \"\"}</p>\r\n                            </td><td>\r\n                                <p className=\"card-text mb-0\" id=\"currentStartDate\"><table><tr><td className=\"h6\" style={{ width: \"50px\" }}>From:</td><td> {(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].metaData.dateStart.substring(0, 9) : \"\"}</td></tr></table></p>\r\n                              </td></tr>\r\n                              <tr><td className=\"px-4 h6\">\r\n                                <p className=\"card-text mb-0 h6\" id=\"currentAddress\">{(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].metaData.location.zipCode : \"\"}</p>\r\n                              </td>\r\n                                <td>\r\n                                  <p className=\"card-text mb-0\" id=\"currentStartEnd\"><table><tr><td className=\"h6\" style={{ width: \"50px\" }}>To:</td><td> {(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].metaData.dateEnd.substring(0, 9) : \"\"}</td></tr></table></p>\r\n                                </td></tr>\r\n                            </table>\r\n                          </div>\r\n                        </div>\r\n                      </p>\r\n                      <p className=\"card-text p-2\" id=\"\"><p className=\"h5\">Summary</p> {(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].summary : \"\"}</p>\r\n                      <p className=\"card-text p-2\" id=\"currentDescription\"><p className=\"h5\">Description</p>\r\n                        {(pageData.events.length > 0) ? pageData.events[pageData.selectedIndex].description : \"\"}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </TabPane>\r\n\r\n          </TabContent>\r\n          {/* TABS END */}\r\n\r\n          <div className=\"col-4\">\r\n            <div className=\"card\">\r\n              <div className=\"card-body overflow-auto\" style={{ maxHeight: \"700px\" }} >\r\n                <small>\r\n                  <nav aria-label=\"Page navigation example\">\r\n                    <Pagination\r\n                      onChange={onPageChange}\r\n                      current={pageData.pageIndex + 1}\r\n                      total={pageData.totalCount}\r\n                      locale={locale}\r\n                      pageSize={pageData.pageSize}\r\n                    ></Pagination>\r\n                  </nav>\r\n                </small>\r\n\r\n                <Button color=\"primary\" onClick={toggleModal} className=\"m-3\">New Event</Button>\r\n                <Button color=\"secondary\" onClick={showPagedMapMarkers} className={(Number(pageData.currentTab) === 2) ? \"m-3\" : \"d-none\"}>{loc.showAllMapMarkers ? \"Hide All But Selected\" : \"View All on Map\"}</Button>\r\n                <table className=\"table table-striped\" id=\"eventsTable\">\r\n\r\n                  {(pageData.events.length > 0) ? pageData.eventComponents : \"No Events Listed\"}\r\n\r\n                </table>\r\n\r\n\r\n\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n\r\n      {/* MODAL BEGIN */}\r\n      <Modal isOpen={modal} toggle={toggleModal} >\r\n        <ModalHeader toggle={toggleModal}><b><u>PLACEHOLDER</u></b></ModalHeader>\r\n        <ModalBody>\r\n          <div className=\"App\">\r\n            <table className=\"table\">\r\n              <tr><td>\r\n                <h6>Enter date range</h6>\r\n                <input id=\"dateStart_New\" name=\"dateStart\" className=\"form-control mb-1\" type=\"datetime-local\" onChange={onFormFieldChange} />\r\n                <input id=\"dateEnd_New\" name=\"dateEnd\" className=\"form-control mb-1\" type=\"datetime-local\" onChange={onFormFieldChange} />\r\n\r\n              </td></tr>\r\n              <tr><td className=\"h6\">\r\n                Title\r\n\r\n                <input type=\"text\" id=\"name_New\" name=\"name\" className=\"form-control\" onChange={onFormFieldChange} />\r\n              </td></tr>\r\n              <tr><td className=\"h6\">\r\n\r\n                Image\r\n                <input type=\"text\" id=\"name_New\" name=\"headline\" className=\"form-control\" onChange={onFormFieldChange} />\r\n              </td></tr>\r\n              <tr><td className=\"h6\">\r\n                Description\r\n\r\n                <input type=\"text\" id=\"description_New\" name=\"description\" className=\"form-control\" onChange={onFormFieldChange} />\r\n              </td></tr>\r\n              <tr><td className=\"h6\">\r\n                Summary\r\n\r\n                <input type=\"text\" id=\"summary_New\" name=\"summary\" className=\"form-control\" onChange={onFormFieldChange} />\r\n              </td></tr>\r\n              <tr><td className=\"h6\">\r\n                Slug\r\n\r\n                <input type=\"text\" id=\"slug_New\" name=\"slug\" className=\"form-control\" onChange={onFormFieldChange} />\r\n              </td></tr>\r\n              <tr><td className=\"h6\">\r\n                Status\r\n\r\n                <select id=\"statusId_New\" name=\"statusId\" onChange={onFormFieldChange} className=\"form-select\">\r\n                  <option value=\"\">Select a status</option>\r\n                  <option value=\"Active\">Active</option>\r\n                  <option value=\"NotSet\">No status</option>\r\n                  <option value=\"Deleted\">Deleted</option>\r\n                  <option value=\"Flagged\">Flagged</option>\r\n                </select>\r\n              </td></tr>\r\n              <tr><td className=\"h6\">\r\n                Address\r\n\r\n                <Autocomplete\r\n                  onLoad={onLoad}\r\n                  onPlaceChanged={onPlaceChanged}\r\n                >\r\n                  <input type=\"text\" id=\"address_New\" name=\"address\" className=\"form-control\" onBlur={onFormFieldChange} onChange={onFormFieldChange} />\r\n                </Autocomplete>\r\n                {/* <input type=\"text\" id=\"address_New\" name=\"address\" className=\"form-control\" onChange={onFormFieldChange} /> */}\r\n              </td></tr>\r\n              <tr><td className=\"h6\">\r\n                Zip Code\r\n                <input type=\"text\" id=\"zipCode_New\" name=\"zipCode\" className=\"form-control\" onChange={onFormFieldChange} />\r\n              </td></tr>\r\n\r\n            </table>\r\n          </div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"Save\" id=\"create\" name=\"create\" className=\"btn-primary\" onClick={onCreateNew}>\r\n            Create\r\n          </Button>{' '}\r\n          <Button color=\"secondary\" className=\"btn-info\" onClick={clearNewEvent}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n      {/* MODAL END */}\r\n\r\n      {/* <Navigate></Navigate> */}\r\n    </React.Fragment >\r\n  );\r\n}\r\n\r\nexport default Events;\r\n","//NewEditFriends functional component called from the \r\n//Friends component. This component is either activated\r\n//by the link /friends/new or /friends/:friendId. When\r\n//passed with a friendId, it will also include a friend\r\n//record from the state. This friend record does not get \r\n//passed back to Friends.jsx component. This component \r\n//will let the user edit/save an existing friend record\r\n//using API calls, but also create a new record.\r\n//\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport * as friendsService from \"../../services/friendsService\";\r\nimport Toastr from \"toastr\";\r\n\r\nfunction NewEditFriends() {\r\n\r\n  //Init the useNavigate hook\r\n  //\r\n  const navigate = useNavigate();\r\n\r\n  //Init the useLocation hook\r\n  //only grab the state hook \r\n  //from the location object\r\n  //\r\n  const { state } = useLocation();\r\n\r\n  //Init the useParams hook and \r\n  //only grab the friendId\r\n  //\r\n  const { friendId } = useParams();\r\n\r\n  //Build the framework for the state\r\n  //This JSON outline is exactly how a \r\n  //friend record is defined by the \r\n  //Sabio API page. An render with a \r\n  //payload will overwrite this base\r\n  //outline.\r\n  //\r\n  const [friend, setFriend] = useState({\r\n    \"bio\": \"\",\r\n    \"summary\": \"\",\r\n    \"headline\": \"\",\r\n    \"skills\": [\r\n      {\r\n        \"id\": 0,\r\n        \"name\": \"\"\r\n      }\r\n    ],\r\n    \"primaryImage\": {\r\n      \"id\": 0,\r\n      \"entityId\": 0,\r\n      \"imageTypeId\": 0,\r\n      \"imageUrl\": \"\"\r\n    },\r\n    \"id\": Number((friendId) ? friendId : 0),\r\n    \"shortTitle\": \"\",\r\n    \"title\": \"\",\r\n    \"shortDescription\": \"\",\r\n    \"content\": \"\",\r\n    \"createdBy\": 0,\r\n    \"modifiedBy\": 0,\r\n    \"slug\": \"\",\r\n    \"entityTypeId\": 0,\r\n    \"statusId\": \"\",\r\n    \"dateCreated\": \"\",\r\n    \"dateModified\": \"\",\r\n    \"baseMetaData\": {},\r\n    \"site\": 0,\r\n    \"type\": \"\",\r\n    \"friendUrl\": \"\"\r\n  });\r\n\r\n\r\n  //populate the state with the friends object\r\n  //provided by either the API call or the state\r\n  //object passed from the Friends.jsx component\r\n  //Parameters:\r\n  //- friendObject - A friend object\r\n  //\r\n  const populateFriendState = (friendObject) => {\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setFriend((prevFriend) => {\r\n\r\n      //Get a copy of the previous state\r\n      //\r\n      let pageDataComp = { ...prevFriend };\r\n\r\n      //Overwrite that with the friend object\r\n      //this step really isn't necessary\r\n      //\r\n      pageDataComp = friendObject;\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  }\r\n\r\n\r\n  //Form field function to change state with\r\n  //every onChange with the input HTML elements.\r\n  //This was copied and modified from the Sabio\r\n  //Wiki example.\r\n  //Parameters:\r\n  //- e - Event object\r\n  // \r\n  const onFormFieldChange = (e) => {   //captures this event\r\n\r\n    //Assign the target of the event to the target variable\r\n    //\r\n    const target = e.target;\r\n\r\n    //This is the value to update the state with\r\n    //\r\n    const value = target.value;\r\n\r\n\r\n\r\n    //This is the name of the target. Your HTML elements\r\n    //MUST have the name property set for this to work.\r\n    //\r\n    const name = target.name;\r\n    console.log(name, value)\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setFriend(prevFriend => {\r\n\r\n      // copy the previous state\r\n      //\r\n      const newUserObject = {\r\n        ...prevFriend\r\n      };\r\n\r\n      //change the value of the copied object using the name and using bracket notation\r\n      //ONE conditional is the image, which doesn't sit at the same level with the other \r\n      //properties of the JSON\r\n      //\r\n      if (name === \"imageUrl\") {\r\n        newUserObject.primaryImage.imageUrl = value;  //  <- bracket notation!!!!\r\n      } else {\r\n        newUserObject[name] = value;  //  <- bracket notation!!!!\r\n      }\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return newUserObject;\r\n    });\r\n  };\r\n\r\n  //Invoked following mount\r\n  //This function either grabs the friend object\r\n  //from the passed state or using an API call\r\n  //Parameters:\r\n  //- thisFriend - This is the existing state\r\n  //  object with the friendId at a minimum\r\n  //- passedState = This is the state object\r\n  //  (or not). It is either populated or null.\r\n  //\r\n  const getFriend = (thisFriend, passedState) => {\r\n\r\n    //if a state was actually passed\r\n    //use it to populate the form.\r\n    //\r\n    if (passedState) {\r\n      populateFriendState(passedState);\r\n    }\r\n    //If a state object is not provided, \r\n    //perform the API call using the ID\r\n    //\r\n    else {\r\n      friendsService\r\n        .getById(thisFriend.id)\r\n        .then(getSuccess)\r\n        .catch(getError);\r\n    }\r\n  }\r\n\r\n\r\n  //Successful get of friend record\r\n  //Parmeters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const getSuccess = (response) => {\r\n\r\n    //Since this object was retrieved from the Sabio API, it will\r\n    //not contain the type and friendUrl properties. They are \r\n    //added here\r\n    //\r\n    let friendObject = { ...response.item, type: \"FRIEND_EDIT\", friendUrl: \"\" }\r\n\r\n    //Call to populate the input elements\r\n    //\r\n    populateFriendState(friendObject);    //update the state...this re-renders and reflects on the page\r\n\r\n    //Let the user know the records were retrieved \r\n    //successfully\r\n    //\r\n    Toastr.success(\"Your friend is loaded!\");\r\n  }\r\n\r\n\r\n  //Unsuccessful get of friend record\r\n  //Parmeters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const getError = (err) => {\r\n\r\n    //Build the error string\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know the record \r\n    //retrieval failed\r\n    //\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  //Build the save API payload\r\n  //This builds the JSON for the \r\n  //update call to the API\r\n  //\r\n  const getSavePayload = () => {\r\n    return {\r\n      \"id\": friend.id,\r\n      \"title\": friend.title,\r\n      \"bio\": friend.bio,\r\n      \"summary\": friend.summary,\r\n      \"headline\": friend.headline,\r\n      \"slug\": friend.slug,\r\n      \"statusId\": friend.statusId,\r\n      \"primaryImage\": friend.primaryImage.imageUrl\r\n    }\r\n  }\r\n\r\n\r\n  //Build the save API payload\r\n  //This builds the JSON for the \r\n  //add call to the API\r\n  //\r\n  const getSubmitPayload = () => {\r\n    return {\r\n      \"title\": friend.title,\r\n      \"bio\": friend.bio,\r\n      \"summary\": friend.summary,\r\n      \"headline\": friend.headline,\r\n      \"slug\": friend.slug,\r\n      \"statusId\": friend.statusId,\r\n      \"primaryImage\": friend.primaryImage.imageUrl\r\n    }\r\n  }\r\n\r\n\r\n  //Invoked on save button click\r\n  //this initiates the save of an existing\r\n  //friend record\r\n  //Parameters:\r\n  //- e - The event\r\n  //\r\n  const onSave = (e) => {\r\n\r\n    //This is necessary to prevent a non-use\r\n    //error for the event object\r\n    //\r\n    console.log(\"onSave\", e);\r\n\r\n    if (!friend.title) {\r\n\r\n      Toastr.warning(\"title need data!\");\r\n      return;\r\n    }\r\n\r\n\r\n    //Make the update call to the API\r\n    //\r\n    friendsService\r\n      .update(friend.id, getSavePayload())\r\n      .then(saveSuccess)\r\n      .catch(saveError);\r\n  }\r\n\r\n\r\n  //Successful save of friend record\r\n  //Parmeters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const saveSuccess = (response) => {\r\n\r\n    //This is necessary to prevent a non-use\r\n    //error for the response object\r\n    //\r\n    console.log(\"saveSuccess\", response);\r\n\r\n    //Let the user know the record \r\n    //save was successful\r\n    //    \r\n    Toastr.success(\"Your record has been updated!\");\r\n  }\r\n\r\n\r\n  //Unsuccessful save of friend record\r\n  //Parmeters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const saveError = (err) => {\r\n\r\n    //Build the error message\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know the record \r\n    //save failed\r\n    //    \r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  //Invoked on submit button click\r\n  //this initiates the adding of a new\r\n  //friend record\r\n  //Parameters:\r\n  //- e - The event object\r\n  //\r\n  const onSubmit = (e) => {\r\n\r\n    //This is necessary to prevent a non-use\r\n    //error for the event object\r\n    //    \r\n    console.log(\"onSubmit\", e);\r\n\r\n    //Make the add call to the API\r\n    //    \r\n    friendsService\r\n      .add(getSubmitPayload())\r\n      .then(submitSuccess)\r\n      .catch(submitError);\r\n  }\r\n\r\n\r\n  //Successful add of friend record\r\n  //Parmeters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const submitSuccess = (response) => {\r\n\r\n    //this toastr can run just fine on creation even\r\n    //though the page is diverted, since the navigation\r\n    //won't happen until after the state change, which\r\n    //is asynchronous\r\n    //\r\n    Toastr.success(\"New friend record created!<br>Feel free to edit your new friend record.\");\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setFriend(prevFriend => {\r\n\r\n      //Make a copy of the previous state\r\n      //\r\n      const newUserObject = {\r\n        ...prevFriend\r\n      };\r\n\r\n      //Add the record ID to the state, but also\r\n      //change the type, which will allow redirect\r\n      //uning navigate at the useEffect\r\n      newUserObject.id = response.data.item;\r\n      newUserObject.type = \"FRIEND_ADD\"; //<- since this has changed, the useEffect will invoke again\r\n      newUserObject.friendUrl = \"/friends/\" + response.data.item;   //this is the next destination\r\n\r\n      //This call will start a re-render of the component\r\n      //\r\n      return newUserObject;\r\n    });\r\n  }\r\n\r\n\r\n  //Unsuccessful add of friend record\r\n  //Parmeters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const submitError = (err) => {\r\n\r\n    //Build error response\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know that the add\r\n    //failed\r\n    //\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  //Runs after mount\r\n  //It will re-run when the friend.type \r\n  //changes in the state\r\n  // \r\n  useEffect(() => {\r\n\r\n    //props.pingUserStatus();\r\n\r\n    //If the type of operation we completed\r\n    //was an \"add new\"\r\n    //\r\n    if (friend.type === \"FRIEND_ADD\") {\r\n\r\n      //Prepare the new state object with the correct\r\n      //properies of type and friendUrl\r\n      //\r\n      const stateObj = { ...friend, type: \"FRIEND_EDIT\", friendUrl: \"\" };\r\n\r\n      //Use the existing state object friendUrl to redirect to\r\n      //this same page, also passing the new state object.\r\n      //This operation will display the new record in edit mode\r\n      //\r\n      navigate(friend.friendUrl, { state: stateObj });\r\n\r\n    } else {\r\n\r\n      //If the type is not set to ADD\r\n      //call the get function to populate\r\n      //the page\r\n      //\r\n      if (friend.id) getFriend(friend, state);\r\n\r\n    }\r\n  }, [friend.type]);  //<-useEffect watches for changes\r\n\r\n\r\n  //Invoked on friends button click\r\n  //navigates back to the friends page\r\n  //Parameters:\r\n  //- e - Event object\r\n  const goToFriends = (e) => {\r\n\r\n    //Prevents default operation \r\n    //of the event object\r\n    //\r\n    e.preventDefault();\r\n\r\n    //Redirect to the Friends.jsx component\r\n    //\r\n    navigate(\"/friends\")\r\n  }\r\n\r\n\r\n  //main return for display\r\n  //\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"mb-4 bg-light\">\r\n          <div className=\"container-fluid\">\r\n            <h1>{friend.id ? \"Edit Friend\" : \"New Friend\"}</h1>\r\n          </div>\r\n        </div>\r\n\r\n        <form name=\"registrationForm\" className=\"text-center mt-4 position-absolute top-5 start-50 translate-middle-x\">\r\n          <p><button onClick={goToFriends} type=\"button\" className=\"btn btn-primary btn-sm m-1\">Friends</button>\r\n            <button onClick={friend.id ? onSave : onSubmit} type=\"button\" className=\"btn btn-primary btn-sm m-1\">{friend.id ? \"Save\" : \"Submit\"}</button></p>\r\n          <input type=\"text\" defaultValue={friend.id} id=\"id\" name=\"id\" className=\"form-control d-none\" readOnly />\r\n          <label>Title</label>\r\n          <input type=\"text\" id=\"title\" value={friend.title} name=\"title\" className=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Headline</label>\r\n          <input type=\"text\" id=\"headline\" value={friend.headline} name=\"headline\" className=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Summary</label>\r\n          <input type=\"text\" id=\"summary\" value={friend.summary} name=\"summary\" className=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Bio</label>\r\n          <input type=\"textarea\" id=\"bio\" value={friend.bio} name=\"bio\" className=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Slug</label>\r\n          <input type=\"text\" id=\"slug\" value={friend.slug} name=\"slug\" className=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Avatar URL</label>\r\n          <input type=\"text\" id=\"imageUrl\" value={friend.primaryImage.imageUrl} name=\"imageUrl\" className=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Status</label>\r\n          <select id=\"statusId\" name=\"statusId\" value={friend.statusId} className=\"form-select\" onChange={onFormFieldChange}>\r\n            <option value=\"\">Select a status</option>\r\n            <option value=\"Active\">Active</option>\r\n            <option value=\"NoStat\">No status</option>\r\n            <option value=\"Deleted\">Deleted</option>\r\n            <option value=\"Flagged\">Flagged</option>\r\n          </select>\r\n        </form>\r\n      </div>\r\n\r\n    </React.Fragment>\r\n\r\n  );\r\n}\r\n\r\nexport default NewEditFriends;\r\n","//NewEditJobs functional component called from the \r\n//jobs component. This component is either activated\r\n//by the link /jobs/new or /jobs/:jobId. When\r\n//passed with a jobId, it will also include a job\r\n//record from the state. This job record does not get \r\n//passed back to jobs.jsx component. This component \r\n//will let the user edit/save an existing job record\r\n//using API calls, but also create a new record.\r\n//\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\r\nimport * as jobsService from \"../../services/jobsService\";\r\nimport * as techCompaniesService from \"../../services/techCompaniesService\";\r\nimport Toastr from \"toastr\";\r\n\r\nfunction NewEditJobs() {\r\n\r\n  //Init the useNavigate hook\r\n  //\r\n  const navigate = useNavigate();\r\n\r\n  //Init the useLocation hook\r\n  //only grab the state hook \r\n  //from the location object\r\n  //\r\n  const { state } = useLocation();\r\n\r\n  //Init the useParams hook and \r\n  //only grab the jobId\r\n  //\r\n  const { jobId } = useParams();\r\n\r\n  //Build the framework for the state\r\n  //This JSON outline is exactly how a \r\n  //job record is defined by the \r\n  //Sabio API page. An render with a \r\n  //payload will overwrite this base\r\n  //outline.\r\n  //\r\n  const [job, setJob] = useState({\r\n    \"id\": jobId,\r\n    \"title\": \"\",\r\n    \"description\": \"\",\r\n    \"summary\": \"\",\r\n    \"pay\": \"\",\r\n    \"entityTypeId\": 0,\r\n    \"slug\": \"\",\r\n    \"statusId\": \"\",\r\n    \"skills\": [],\r\n    \"techCompany\": {\r\n      \"id\": 0,\r\n      \"slug\": \"\",\r\n      \"statusId\": \"\",\r\n      \"name\": \"\",\r\n      \"headline\": \"\",\r\n      \"profile\": \"\",\r\n      \"summary\": \"\",\r\n      \"entityTypeId\": 0,\r\n      \"contactInformation\": {\r\n        \"id\": 0,\r\n        \"entityId\": 0,\r\n        \"data\": \"\",\r\n        \"dateCreated\": \"\",\r\n        \"dateModified\": \"\"\r\n      },\r\n      \"images\": [\r\n        {\r\n          \"id\": 0,\r\n          \"entityId\": 0,\r\n          \"imageTypeId\": \"\",\r\n          \"imageUrl\": \"\"\r\n        }\r\n      ],\r\n      \"urls\": [\r\n        {\r\n          \"id\": 0,\r\n          \"entityId\": 0,\r\n          \"url\": \"\"\r\n        }\r\n      ],\r\n      \"friends\": null,\r\n      \"tags\": [],\r\n      \"dateCreated\": \"\",\r\n      \"dateModified\": \"\"\r\n    },\r\n    \"dateCreated\": \"\",\r\n    \"dateModified\": \"\",\r\n    \"type\": \"\",\r\n    \"jobUrl\": \"\",\r\n    \"companyList\": \"\",\r\n    \"skillString\": \"\"\r\n  });\r\n\r\n\r\n  //populate the state with the jobs object\r\n  //provided by either the API call or the state\r\n  //object passed from the jobs.jsx component\r\n  //Parameters:\r\n  //- jobObject - A job object\r\n  //\r\n  const populateJobState = (jobObject) => {\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setJob((prevJob) => {\r\n\r\n      //Get a copy of the previous state\r\n      //\r\n      let pageDataComp = { ...prevJob };\r\n\r\n      //Overwrite that with the job object\r\n      //this step really isn't necessary\r\n      //\r\n      pageDataComp = jobObject;\r\n      //getCompanyOptions();  //pageDataComp.companyOptions = \r\n      pageDataComp.skillString = commaSepSkills(jobObject.skills);\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  }\r\n\r\n\r\n  //gathers all company records that user created\r\n  //and in conjunction with getCompsSuccess,\r\n  //returns HTML <option> elements in text \r\n  //\r\n  const getCompanyOptions = () => {\r\n    techCompaniesService\r\n      .getPage(0, 1000)\r\n      .then(getCompsSuccess)\r\n      .catch(getCompsFail);\r\n  }\r\n\r\n  //After successful get of company records,\r\n  //create the <option> elements and update the state\r\n  //Parameters:\r\n  //- response - The return from the API/Axios call\r\n  //\r\n  const getCompsSuccess = (data) => {\r\n    let companiesArray = data.item.pagedItems;\r\n    let companiesString = `<option value=\"0\">Select a Company</option>`;\r\n    for (let index = 0; index < companiesArray.length; index++) {\r\n      companiesString += `<option value=\"${companiesArray[index].id}\">${companiesArray[index].name}</option>`;\r\n    }\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setJob((prevState) => {\r\n\r\n      //grab a copy of the previous state\r\n      //\r\n      const newState = { ...prevState };\r\n\r\n      //assign generated company string\r\n      //\r\n      newState.companyList = companiesString;\r\n\r\n      //This call will start a re-render of the component\r\n      //\r\n      return newState;\r\n    });\r\n  }\r\n\r\n\r\n  //if the company list fails to load, let the\r\n  //user know\r\n  //\r\n  const getCompsFail = (err) => {\r\n    console.log(\"getCompsFail\", err)\r\n    Toastr.error(\"Could not generate the list of companies.\")\r\n  }\r\n\r\n\r\n  //Form field function to change state with\r\n  //every onChange with the input HTML elements.\r\n  //This was copied and modified from the Sabio\r\n  //Wiki example.\r\n  //Parameters:\r\n  //- e - Event object\r\n  // \r\n  const onFormFieldChange = (e) => {   //captures this event\r\n\r\n    //Assign the target of the event to the target variable\r\n    //\r\n    const target = e.target;\r\n\r\n    //This is the value to update the state with\r\n    //\r\n    const value = target.value;\r\n\r\n    //This is the name of the target. Your HTML elements\r\n    //MUST have the name property set for this to work.\r\n    //\r\n    const name = target.name;\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setJob(prevJob => {\r\n\r\n      // copy the previous state\r\n      //\r\n      const newUserObject = {\r\n        ...prevJob\r\n      };\r\n\r\n      //change the value of the copied object using the name and using bracket notation\r\n      //ONE conditional is the image, which doesn't sit at the same level with the other \r\n      //properties of the JSON\r\n      //\r\n      if (name === \"company\") {\r\n        newUserObject.techCompany.id = value;  //  <- not bracket notation!!!!\r\n      } else {\r\n        newUserObject[name] = value;  //  <- bracket notation!!!!\r\n      }\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return newUserObject;\r\n    });\r\n  };\r\n\r\n\r\n  //Invoked following mount\r\n  //This function either grabs the job object\r\n  //from the passed state or using an API call\r\n  //Parameters:\r\n  //- thisjob - This is the existing state\r\n  //  object with the jobId at a minimum\r\n  //- passedState = This is the state object\r\n  //  (or not). It is either populated or null.\r\n  //\r\n  const getJob = (thisJob, passedState) => {\r\n\r\n    //if a state was actually passed\r\n    //use it to populate the form.\r\n    //\r\n    if (passedState) {\r\n      populateJobState(passedState);\r\n    }\r\n    //If a state object is not provided, \r\n    //perform the API call using the ID\r\n    //\r\n    else {\r\n      jobsService\r\n        .getById(thisJob.id)\r\n        .then(getSuccess)\r\n        .catch(getError);\r\n    }\r\n  }\r\n\r\n\r\n  //Successful get of job record\r\n  //Parmeters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const getSuccess = (response) => {\r\n\r\n    //Since this object was retrieved from the Sabio API, it will\r\n    //not contain the type and jobUrl properties. They are \r\n    //added here\r\n    //\r\n    let jobObject = { ...response.item, type: \"JOB_EDIT\", jobUrl: \"\" }\r\n    //Call to populate the input elements\r\n    //\r\n    populateJobState(jobObject);    //update the state...this re-renders and reflects on the page\r\n\r\n    //Let the user know the records were retrieved \r\n    //successfully\r\n    //\r\n    Toastr.success(\"Your job is loaded!\");\r\n  }\r\n\r\n\r\n  //Unsuccessful get of job record\r\n  //Parmeters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const getError = (err) => {\r\n\r\n    //Build the error string\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know the record \r\n    //retrieval failed\r\n    //\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  //Build the save API payload\r\n  //This builds the JSON for the \r\n  //update call to the API\r\n  //\r\n  const getSavePayload = () => {\r\n    return {\r\n      \"id\": job.id,\r\n      \"title\": job.title,\r\n      \"description\": job.description,\r\n      \"summary\": job.summary,\r\n      \"pay\": job.pay,\r\n      \"slug\": job.slug,\r\n      \"statusId\": job.statusId,\r\n      \"techCompanyId\": job.techCompany.id,\r\n      \"skills\": getSkillsArray(job.skillString)\r\n    }\r\n  }\r\n\r\n  //receives a comma-separated list and places\r\n  //the skills into an array\r\n  //Parameters:\r\n  //- skillsString - A comma-separated list\r\n  //\r\n  const getSkillsArray = (skillsString) => {\r\n    //replace comma-spaces then split into an array\r\n    return skillsString.replace(/, /g, \",\").split(\",\");\r\n  }\r\n\r\n\r\n  //Build the save API payload\r\n  //This builds the JSON for the \r\n  //add call to the API\r\n  //\r\n  const getSubmitPayload = () => {\r\n    return {\r\n      \"title\": job.title,\r\n      \"description\": job.description,\r\n      \"summary\": job.summary,\r\n      \"pay\": job.pay,\r\n      \"slug\": job.slug,\r\n      \"statusId\": job.statusId,\r\n      \"techCompanyId\": job.techCompany.id,\r\n      \"skills\": getSkillsArray(job.skillString)\r\n    }\r\n  }\r\n\r\n\r\n  //Invoked on save button click\r\n  //this initiates the save of an existing\r\n  //job record\r\n  //Parameters:\r\n  //- e - The event\r\n  //\r\n  const onSave = (e) => {\r\n\r\n    //This is necessary to prevent a non-use\r\n    //error for the event object\r\n    //\r\n    console.log(\"onSave\", e);\r\n\r\n    //Make the update call to the API\r\n    //\r\n    jobsService\r\n      .update(job.id, getSavePayload())\r\n      .then(saveSuccess)\r\n      .catch(saveError);\r\n  }\r\n\r\n\r\n  //Successful save of job record\r\n  //Parmeters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const saveSuccess = (response) => {\r\n\r\n    //This is necessary to prevent a non-use\r\n    //error for the response object\r\n    //\r\n    console.log(\"saveSuccess\", response);\r\n\r\n    //Let the user know the record \r\n    //save was successful\r\n    //    \r\n    Toastr.success(\"Your record has been updated!\");\r\n  }\r\n\r\n\r\n  //Unsuccessful save of job record\r\n  //Parmeters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const saveError = (err) => {\r\n\r\n    //Build the error message\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know the record \r\n    //save failed\r\n    //    \r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  //Invoked on submit button click\r\n  //this initiates the adding of a new\r\n  //job record\r\n  //Parameters:\r\n  //- e - The event object\r\n  //\r\n  const onSubmit = (e) => {\r\n\r\n    //This is necessary to prevent a non-use\r\n    //error for the event object\r\n    //    \r\n    console.log(\"onSubmit\", e);\r\n\r\n    //Make the add call to the API\r\n    //    \r\n    jobsService\r\n      .add(getSubmitPayload())\r\n      .then(submitSuccess)\r\n      .catch(submitError);\r\n  }\r\n\r\n\r\n  //Successful add of job record\r\n  //Parmeters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const submitSuccess = (response) => {\r\n\r\n    //this toastr can run just fine on creation even\r\n    //though the page is diverted, since the navigation\r\n    //won't happen until after the state change, which\r\n    //is asynchronous\r\n    //\r\n    Toastr.success(\"New job record created!<br>Feel free to edit your new job record.\");\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setJob(prevJob => {\r\n\r\n      //Make a copy of the previous state\r\n      //\r\n      const newUserObject = {\r\n        ...prevJob\r\n      };\r\n\r\n      //Add the record ID to the state, but also\r\n      //change the type, which will allow redirect\r\n      //uning navigate at the useEffect\r\n      newUserObject.id = response.data.item;\r\n      newUserObject.type = \"JOB_ADD\"; //<- since this has changed, the useEffect will invoke again\r\n      newUserObject.jobUrl = \"/jobs/\" + response.data.item;   //this is the next destination\r\n      //newUserObject.skillString = commaSepSkills(response.skills);\r\n\r\n      //This call will start a re-render of the component\r\n      //\r\n      return newUserObject;\r\n    });\r\n  }\r\n\r\n\r\n  //Unsuccessful add of job record\r\n  //Parmeters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const submitError = (err) => {\r\n\r\n    //Build error response\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know that the add\r\n    //failed\r\n    //\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  //Runs after mount\r\n  //It will re-run when the job.type \r\n  //changes in the state\r\n  // \r\n  useEffect(() => {\r\n\r\n    //populate the company list\r\n    //\r\n    getCompanyOptions();\r\n\r\n    //If the type of operation we completed\r\n    //was an \"add new\"\r\n    //\r\n    if (job.type === \"JOB_ADD\") {\r\n\r\n\r\n      //Prepare the new state object with the correct\r\n      //properies of type and jobUrl\r\n      //\r\n      const stateObj = { ...job, type: \"JOB_EDIT\", jobUrl: \"\" };\r\n\r\n      //Use the existing state object jobUrl to redirect to\r\n      //this same page, also passing the new state object.\r\n      //This operation will display the new record in edit mode\r\n      //\r\n      navigate(job.jobUrl, { state: stateObj });\r\n\r\n    } else {\r\n\r\n      //If the type is not set to ADD\r\n      //call the get function to populate\r\n      //the page\r\n      //\r\n      if (job.id) getJob(job, state);\r\n\r\n    }\r\n\r\n  }, [job.type]);  //<-useEffect watches for changes\r\n\r\n\r\n  //Invoked on jobs button click\r\n  //navigates back to the jobs page\r\n  //Parameters:\r\n  //- e - Event object\r\n  //\r\n  const goToJobs = (e) => {\r\n\r\n    //Prevents default operation \r\n    //of the event object\r\n    //\r\n    e.preventDefault();\r\n\r\n    //Redirect to the jobs.jsx component\r\n    //\r\n    navigate(\"/jobs\")\r\n  }\r\n\r\n\r\n  //split the skills array into a comma-separated\r\n  //list\r\n  //Parameter:\r\n  //- anArray - An array of data\r\n  //-\r\n  const commaSepSkills = (anArray) => {\r\n    let aString = \"\";\r\n    for (let index = 0; index < anArray.length; index++) {\r\n      if (index === anArray.length - 1) {\r\n        aString += anArray[index].name;\r\n      } else {\r\n        aString += anArray[index].name + \", \";\r\n      }\r\n    }\r\n    return aString;\r\n  }\r\n\r\n  //main return for display\r\n  //\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container\">\r\n        <div className=\"mb-4 bg-light\">\r\n          <div className=\"container-fluid\">\r\n            <h1>{job.id ? \"Edit job\" : \"New job\"}</h1>\r\n          </div>\r\n        </div>\r\n        <form name=\"controls\" id=\"controls\">\r\n          <p><button onClick={goToJobs} type=\"button\" className=\"btn btn-primary btn-sm m-1\">Jobs</button>\r\n            <button onClick={job.id ? onSave : onSubmit} type=\"button\" className=\"btn btn-primary btn-sm m-1\">{job.id ? \"Save\" : \"Submit\"}</button></p>\r\n          <input type=\"text\" defaultValue={job.id} id=\"id\" name=\"id\" className=\"form-control d-none\" readOnly />\r\n          <label>Job Title</label>\r\n          <input type=\"text\" id=\"title\" name=\"title\" value={job.title} class=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Description</label>\r\n          <input type=\"text\" id=\"description\" name=\"description\" value={job.description} class=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Summary</label>\r\n          <input type=\"text\" id=\"summary\" name=\"summary\" value={job.summary} class=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Pay</label>\r\n          <input type=\"text\" id=\"pay\" name=\"pay\" value={job.pay} class=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Slug</label>\r\n          <input type=\"text\" id=\"slug\" name=\"slug\" value={job.slug} class=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Skills (comma-separated)</label>\r\n          <input type=\"text\" id=\"skillString\" name=\"skillString\" value={job.skillString} onChange={onFormFieldChange} class=\"form-control\" />\r\n          <label>Company</label>\r\n          <select dangerouslySetInnerHTML={{ __html: job.companyList }} id=\"company\" name=\"company\" value={job.techCompany.id} class=\"form-select\" onChange={onFormFieldChange}>\r\n            {/* the above ^^^^ was required ^^^^^ because it was ^^^^^  only writing text, not HTML to the page */}\r\n          </select>\r\n          <label>Status</label>\r\n          <select id=\"statusId\" value={job.statusId} name=\"statusId\" onChange={onFormFieldChange} class=\"form-select\">\r\n            <option value=\"\">Select a status</option>\r\n            <option value=\"Active\">Active</option>\r\n            <option value=\"NotSet\">No status</option>\r\n            <option value=\"Deleted\">Deleted</option>\r\n            <option value=\"Flagged\">Flagged</option>\r\n          </select>\r\n        </form>\r\n      </div>\r\n    </React.Fragment>\r\n\r\n  );\r\n}\r\n\r\nexport default NewEditJobs;\r\n","//NewEditCompanies functional component called from the \r\n//companies component. This component is either activated\r\n//by the link /companies/new or /companies/:companyId. When\r\n//passed with a companyId, it will also include a company\r\n//record from the state. This company record does not get \r\n//passed back to companies.jsx component. This component \r\n//will let the user edit/save an existing company record\r\n//using API calls, but also create a new record.\r\n//\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\";\r\n//import * as techCompaniesService from \"../../services/companiesService\";\r\nimport * as techCompaniesService from \"../../services/techCompaniesService\";\r\nimport Toastr from \"toastr\";\r\n\r\nfunction NewEditCompanies() {\r\n\r\n  //Init the useNavigate hook\r\n  //\r\n  const navigate = useNavigate();\r\n\r\n  //Init the useLocation hook\r\n  //only grab the state hook \r\n  //from the location object\r\n  //\r\n  const { state } = useLocation();\r\n\r\n  //Init the useParams hook and \r\n  //only grab the companyId\r\n  //\r\n  const { companyId } = useParams();\r\n\r\n  //Build the framework for the state\r\n  //This JSON outline is exactly how a \r\n  //company record is defined by the \r\n  //Sabio API page. An render with a \r\n  //payload will overwrite this base\r\n  //outline.\r\n  //\r\n  const [company, setCompany] = useState({\r\n    \"id\": companyId,\r\n    \"slug\": \"\",\r\n    \"statusId\": \"\",\r\n    \"name\": \"\",\r\n    \"headline\": \"\",\r\n    \"profile\": \"\",\r\n    \"summary\": \"\",\r\n    \"entityTypeId\": 0,\r\n    \"contactInformation\": {\r\n      \"id\": 0,\r\n      \"entityId\": 0,\r\n      \"data\": \"\",\r\n      \"dateCreated\": \"\",\r\n      \"dateModified\": \"\"\r\n    },\r\n    \"images\": [\r\n      {\r\n        \"id\": 0,\r\n        \"entityId\": 0,\r\n        \"imageTypeId\": \"Main\",\r\n        \"imageUrl\": \"\"\r\n      }\r\n    ],\r\n    \"urls\": [\r\n      {\r\n        \"id\": 0,\r\n        \"entityId\": 0,\r\n        \"url\": \"\"\r\n      }\r\n    ],\r\n    \"friends\": null,\r\n    \"tags\": [\r\n      {\r\n        \"id\": 0,\r\n        \"entityId\": 0,\r\n        \"tagName\": \"\"\r\n      }\r\n    ],\r\n    \"dateCreated\": \"\",\r\n    \"dateModified\": \"\"\r\n  });\r\n\r\n\r\n  //populate the state with the companies object\r\n  //provided by either the API call or the state\r\n  //object passed from the companies.jsx component\r\n  //Parameters:\r\n  //- companyObject - A company object\r\n  //\r\n  const populateCompanieState = (companyObject) => {\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setCompany((prevCompany) => {\r\n\r\n      //Get a copy of the previous state\r\n      //\r\n      let pageDataComp = { ...prevCompany };\r\n\r\n      //Overwrite that with the company object\r\n      //this step really isn't necessary\r\n      //\r\n      pageDataComp = companyObject;\r\n      //getCompanyOptions();  //pageDataComp.companyOptions = \r\n      //pageDataComp.skillString = commaSepSkills(companyObject.skills);\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return pageDataComp;\r\n    });\r\n  }\r\n\r\n\r\n  //gathers all company records that user created\r\n  //and in conjunction with getCompsSuccess,\r\n  //returns HTML <option> elements in text \r\n  //\r\n  // const getCompanyOptions = () => {\r\n  //   techCompaniesService\r\n  //     .getPage()\r\n  //     .then(getCompsSuccess)\r\n  //     .catch(getCompsFail);\r\n  // }\r\n\r\n  //After successful get of company records,\r\n  //create the <option> elements and update the state\r\n  //Parameters:\r\n  //- response - The return from the API/Axios call\r\n  //\r\n  // const getCompsSuccess = (response) => {\r\n  //   // let companiesArray = response.data.item.pagedItems;\r\n  //   // let companiesString = `<option value=\"0\">Select a Company</option>`;\r\n  //   // for (let index = 0; index < companiesArray.length; index++) {\r\n  //   //   companiesString += `<option value=\"${companiesArray[index].id}\">${companiesArray[index].name}</option>`;\r\n  //   // }\r\n\r\n  //   //set the state\r\n  //   //Parameters:\r\n  //   //- An arrow function that will provide a \r\n  //   //  modifed copy of the previous state.\r\n  //   //\r\n  //   setCompany((prevState) => {\r\n\r\n  //     //grab a copy of the previous state\r\n  //     //\r\n  //     const newState = { ...prevState };\r\n\r\n  //     //assign generated company string\r\n  //     //\r\n  //     //newState.companyList = companiesString;\r\n\r\n  //     //This call will start a re-render of the component\r\n  //     //\r\n  //     return newState;\r\n  //   });\r\n  // }\r\n\r\n\r\n  //if the company list fails to load, let the\r\n  //user know\r\n  //\r\n  // const getCompsFail = (err) => {\r\n  //   console.log(\"getCompsFail\", err)\r\n  //   Toastr.error(\"Could not generate the list of companies.\")\r\n  // }\r\n\r\n\r\n  //Form field function to change state with\r\n  //every onChange with the input HTML elements.\r\n  //This was copied and modified from the Sabio\r\n  //Wiki example.\r\n  //Parameters:\r\n  //- e - Event object\r\n  // \r\n  const onFormFieldChange = (e) => {   //captures this event\r\n\r\n    //Assign the target of the event to the target variable\r\n    //\r\n    const target = e.target;\r\n\r\n    //This is the value to update the state with\r\n    //\r\n    const value = target.value;\r\n\r\n    //This is the name of the target. Your HTML elements\r\n    //MUST have the name property set for this to work.\r\n    //\r\n    const name = target.name;\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setCompany(prevCompany => {\r\n\r\n      // copy the previous state\r\n      //\r\n      const newUserObject = {\r\n        ...prevCompany\r\n      };\r\n\r\n      //change the value of the copied object using the name and using bracket notation\r\n      //ONE conditional is the image, which doesn't sit at the same level with the other \r\n      //properties of the JSON\r\n      //\r\n      if (name === \"imageUrl\") {\r\n        newUserObject.images[0].imageUrl = value;  //  <- not bracket notation!!!!\r\n      } else if (name === \"contact\") {\r\n        newUserObject.contactInformation.data = value;  //  <- not bracket notation!!!!\r\n      } else if (name === \"url\") {\r\n        newUserObject.urls[0].url = value;  //  <- not bracket notation!!!!\r\n      }\r\n      else {\r\n        newUserObject[name] = value;  //  <- bracket notation!!!!\r\n      }\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return newUserObject;\r\n    });\r\n  };\r\n\r\n\r\n  //Invoked following mount\r\n  //This function either grabs the company object\r\n  //from the passed state or using an API call\r\n  //Parameters:\r\n  //- thiscompany - This is the existing state\r\n  //  object with the companyId at a minimum\r\n  //- passedState = This is the state object\r\n  //  (or not). It is either populated or null.\r\n  //\r\n  const getCompany = (thisCompany, passedState) => {\r\n\r\n    //if a state was actually passed\r\n    //use it to populate the form.\r\n    //\r\n    if (passedState) {\r\n      populateCompanieState(passedState);\r\n    }\r\n    //If a state object is not provided, \r\n    //perform the API call using the ID\r\n    //\r\n    else {\r\n      techCompaniesService\r\n        .getById(thisCompany.id)\r\n        .then(getSuccess)\r\n        .catch(getError);\r\n    }\r\n  }\r\n\r\n\r\n  //Successful get of company record\r\n  //Parmeters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const getSuccess = (response) => {\r\n\r\n    //Since this object was retrieved from the Sabio API, it will\r\n    //not contain the type and companyUrl properties. They are \r\n    //added here\r\n    //\r\n    let companyObject = { ...response.item, type: \"COMPANY_EDIT\", companyUrl: \"\" }\r\n    //Call to populate the input elements\r\n    //\r\n    populateCompanieState(companyObject);    //update the state...this re-renders and reflects on the page\r\n\r\n    //Let the user know the records were retrieved \r\n    //successfully\r\n    //\r\n    Toastr.success(\"Your company is loaded!\");\r\n  }\r\n\r\n\r\n  //Unsuccessful get of company record\r\n  //Parmeters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const getError = (err) => {\r\n\r\n    //Build the error string\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know the record \r\n    //retrieval failed\r\n    //\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  //Build the save API payload\r\n  //This builds the JSON for the \r\n  //update call to the API\r\n  //\r\n  const getSavePayload = () => {\r\n\r\n    return {\r\n      \"id\": company.id,\r\n      \"name\": company.name,\r\n      \"profile\": company.profile,\r\n      \"summary\": company.summary,\r\n      \"headline\": company.headline,\r\n      \"contactInformation\": company.contactInformation.data,\r\n      \"slug\": company.slug,\r\n      \"statusId\": company.statusId,\r\n      \"images\": [\r\n        {\r\n          \"imageTypeId\": company.images[0].imageTypeId,\r\n          \"imageUrl\": company.images[0].imageUrl\r\n        }\r\n      ],\r\n      \"urls\": [\r\n        company.urls[0].url\r\n      ],\r\n      \"tags\": company.tags ? company.tags[0].name : [\"\"],\r\n      \"friendIds\": company.friends\r\n    }\r\n\r\n\r\n  }\r\n\r\n  //receives a comma-separated list and places\r\n  //the skills into an array\r\n  //Parameters:\r\n  //- skillsString - A comma-separated list\r\n  //\r\n  // const getSkillsArray = (skillsString) => {\r\n  //   //replace comma-spaces then split into an array\r\n  //   return skillsString.replace(/, /g, \",\").split(\",\");\r\n  // }\r\n\r\n\r\n  //Build the save API payload\r\n  //This builds the JSON for the \r\n  //add call to the API\r\n  //\r\n  const getSubmitPayload = () => {\r\n    return {\r\n      \"name\": company.name,\r\n      \"profile\": company.profile,\r\n      \"summary\": company.summary,\r\n      \"headline\": company.headline,\r\n      \"contactInformation\": company.contactInformation.data,\r\n      \"slug\": company.slug,\r\n      \"statusId\": company.statusId,\r\n      \"images\": [\r\n        {\r\n          \"imageTypeId\": \"Main\",\r\n          \"imageUrl\": company.images[0].imageUrl\r\n        }\r\n      ],\r\n      \"urls\": [\r\n        company.urls[0].url\r\n      ],\r\n      \"tags\": company.tags ? company.tags[0].name : [\"\"],\r\n      \"friendIds\": company.friends\r\n    }\r\n\r\n  }\r\n\r\n\r\n  //Invoked on save button click\r\n  //this initiates the save of an existing\r\n  //company record\r\n  //Parameters:\r\n  //- e - The event\r\n  //\r\n  const onSave = (e) => {\r\n\r\n    //This is necessary to prevent a non-use\r\n    //error for the event object\r\n    //\r\n    console.log(\"onSave\", e);\r\n\r\n    //Make the update call to the API\r\n    //\r\n    techCompaniesService\r\n      .update(company.id, getSavePayload())\r\n      .then(saveSuccess)\r\n      .catch(saveError);\r\n  }\r\n\r\n  //Successful save of company record\r\n  //Parmeters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const saveSuccess = (response) => {\r\n\r\n    //This is necessary to prevent a non-use\r\n    //error for the response object\r\n    //\r\n    console.log(\"saveSuccess\", response);\r\n\r\n    //Let the user know the record \r\n    //save was successful\r\n    //    \r\n    Toastr.success(\"Your record has been updated!\");\r\n  }\r\n\r\n\r\n  //Unsuccessful save of company record\r\n  //Parmeters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const saveError = (err) => {\r\n\r\n    //Build the error message\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know the record \r\n    //save failed\r\n    //    \r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  //Invoked on submit button click\r\n  //this initiates the adding of a new\r\n  //company record\r\n  //Parameters:\r\n  //- e - The event object\r\n  //\r\n  const onSubmit = (e) => {\r\n\r\n    //This is necessary to prevent a non-use\r\n    //error for the event object\r\n    //    \r\n    console.log(\"onSubmit\", e);\r\n\r\n    //Make the add call to the API\r\n    //    \r\n    techCompaniesService\r\n      .add(getSubmitPayload())\r\n      .then(submitSuccess)\r\n      .catch(submitError);\r\n  }\r\n\r\n\r\n  //Successful add of company record\r\n  //Parmeters:\r\n  //- response - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const submitSuccess = (response) => {\r\n\r\n    //this toastr can run just fine on creation even\r\n    //though the page is diverted, since the navigation\r\n    //won't happen until after the state change, which\r\n    //is asynchronous\r\n    //\r\n    Toastr.success(\"New company record created!<br>Feel free to edit your new company record.\");\r\n\r\n    //set the state\r\n    //Parameters:\r\n    //- An arrow function that will provide a \r\n    //  modifed copy of the previous state.\r\n    //\r\n    setCompany(prevCompany => {\r\n\r\n      //Make a copy of the previous state\r\n      //\r\n      const newUserObject = {\r\n        ...prevCompany\r\n      };\r\n\r\n      //Add the record ID to the state, but also\r\n      //change the type, which will allow redirect\r\n      //uning navigate at the useEffect\r\n      newUserObject.id = response.data.item;\r\n      newUserObject.type = \"COMPANY_ADD\"; //<- since this has changed, the useEffect will invoke again\r\n      newUserObject.companyUrl = \"/companies/\" + response.data.item;   //this is the next destination\r\n      //newUserObject.skillString = commaSepSkills(response.skills);\r\n\r\n      //This call will start a re-render of the component\r\n      //\r\n      return newUserObject;\r\n    });\r\n  }\r\n\r\n\r\n  //Unsuccessful add of company record\r\n  //Parmeters:\r\n  //- err - The returned Sabio API object\r\n  //  via axios\r\n  //\r\n  const submitError = (err) => {\r\n\r\n    //Build error response\r\n    //\r\n    let errorString = \"<ul><li>\";\r\n    for (let i = 0; i < err.response.data.errors.length; i++) {\r\n      errorString += err.response.data.errors[i] + \"</li><li>\";\r\n    }\r\n    errorString += \"END OF LIST</li><ul>\";\r\n\r\n    //Let the user know that the add\r\n    //failed\r\n    //\r\n    Toastr.warning(errorString);\r\n  }\r\n\r\n\r\n  //Runs after mount\r\n  //It will re-run when the company.type \r\n  //changes in the state\r\n  // \r\n  useEffect(() => {\r\n\r\n    //populate the company list\r\n    //\r\n    //getCompanyOptions();\r\n\r\n    //If the type of operation we completed\r\n    //was an \"add new\"\r\n    //\r\n    if (company.type === \"COMPANY_ADD\") {\r\n\r\n\r\n      //Prepare the new state object with the correct\r\n      //properies of type and companyUrl\r\n      //\r\n      const stateObj = { ...company, type: \"COMPANY_EDIT\", companyUrl: \"\" };\r\n\r\n      //Use the existing state object companyUrl to redirect to\r\n      //this same page, also passing the new state object.\r\n      //This operation will display the new record in edit mode\r\n      //\r\n      navigate(company.companyUrl, { state: stateObj });\r\n\r\n    } else {\r\n\r\n      //If the type is not set to ADD\r\n      //call the get function to populate\r\n      //the page\r\n      //\r\n      if (company.id) getCompany(company, state);\r\n\r\n    }\r\n\r\n  }, [company.type]);  //<-useEffect watches for changes\r\n\r\n\r\n  //Invoked on companies button click\r\n  //navigates back to the companies page\r\n  //Parameters:\r\n  //- e - Event object\r\n  //\r\n  const goToCompanies = (e) => {\r\n\r\n    //Prevents default operation \r\n    //of the event object\r\n    //\r\n    e.preventDefault();\r\n\r\n    //Redirect to the companies.jsx component\r\n    //\r\n    navigate(\"/companies\")\r\n  }\r\n\r\n\r\n  //split the skills array into a comma-separated\r\n  //list\r\n  //Parameter:\r\n  //- anArray - An array of data\r\n  //-\r\n  // const commaSepSkills = (anArray) => {\r\n  //   let aString = \"\";\r\n  //   for (let index = 0; index < anArray.length; index++) {\r\n  //     if (index === anArray.length - 1) {\r\n  //       aString += anArray[index].name;\r\n  //     } else {\r\n  //       aString += anArray[index].name + \", \";\r\n  //     }\r\n  //   }\r\n  //   return aString;\r\n  // }\r\n\r\n  //main return for display\r\n  //\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container\">\r\n        <div className=\"mb-4 bg-light\">\r\n          <div className=\"container-fluid\">\r\n            <h1>{company.id ? \"Edit company\" : \"New company\"}</h1>\r\n          </div>\r\n        </div>\r\n        <form name=\"controls\" id=\"controls\">\r\n          <p><button onClick={goToCompanies} type=\"button\" className=\"btn btn-primary btn-sm m-1\">Companies</button>\r\n            <button onClick={company.id ? onSave : onSubmit} type=\"button\" className=\"btn btn-primary btn-sm m-1\">{company.id ? \"Save\" : \"Submit\"}</button></p>\r\n          <input type=\"text\" defaultValue={company.id} id=\"id\" name=\"id\" className=\"form-control d-none\" readOnly />\r\n          <label>Company Name</label>\r\n          <input type=\"text\" id=\"name\" name=\"name\" value={company.name} class=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Headline</label>\r\n          <input type=\"text\" id=\"headline\" name=\"headline\" value={company.headline} class=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Summary</label>\r\n          <input type=\"text\" id=\"summary\" name=\"summary\" value={company.summary} class=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Profile</label>\r\n          <input type=\"text\" id=\"profile\" name=\"profile\" value={company.profile} class=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Slug</label>\r\n          <input type=\"text\" id=\"slug\" name=\"slug\" value={company.slug} class=\"form-control\" onChange={onFormFieldChange} />\r\n          <label>Image URL</label>\r\n          <input type=\"text\" id=\"imageUrl\" name=\"imageUrl\" value={company.images[0].imageUrl} onChange={onFormFieldChange} class=\"form-control\" />\r\n          <label>Contact Info</label>\r\n          <input type=\"text\" id=\"contact\" name=\"contact\" value={company.contactInformation.data} onChange={onFormFieldChange} class=\"form-control\" />\r\n          <label>Web Site</label>\r\n          <input type=\"text\" id=\"url\" name=\"url\" value={company.urls[0].url} onChange={onFormFieldChange} class=\"form-control\" />\r\n          <label>Status</label>\r\n          <select id=\"statusId\" value={company.statusId} name=\"statusId\" onChange={onFormFieldChange} class=\"form-select\">\r\n            <option value=\"\">Select a status</option>\r\n            <option value=\"Active\">Active</option>\r\n            <option value=\"NotSet\">No status</option>\r\n            <option value=\"Deleted\">Deleted</option>\r\n            <option value=\"Flagged\">Flagged</option>\r\n          </select>\r\n        </form>\r\n      </div>\r\n    </React.Fragment>\r\n\r\n  );\r\n}\r\n\r\nexport default NewEditCompanies;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as filesService from \"../../services/filesService\";\r\n\r\n\r\nfunction FileUpload() {\r\n\r\n    //set states\r\n    //\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [isFilePicked, setIsFilePicked] = useState(false);\r\n    const [fileCollection, setFileList] = useState({\r\n        files: [],\r\n        fileData: []\r\n    });\r\n\r\n    //when the file is selected\r\n    //\r\n    const changeHandler = (event) => {\r\n        //set states\r\n        setSelectedFile(() => { return event.target.files[0] });\r\n        setIsFilePicked(() => { return true });\r\n    };\r\n\r\n    //push the new file onto the file list array\r\n    //\r\n    const addSelectionToImageList = (newFile) => {\r\n        setFileList((prevFileCollection) => {\r\n\r\n            let newObj = JSON.parse(JSON.stringify(prevFileCollection));\r\n\r\n            newObj.files.push(newFile);\r\n            newObj.fileData = newObj.files.map(buildAnchors);\r\n\r\n            return newObj;\r\n\r\n        })\r\n    }\r\n\r\n    //when the submit button is clicked\r\n    //\r\n    const submitFile = () => {\r\n\r\n        const formData = new FormData();\r\n        formData.append('File', selectedFile);\r\n\r\n        filesService\r\n            .uploadFile(formData)\r\n            .then(uploadSuccess)\r\n            .catch(uploadError);\r\n\r\n    }\r\n\r\n    //mapping array\r\n    //\r\n    const buildAnchors = (link) => {\r\n        return `<tr><td><a href=${link} target=\"_blank\" alt=${link}>${link}</a></td></tr>`;\r\n    }\r\n\r\n\r\n    var uploadSuccess = (response) => {\r\n        console.log(\"success\", response);\r\n        setIsFilePicked(true);\r\n        addSelectionToImageList(response.data.items[0])\r\n    }\r\n\r\n    //failure\r\n    var uploadError = (err) => {\r\n        console.log(\"failure\", err);\r\n    }\r\n\r\n\r\n    // this is invoked following successful mount\r\n    // \r\n    useEffect(() => {\r\n        setSelectedFile(() => { return \"\" });\r\n        setIsFilePicked(() => { return false });\r\n    }, [fileCollection.files]\r\n    );\r\n\r\n    return (\r\n\r\n        <div>\r\n            <input type=\"file\" name=\"file\" onChange={changeHandler} />\r\n            {isFilePicked ? (\r\n                <div>\r\n                    <h5>File Information</h5>\r\n                    <p>Filetype: {selectedFile.type}</p>\r\n                    <p>Size in bytes: {selectedFile.size}</p>\r\n                    <p>\r\n                        lastModifiedDate:{' '}\r\n                        {selectedFile.lastModifiedDate.toLocaleDateString()}\r\n                    </p>\r\n                    <h5>File List</h5>\r\n\r\n\r\n                </div>\r\n            ) : (\r\n                <p>Select a file to show details</p>\r\n            )}\r\n\r\n            <div>\r\n                <button onClick={submitFile}>Submit</button>\r\n                <table className=\"table\" dangerouslySetInnerHTML={{ __html: fileCollection.fileData ? fileCollection.fileData : \"No Files Uploaded\" }}>\r\n\r\n                </table>\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\nexport default FileUpload;","import axios from \"axios\";\r\n\r\nconst endpoint = \"https://api.remotebootcamp.dev/api/files\";\r\n\r\n\r\n//all service functions follow\r\n\r\n//get entity by id\r\n//done for events\r\nconst uploadFile = (payload) => {\r\n\r\n    console.log(\"uploading file\");\r\n    const config = {\r\n        method: \"POST\",\r\n        url: endpoint,\r\n        data: payload,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"multipart/form-data\" }\r\n    };\r\n    return axios(config); //.then((response) => { return { id: response.data.item, ...payload } });\r\n\r\n}\r\n\r\nexport { uploadFile };\r\n","\r\n\r\nfunction PoliticalCandidateCard(props) {\r\n\r\n    console.log(\"id at card\", props.politicalCandidate.id);\r\n\r\n    return (\r\n\r\n        <div className=\"card\" style={(props.politicalCandidate.winner) ? { border: \"green 10px solid\" } : { border: \"10px solid\" }}>\r\n            <p className=\"d-none\" id={props.politicalCandidate.id}></p>\r\n            <h5>Candidate Name: {props.politicalCandidate.firstName} {props.politicalCandidate.lastName}</h5>\r\n            <p>Party: {props.politicalCandidate.party}</p>\r\n            <p>Current Votes: {props.politicalCandidate.currentVotes}</p>\r\n            Avatar: <img style={{ width: \"100px\", height: \"100px\" }} src={props.politicalCandidate.imageUrl} alt=\"\" />\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default PoliticalCandidateCard;","import axios from \"axios\";\r\n\r\nvar politicalCandidateService = {\r\n    endpoint: \"https://api.remotebootcamp.dev/api/entities/candidates\"\r\n};\r\n\r\n//Add candidate\r\n//Parameters:\r\n//- payload - candidate JSON\r\n//\r\npoliticalCandidateService.add = (payload) => {\r\n\r\n    const config = {\r\n        method: \"POST\",\r\n        url: politicalCandidateService.endpoint,\r\n        data: payload,\r\n        withCredentials: true,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);//.then((response) => { return { id: response.item, ...payload } }); //.then(helper.onGlobalSuccess);//.then((response) => { return { id: response.data.item, ...payload } });\r\n};\r\n\r\nexport default politicalCandidateService\r\n","import React, { useState } from \"react\";\r\nimport PoliticalCandidateCard from \"./PoliticalCandidateCard\";\r\nimport politicalCandidateService from \"./services/politicalCandidateService\";\r\n\r\nfunction PoliticalCandidates() {\r\n\r\n    const [form1, setForm1] = useState({\r\n        \"id\": 0,\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"\",\r\n        \"currentVotes\": 0,\r\n        \"party\": \"\",\r\n        \"imageUrl\": \"\",\r\n        \"form\": 1\r\n    });\r\n\r\n    const [form2, setForm2] = useState({\r\n        \"id\": 0,\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"\",\r\n        \"currentVotes\": 0,\r\n        \"party\": \"\",\r\n        \"imageUrl\": \"\",\r\n        \"form\": 2\r\n    });\r\n\r\n    const buildSubmitPayload = (candidate) => {\r\n\r\n        return {\r\n            \"firstName\": candidate.firstName,\r\n            \"lastName\": candidate.lastName,\r\n            \"currentVotes\": candidate.currentVotes,\r\n            \"party\": candidate.Party,\r\n            \"imageUrl\": candidate.imageUrl,\r\n            \"form\": candidate.form,\r\n        }\r\n    }\r\n\r\n    const getCardForCandidate = (candidate) => {\r\n        return <PoliticalCandidateCard politicalCandidate={candidate} />\r\n    }\r\n\r\n    if (!true) console.log(form1, form2);\r\n\r\n    const onForm1FieldChange = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        const target = e.target;\r\n\r\n        const value = target.value;\r\n        console.log(value);\r\n\r\n        const name = target.name;\r\n\r\n        setForm1(prevForm1 => {\r\n\r\n            const newObject = {\r\n                ...prevForm1\r\n            };\r\n\r\n            newObject[name] = value;\r\n\r\n\r\n            return newObject;\r\n        });\r\n    };\r\n\r\n    const onForm2FieldChange = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        const target = e.target;\r\n\r\n        const value = target.value;\r\n        console.log(value)\r\n\r\n        const name = target.name.substring(0, target.name.length - 1);\r\n\r\n        setForm2(prevForm2 => {\r\n\r\n            const newObject = {\r\n                ...prevForm2\r\n            };\r\n\r\n            newObject[name] = value;\r\n\r\n            return newObject;\r\n        });\r\n    };\r\n\r\n    const onReset = (e) => {\r\n        e.preventDefault();\r\n\r\n        let buttonId = e.target.id;\r\n\r\n        if (buttonId === \"reset\") {\r\n            resetForm1(form1);\r\n        } else {\r\n            resetForm2(form2);\r\n        }\r\n    }\r\n\r\n    const resetForm1 = () => {\r\n\r\n        setForm1((prevForm1) => {\r\n            let newObj = { ...prevForm1 };\r\n\r\n            newObj.id = 0;\r\n            newObj.firstName = \"\";\r\n            newObj.lastName = \"\";\r\n            newObj.party = \"\";\r\n            newObj.currentVotes = 0;\r\n            newObj.imageUrl = \"\";\r\n\r\n            return newObj;\r\n        })\r\n    }\r\n\r\n\r\n    const resetForm2 = () => {\r\n\r\n        setForm2((prevForm2) => {\r\n            let newObj = { ...prevForm2 };\r\n\r\n            newObj.id = 0;\r\n            newObj.firstName = \"\";\r\n            newObj.lastName = \"\";\r\n            newObj.party = \"\";\r\n            newObj.currentVotes = 0;\r\n            newObj.imageUrl = \"\";\r\n\r\n            return newObj;\r\n        })\r\n    }\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let buttonId = e.target.id\r\n\r\n        if (buttonId === \"submit\") {\r\n            console.log(\"clicked 1\");\r\n\r\n            if (!form1.firstName) return;\r\n            if (!form1.lastName) return;\r\n            if (!form1.currentVotes) return;\r\n            if (Number(form1.currentVotes) === 0) return;\r\n            if (!form1.party) return;\r\n            if (!form1.imageUrl) return;\r\n\r\n            politicalCandidateService\r\n                .add(buildSubmitPayload(form1))\r\n                .then(submit1Success)\r\n                .catch(submit1Error)\r\n        } else {\r\n            console.log(\"clicked 2\")\r\n\r\n            if (!form2.firstName) return;\r\n            if (!form2.lastName) return;\r\n            if (!form2.currentVotes) return;\r\n            if (Number(form2.currentVotes) === 0) return;\r\n            if (!form2.party) return;\r\n            if (!form2.imageUrl) return;\r\n\r\n            politicalCandidateService\r\n                .add(buildSubmitPayload(form2))\r\n                .then(submit2Success)\r\n                .catch(submit2Error)\r\n        }\r\n    }\r\n\r\n    const submit1Success = (response) => {\r\n        console.log(response);\r\n\r\n        setForm1((prevForm1) => {\r\n            let newObj = { ...prevForm1 };\r\n            newObj.id = response.data.item;\r\n            return newObj;\r\n        })\r\n    }\r\n\r\n    const submit1Error = (err) => {\r\n        console.log(err);\r\n    }\r\n\r\n    const submit2Success = (response) => {\r\n        console.log(response);\r\n\r\n        setForm2((prevForm2) => {\r\n            let newObj = { ...prevForm2 };\r\n            newObj.id = response.data.item;\r\n            return newObj;\r\n        })\r\n\r\n    }\r\n\r\n    const submit2Error = (err) => {\r\n        console.log(err);\r\n\r\n    }\r\n\r\n    const clickShowWinner = (e) => {\r\n        e.preventDefault();\r\n        let candidate1Totals = Number(form1.currentVotes);\r\n        let candidate2Totals = Number(form2.currentVotes);\r\n\r\n        if (candidate1Totals > candidate2Totals) {\r\n            setForm1((prevForm1) => {\r\n                let newObj = { ...prevForm1 };\r\n                newObj.winner = true;\r\n                return newObj;\r\n            })\r\n            resetForm2();\r\n        } else if (candidate2Totals > candidate1Totals) {\r\n            setForm2((prevForm2) => {\r\n                let newObj = { ...prevForm2 };\r\n                newObj.winner = true;\r\n                return newObj;\r\n            })\r\n            resetForm1();\r\n        } else {\r\n            //no winner\r\n            console.log(\"No winner\");\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"container\">\r\n            <button id=\"showWinner\" onClick={clickShowWinner}>Show Winner</button>\r\n            <div className=\"form-left\">\r\n                <form id=\"form1\" name=\"form1\">\r\n                    <div className=\"form-group\"><p>First Name</p> <input value={form1.firstName} onChange={onForm1FieldChange} type=\"text\" id=\"firstName\" name=\"firstName\"></input></div>\r\n                    <div className=\"form-group\"><p>Last Name</p> <input type=\"text\" value={form1.lastName} onChange={onForm1FieldChange} id=\"lastName\" name=\"lastName\"></input></div>\r\n                    <div className=\"form-group\"><p>Current Votes</p> <input type=\"text\" value={form1.currentVotes} onChange={onForm1FieldChange} id=\"currentVotes\" name=\"currentVotes\"></input></div>\r\n                    <div className=\"form-group\"><p>Party</p> <select value={form1.party} onChange={onForm1FieldChange} id=\"party\" name=\"party\">\r\n                        <option value=\"\"></option>\r\n                        <option value=\"democrat\">Democrat</option>\r\n                        <option value=\"republican\">Republican</option>\r\n                        <option value=\"independent\">Independent</option>\r\n                    </select></div>\r\n                    <div className=\"form-group\"><p>Avatar</p> <input type=\"text\" value={form1.imageUrl} onChange={onForm1FieldChange} id=\"imageUrl\" name=\"imageUrl\"></input></div>\r\n                    <button id=\"submit\" type=\"submit\" onClick={onSubmit}>Submit</button>\r\n                    <button id=\"reset\" onClick={onReset}>Reset</button>\r\n                    {(form1.id > 0) ? getCardForCandidate(form1) : \"\"}\r\n                </form>\r\n            </div>\r\n            <div className=\"form-right\">\r\n                <form id=\"form2\" name=\"form2\">\r\n                    <div className=\"form-group\"><p>First Name</p> <input type=\"text\" value={form2.firstName} onChange={onForm2FieldChange} id=\"firstName2\" name=\"firstName2\"></input></div>\r\n                    <div className=\"form-group\"><p>Last Name</p> <input type=\"text\" value={form2.lastName} onChange={onForm2FieldChange} id=\"lastName2\" name=\"lastName2\"></input></div>\r\n                    <div className=\"form-group\"><p>Current Votes</p> <input type=\"text\" value={form2.currentVotes} onChange={onForm2FieldChange} id=\"currentVotes2\" name=\"currentVotes2\"></input></div>\r\n                    <div className=\"form-group\"><p>Party</p> <select value={form2.party} onChange={onForm2FieldChange} id=\"party2\" name=\"party2\">\r\n                        <option value=\"\"></option>\r\n                        <option value=\"democrat\">Democrat</option>\r\n                        <option value=\"republican\">Republican</option>\r\n                        <option value=\"independent\">Independent</option>\r\n                    </select></div>\r\n                    <div className=\"form-group\"><p>Avatar</p> <input type=\"text\" value={form2.imageUrl} onChange={onForm2FieldChange} id=\"imageUrl2\" name=\"imageUrl2\"></input></div>\r\n                    <button id=\"submit2\" type=\"submit\" onClick={onSubmit}>Submit</button>\r\n                    <button id=\"reset2\" onClick={onReset}>Reset</button>\r\n                    {(form2.id > 0) ? getCardForCandidate(form2) : \"\"}\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n    );\r\n}\r\nexport default PoliticalCandidates;","import axios from \"axios\";\r\n\r\nvar carService = {\r\n    endpoint: \"https://my-json-server.typicode.com/selvaicodes/cars/cars\"\r\n};\r\n\r\n//Add candidate\r\n//Parameters:\r\n//- payload - candidate JSON\r\n//\r\ncarService.getAll = () => {\r\n\r\n    const config = {\r\n        method: \"GET\",\r\n        url: carService.endpoint,\r\n        withCredentials: true,\r\n        crossdomain: true,\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    };\r\n    return axios(config);\r\n};\r\n\r\nexport default carService\r\n","import React from \"react\";\r\n\r\nfunction SingleCar(props) {\r\n\r\n    //clicking the filter button\r\n    const onCarClicked = (e) => {\r\n        e.preventDefault();\r\n        props.onCarClicked({\r\n            make: props.car.make,\r\n            model: props.car.model,\r\n            year: props.car.year\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"card\" style={{ width: \"18rem\" }}>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{props.car.make}</h5>\r\n                    <p className=\"card-text\">{props.car.year}</p>\r\n                    <p className=\"card-text\">{props.car.model}</p>\r\n                </div>\r\n                <div style={{ alignContent: \"baseline\", padding: \"20px\" }}>\r\n                    <button type=\"button\" onClick={onCarClicked} className={props.showButton ? \"select-me btn-primary\" : \"d-none\"}>Select Me</button>\r\n                    {/* {props.showButton ? <button type=\"button\" onClick={onCarClicked} >Select Me</button> : \"\"} */}\r\n                </div>\r\n            </div >\r\n\r\n        </React.Fragment>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default SingleCar;","import React, { useState, useEffect } from \"react\";\r\nimport carService from \"./services/carService\";\r\nimport SingleCar from \"./SingleCar\";\r\n\r\n\r\nfunction Cars() {\r\n\r\n    //This is my cars state\r\n    const [cars, setCars] = useState({\r\n        items: [],                      //these is the array as it comes back from the ajax call\r\n        mappedCars: [],           //this array will hold the mapped components\r\n        filteredCars: [],         //this array will hold the filtered cars\r\n        filterString: \"\",                //this is the filter string\r\n        showCars: false,\r\n        selectedCar: \"\"\r\n    });\r\n\r\n    //toggle show\r\n    const toggleShowCars = (e) => {\r\n        e.preventDefault();\r\n\r\n        setCars((prevState) => {\r\n            let newObj = { ...prevState };\r\n            newObj.filterString = newObj.showCars ? newObj.showCars : \"\";\r\n            newObj.showCars = !(newObj.showCars);\r\n            newObj.selectedCar = \"\";\r\n            return newObj;\r\n        })\r\n    }\r\n\r\n    //initial loading of cars\r\n    const loadCars = () => {\r\n\r\n        //make the ajax call\r\n        carService\r\n            .getAll()\r\n            .then(getSuccess)\r\n            .catch(getError);\r\n    }\r\n\r\n    //successfully got all car records\r\n    const getSuccess = (response) => {\r\n        //console.log(\"getSuccess\", response);\r\n\r\n        setCars((prevState) => {\r\n\r\n            let newObj = { ...prevState };\r\n            newObj.items = response.data;\r\n            newObj.filteredCars = newObj.items;\r\n            newObj.mappedCars = newObj.filteredCars.map(mapCars);\r\n            return newObj\r\n        })\r\n    };\r\n\r\n    const getError = (err) => {\r\n        console.log(\"getError\", err);\r\n    };\r\n\r\n\r\n    //set filter based on passed string\r\n    const setFilter = (e) => {\r\n        e.preventDefault();\r\n        let filterYear = e.currentTarget.dataset.page;\r\n\r\n        setCars((prevState) => {\r\n            let newObj = { ...prevState };\r\n            newObj.filterString = filterYear;\r\n            newObj.selectedCar = \"\";\r\n            return newObj;  //when this is updated, the useEffect is invoked on render\r\n        })\r\n    }\r\n\r\n    //called from the SingleCar, then in turn generates one more single car\r\n    const setSelectedCar = (car) => {\r\n        //console.log(setSelectedCar, car);\r\n\r\n        setCars((prevState) => {\r\n            let newObj = { ...prevState };\r\n            newObj.selectedCar = <SingleCar id=\"side-card\" showButton={false} car={car}></SingleCar>;\r\n            return newObj;\r\n        })\r\n    }\r\n\r\n\r\n\r\n    //mapping function for cars\r\n    const mapCars = (item) => {\r\n        return <SingleCar key={item.make + \"_\" + item.model + \"_\" + item.year} showButton={true} car={{ ...item }} onCarClicked={setSelectedCar}></SingleCar>\r\n        //                 state^^^^     pass the filter string ^^^^^^   function to initiate filter ^^^\r\n    }\r\n\r\n    //filtering function for cars\r\n    const filterCars = (car) => {\r\n        if ((cars.filterString === \"\") || (Number(car.year) === Number(cars.filterString))) {\r\n            return true;  //adds to the filter array\r\n        } else {\r\n            return false; //does not add to the filter array\r\n        }\r\n    }\r\n\r\n    //initial load -> runs only once\r\n    useEffect(() => {\r\n        loadCars();\r\n    }, []);\r\n\r\n\r\n    //runs following initial render and also when the filter string gets changed\r\n    useEffect(() => {\r\n\r\n        //if there are cars loaded\r\n        if (cars.items.length > 0) {\r\n            //filter and re-map cars\r\n            setCars((prevState) => {\r\n                let newObj = { ...prevState };\r\n                newObj.filteredCars = newObj.items.filter(filterCars); //newObj.items;\r\n                newObj.mappedCars = newObj.filteredCars.map(mapCars);\r\n                newObj.selectedCar = [];\r\n                return newObj;\r\n            })\r\n        }\r\n    }, [cars.filterString]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <button onClick={toggleShowCars} data-page=\"\" id=\"show-all\" name=\"show-all\">{cars.showCars ? \"Hide Cars\" : \"Show Cars\"}</button>\r\n            <button onClick={setFilter} data-page=\"2018\" id=\"show-2018-cars\" name=\"2018\" disabled={cars.showCars ? false : true} >2018 Cars</button>\r\n            <button onClick={setFilter} data-page=\"2019\" id=\"show-2019-cars\" name=\"2019\" disabled={cars.showCars ? false : true} >2019 Cars</button>\r\n            <button onClick={setFilter} data-page=\"2020\" id=\"show-2020-cars\" name=\"2020\" disabled={cars.showCars ? false : true} >2020 Cars</button>\r\n            <button onClick={setFilter} data-page=\"2021\" id=\"show-2021-cars\" name=\"2021\" disabled={cars.showCars ? false : true} >2021 Cars</button>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    {cars.showCars ? cars.mappedCars : \"\"}\r\n                </div>\r\n                <div className=\"col\">\r\n                    {!((cars.selectedCar) === \"\") ? cars.selectedCar : \"\"}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Cars;","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport SiteNav from \"./components/navigation/SiteNav\";\r\nimport Home from \"./Home\";\r\nimport Login from \"./components/user/Login\";\r\nimport Register from \"./components/user/Register\";\r\nimport Companies from \"./components/companies/Companies\";\r\nimport Jobs from \"./components/jobs/Jobs\";\r\nimport Friends from \"./components/friends/Friends\";\r\n// import Test from \"./components/test/Test\";\r\nimport Events from \"./components/events/Events\";\r\nimport NewEditFriends from \"./components/friends/NewEditFriends\";\r\nimport NewEditJobs from \"./components/jobs/NewEditJobs\";\r\nimport NewEditCompanies from \"./components/companies/NewEditCompanies\";\r\nimport FileUpload from \"./components/files/FileUpload\";\r\nimport { Routes, Route, useNavigate } from \"react-router-dom\";\r\nimport * as usersService from \"./services/usersService\";\r\n//import PracticeAssessment from \"./components/codeChallenge/PracticeAssessment\";\r\nimport PoliticalCandidates from \"./components/codeChallenge/PoliticalCandidates\";\r\n//import ListingExercise from \"./components/listings/ListingExercise\";\r\nimport Cars from \"./components/codeChallenge/Cars\";\r\n\r\nfunction App() {\r\n\r\n  console.log(\"App Rendering\");\r\n  const navigate = useNavigate();\r\n\r\n  //set state to initial settings\r\n  //\r\n  const [state, setState] = useState({\r\n    firstName: \"temp\",\r\n    lastName: \"user\",\r\n    isLoggedIn: false,\r\n    type: \"USER_INITIAL\"\r\n  });\r\n\r\n  //Sets the user login  state\r\n  //Parameters:\r\n  //- someState - This is a state object\r\n  //\r\n  const setUserLoginState = (someState) => {\r\n\r\n    setState(() => {\r\n\r\n      //may or may not be necessary\r\n      //still working this one out\r\n      //\r\n      if (!someState.isLoggedIn) {\r\n        if (someState.isLoggedIn === false) {\r\n          someState.isLoggedIn = null;\r\n        } else {\r\n          someState.isLoggedIn = false;\r\n        }\r\n      }\r\n\r\n      //This returned object becomes the \r\n      //new state. Re-render to follow.\r\n      //\r\n      return someState;\r\n    });\r\n\r\n  }\r\n\r\n  //Successfully retrieved the user via API\r\n  //Parameters:\r\n  //- response - API return via axios\r\n  //\r\n  const userSuccess = (response) => {\r\n    console.log(\"userSuccess\", response);\r\n\r\n    usersService\r\n      .getUserById(response.data.item.id)\r\n      .then(userByIdSuccess)\r\n      .catch(userByIdFail);\r\n\r\n  }\r\n\r\n  //Unsuccessfully retrieved the user via API\r\n  //Parameters:\r\n  //- err - API return via axios\r\n  //\r\n  const userFail = (err) => {\r\n    console.log(\"userFail\", err);\r\n\r\n    let userState = {\r\n      firstName: \"Nobody\",\r\n      lastName: \"Logged In\",\r\n      isLoggedIn: false,\r\n      type: \"USER_LOGGED_OUT\"\r\n    }\r\n    setUserLoginState(userState);\r\n  }\r\n\r\n\r\n  //Successfully retrieved the user by ID\r\n  //Parameters:\r\n  //- response - API return via axios\r\n  //\r\n  const userByIdSuccess = (response) => {\r\n\r\n    let userState = {\r\n      firstName: response.data.item.firstName,\r\n      lastName: response.data.item.lastName,\r\n      isLoggedIn: true,\r\n      type: \"USER_LOGGED_IN\"\r\n    }\r\n\r\n    setUserLoginState(userState);\r\n  }\r\n\r\n  //Unsuccessfully retrieved the user by ID\r\n  //Parameters:\r\n  //- response - API return via axios\r\n  //\r\n  const userByIdFail = (err) => {\r\n    console.log(\"userByIdFail\", err);\r\n\r\n    let userState = {\r\n      firstName: \"Nobody\",\r\n      lastName: \"Logged In\",\r\n      isLoggedIn: false,\r\n      type: \"USER_LOGGED_OUT\"\r\n    }\r\n    setUserLoginState(userState);\r\n  }\r\n\r\n  //Receives a login state from either the\r\n  //Login.jsx or the SiteNav.jsx\r\n  //Parameters:\r\n  //- loginState - this is a state that matches\r\n  //  the user state for this component\r\n  //\r\n  const receiveUserState = (loginState) => {\r\n    console.log(\"loginState\", loginState);\r\n    setUserLoginState(loginState);\r\n  }\r\n\r\n  //On startup of the site, or on refresh\r\n  //of the Web app, check to see if the \r\n  //user is already ogged in\r\n  //\r\n  const checkUserState = () => {\r\n\r\n    usersService\r\n      .getCurrentUser()\r\n      .then(userSuccess)\r\n      .catch(userFail);\r\n  }\r\n\r\n\r\n  // this is invoked following successful mount\r\n  // \r\n  useEffect(() => {\r\n    console.log(\"App mounted!\");\r\n    if (state.type === \"USER_INITIAL\") {\r\n      checkUserState();\r\n    } else if (state.type === \"USER_LOGGED_OUT\") {\r\n      navigate(\"/login\");\r\n    } else if (state.type === \"USER_LOGGED_IN\") {\r\n      navigate(\"/\");\r\n    }\r\n  }, [state.isLoggedIn, state.type]);\r\n\r\n  var copyOfState = { ...state };\r\n\r\n  return (\r\n\r\n    <React.Fragment>\r\n      <SiteNav user={copyOfState} sendAppLogoutState={receiveUserState}></SiteNav>\r\n\r\n      {/* <PracticeAssessment /> */}\r\n\r\n      <main className=\"container\" role=\"main\">\r\n        {/* This routes sectin will display the component\r\n            indicated by the element property (example <Home>). \r\n            The path value must match a Link element's \"to\" attribute.\r\n            The component must be declared/imported at the top of the page\r\n             */}\r\n        <Routes>\r\n          <Route path=\"/\" element={<Home></Home>}></Route>\r\n          <Route path=\"/login\" element={<Login sendAppLoginState={receiveUserState}></Login>}></Route>\r\n          <Route path=\"/register\" element={<Register></Register>}></Route>\r\n          <Route path=\"/companies\" element={<Companies></Companies>}></Route>\r\n          <Route path=\"/companies/new\" element={<NewEditCompanies></NewEditCompanies>}></Route>\r\n          <Route path=\"/companies/:companyId\" element={<NewEditCompanies></NewEditCompanies>}></Route>\r\n          <Route path=\"/jobs\" element={<Jobs></Jobs>} ></Route>\r\n          <Route path=\"/jobs/new\" element={<NewEditJobs></NewEditJobs>}></Route>\r\n          <Route path=\"/jobs/:jobId\" element={<NewEditJobs></NewEditJobs>}></Route>\r\n          <Route path=\"/events\" element={<Events></Events>}></Route>\r\n          <Route path=\"/files\" element={<FileUpload></FileUpload>}></Route>\r\n          <Route path=\"/friends\" element={<Friends></Friends>}></Route>\r\n          <Route path=\"/friends/new\" element={<NewEditFriends></NewEditFriends>}></Route>\r\n          <Route path=\"/friends/:friendId\" element={<NewEditFriends></NewEditFriends>}></Route>\r\n          <Route path=\"/politicalcandidates\" element={<PoliticalCandidates></PoliticalCandidates>}></Route>\r\n          <Route path=\"/cars\" element={<Cars></Cars>}></Route>\r\n        </Routes>\r\n      </main >\r\n      <footer className=\"container\">\r\n        <p>&copy; Sabio 2019-2020</p>\r\n      </footer>\r\n    </React.Fragment >\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./services/serviceHelper\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/dist/js/bootstrap\";\r\nimport \"toastr/build/toastr.min.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport debug from \"sabio-debug\";\r\nconst _logger = debug.extend(\"root\");\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals(_logger);\r\n"],"sourceRoot":""}